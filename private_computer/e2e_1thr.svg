<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>std::vector&lt;PageId, (1 samples, 0.76%)</title><rect x="582.1" y="277" width="9.0" height="15.0" fill="rgb(242,12,27)" rx="2" ry="2" />
<text  x="585.12" y="287.5" ></text>
</g>
<g >
<title>__GI___posix_spawn (11 samples, 8.33%)</title><rect x="27.9" y="181" width="98.3" height="15.0" fill="rgb(248,116,38)" rx="2" ry="2" />
<text  x="30.88" y="191.5" >__GI___posi..</text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 0.76%)</title><rect x="608.9" y="149" width="9.0" height="15.0" fill="rgb(214,54,3)" rx="2" ry="2" />
<text  x="611.94" y="159.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (3 samples, 2.27%)</title><rect x="582.1" y="309" width="26.8" height="15.0" fill="rgb(216,97,7)" rx="2" ry="2" />
<text  x="585.12" y="319.5" >S..</text>
</g>
<g >
<title>__GI___libc_read (45 samples, 34.09%)</title><rect x="126.2" y="133" width="402.3" height="15.0" fill="rgb(236,55,49)" rx="2" ry="2" />
<text  x="129.21" y="143.5" >__GI___libc_read</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.76%)</title><rect x="18.9" y="165" width="9.0" height="15.0" fill="rgb(218,205,36)" rx="2" ry="2" />
<text  x="21.94" y="175.5" ></text>
</g>
<g >
<title>clone (10 samples, 7.58%)</title><rect x="27.9" y="133" width="89.4" height="15.0" fill="rgb(252,229,42)" rx="2" ry="2" />
<text  x="30.88" y="143.5" >clone</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.76%)</title><rect x="608.9" y="229" width="9.0" height="15.0" fill="rgb(210,201,31)" rx="2" ry="2" />
<text  x="611.94" y="239.5" ></text>
</g>
<g >
<title>fgets (45 samples, 34.09%)</title><rect x="126.2" y="229" width="402.3" height="15.0" fill="rgb(234,229,29)" rx="2" ry="2" />
<text  x="129.21" y="239.5" >fgets</text>
</g>
<g >
<title>operator (1 samples, 0.76%)</title><rect x="582.1" y="197" width="9.0" height="15.0" fill="rgb(228,56,46)" rx="2" ry="2" />
<text  x="585.12" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 3.03%)</title><rect x="528.5" y="197" width="35.7" height="15.0" fill="rgb(225,9,41)" rx="2" ry="2" />
<text  x="531.48" y="207.5" >std..</text>
</g>
<g >
<title>start_thread (64 samples, 48.48%)</title><rect x="10.0" y="309" width="572.1" height="15.0" fill="rgb(236,124,34)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >start_thread</text>
</g>
<g >
<title>std::thread::join() (64 samples, 48.48%)</title><rect x="617.9" y="277" width="572.1" height="15.0" fill="rgb(228,78,45)" rx="2" ry="2" />
<text  x="620.88" y="287.5" >std::thread::join()</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.76%)</title><rect x="608.9" y="69" width="9.0" height="15.0" fill="rgb(237,215,22)" rx="2" ry="2" />
<text  x="611.94" y="79.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.76%)</title><rect x="582.1" y="165" width="9.0" height="15.0" fill="rgb(205,141,35)" rx="2" ry="2" />
<text  x="585.12" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.76%)</title><rect x="608.9" y="117" width="9.0" height="15.0" fill="rgb(209,135,14)" rx="2" ry="2" />
<text  x="611.94" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.76%)</title><rect x="18.9" y="117" width="9.0" height="15.0" fill="rgb(237,145,40)" rx="2" ry="2" />
<text  x="21.94" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.76%)</title><rect x="18.9" y="181" width="9.0" height="15.0" fill="rgb(238,196,41)" rx="2" ry="2" />
<text  x="21.94" y="191.5" ></text>
</g>
<g >
<title>pageRankComputationWithNetwork (65 samples, 49.24%)</title><rect x="608.9" y="309" width="581.1" height="15.0" fill="rgb(245,122,3)" rx="2" ry="2" />
<text  x="611.94" y="319.5" >pageRankComputationWithNetwork</text>
</g>
<g >
<title>__GI__IO_getline_info (45 samples, 34.09%)</title><rect x="126.2" y="181" width="402.3" height="15.0" fill="rgb(240,134,49)" rx="2" ry="2" />
<text  x="129.21" y="191.5" >__GI__IO_getline_info</text>
</g>
<g >
<title>PageId::PageId (4 samples, 3.03%)</title><rect x="528.5" y="261" width="35.7" height="15.0" fill="rgb(218,27,30)" rx="2" ry="2" />
<text  x="531.48" y="271.5" >Pag..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initContainersSequential (1 samples, 0.76%)</title><rect x="18.9" y="261" width="9.0" height="15.0" fill="rgb(211,216,2)" rx="2" ry="2" />
<text  x="21.94" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 3.03%)</title><rect x="528.5" y="245" width="35.7" height="15.0" fill="rgb(234,1,30)" rx="2" ry="2" />
<text  x="531.48" y="255.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.27%)</title><rect x="537.4" y="165" width="26.8" height="15.0" fill="rgb(232,44,31)" rx="2" ry="2" />
<text  x="540.42" y="175.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 3.03%)</title><rect x="528.5" y="229" width="35.7" height="15.0" fill="rgb(252,208,13)" rx="2" ry="2" />
<text  x="531.48" y="239.5" >std..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 0.76%)</title><rect x="608.9" y="261" width="9.0" height="15.0" fill="rgb(219,28,41)" rx="2" ry="2" />
<text  x="611.94" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 3.03%)</title><rect x="528.5" y="181" width="35.7" height="15.0" fill="rgb(240,217,24)" rx="2" ry="2" />
<text  x="531.48" y="191.5" >std..</text>
</g>
<g >
<title>_IO_fgets (45 samples, 34.09%)</title><rect x="126.2" y="213" width="402.3" height="15.0" fill="rgb(233,211,33)" rx="2" ry="2" />
<text  x="129.21" y="223.5" >_IO_fgets</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.76%)</title><rect x="608.9" y="165" width="9.0" height="15.0" fill="rgb(227,188,5)" rx="2" ry="2" />
<text  x="611.94" y="175.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.76%)</title><rect x="18.9" y="69" width="9.0" height="15.0" fill="rgb(235,13,35)" rx="2" ry="2" />
<text  x="21.94" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.76%)</title><rect x="608.9" y="197" width="9.0" height="15.0" fill="rgb(233,148,33)" rx="2" ry="2" />
<text  x="611.94" y="207.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.76%)</title><rect x="18.9" y="101" width="9.0" height="15.0" fill="rgb(234,203,14)" rx="2" ry="2" />
<text  x="21.94" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.76%)</title><rect x="573.2" y="197" width="8.9" height="15.0" fill="rgb(209,203,11)" rx="2" ry="2" />
<text  x="576.18" y="207.5" ></text>
</g>
<g >
<title>Page::generateId (56 samples, 42.42%)</title><rect x="27.9" y="261" width="500.6" height="15.0" fill="rgb(209,226,21)" rx="2" ry="2" />
<text  x="30.88" y="271.5" >Page::generateId</text>
</g>
<g >
<title>std::basic_istream&lt;char, (1 samples, 0.76%)</title><rect x="591.1" y="293" width="8.9" height="15.0" fill="rgb(211,69,20)" rx="2" ry="2" />
<text  x="594.06" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.76%)</title><rect x="608.9" y="53" width="9.0" height="15.0" fill="rgb(211,0,27)" rx="2" ry="2" />
<text  x="611.94" y="63.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.76%)</title><rect x="608.9" y="101" width="9.0" height="15.0" fill="rgb(223,0,1)" rx="2" ry="2" />
<text  x="611.94" y="111.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.76%)</title><rect x="18.9" y="149" width="9.0" height="15.0" fill="rgb(206,74,8)" rx="2" ry="2" />
<text  x="21.94" y="159.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (45 samples, 34.09%)</title><rect x="126.2" y="165" width="402.3" height="15.0" fill="rgb(231,32,16)" rx="2" ry="2" />
<text  x="129.21" y="175.5" >__GI__IO_default_uflow</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.76%)</title><rect x="573.2" y="229" width="8.9" height="15.0" fill="rgb(206,217,4)" rx="2" ry="2" />
<text  x="576.18" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.76%)</title><rect x="582.1" y="261" width="9.0" height="15.0" fill="rgb(241,44,10)" rx="2" ry="2" />
<text  x="585.12" y="271.5" ></text>
</g>
<g >
<title>main (68 samples, 51.52%)</title><rect x="582.1" y="325" width="607.9" height="15.0" fill="rgb(222,133,39)" rx="2" ry="2" />
<text  x="585.12" y="335.5" >main</text>
</g>
<g >
<title>_IO_new_popen (11 samples, 8.33%)</title><rect x="27.9" y="229" width="98.3" height="15.0" fill="rgb(251,212,21)" rx="2" ry="2" />
<text  x="30.88" y="239.5" >_IO_new_popen</text>
</g>
<g >
<title>Page::addLink (1 samples, 0.76%)</title><rect x="582.1" y="293" width="9.0" height="15.0" fill="rgb(220,217,32)" rx="2" ry="2" />
<text  x="585.12" y="303.5" ></text>
</g>
<g >
<title>spawn_process (11 samples, 8.33%)</title><rect x="27.9" y="197" width="98.3" height="15.0" fill="rgb(217,158,20)" rx="2" ry="2" />
<text  x="30.88" y="207.5" >spawn_process</text>
</g>
<g >
<title>__GI___libc_read (45 samples, 34.09%)</title><rect x="126.2" y="117" width="402.3" height="15.0" fill="rgb(242,107,36)" rx="2" ry="2" />
<text  x="129.21" y="127.5" >__GI___libc_read</text>
</g>
<g >
<title>munmap (1 samples, 0.76%)</title><rect x="117.3" y="133" width="8.9" height="15.0" fill="rgb(224,111,51)" rx="2" ry="2" />
<text  x="120.27" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.76%)</title><rect x="573.2" y="181" width="8.9" height="15.0" fill="rgb(243,170,28)" rx="2" ry="2" />
<text  x="576.18" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::allocate (1 samples, 0.76%)</title><rect x="582.1" y="213" width="9.0" height="15.0" fill="rgb(247,84,28)" rx="2" ry="2" />
<text  x="585.12" y="223.5" ></text>
</g>
<g >
<title>std::getline&lt;char, (1 samples, 0.76%)</title><rect x="600.0" y="293" width="8.9" height="15.0" fill="rgb(254,18,53)" rx="2" ry="2" />
<text  x="603.00" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.76%)</title><rect x="608.9" y="181" width="9.0" height="15.0" fill="rgb(241,221,45)" rx="2" ry="2" />
<text  x="611.94" y="191.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (65 samples, 49.24%)</title><rect x="608.9" y="293" width="581.1" height="15.0" fill="rgb(240,103,36)" rx="2" ry="2" />
<text  x="611.94" y="303.5" >MultiThreadedPageRankComputer::computeForNetwork</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.76%)</title><rect x="608.9" y="245" width="9.0" height="15.0" fill="rgb(249,15,43)" rx="2" ry="2" />
<text  x="611.94" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.76%)</title><rect x="608.9" y="213" width="9.0" height="15.0" fill="rgb(207,136,14)" rx="2" ry="2" />
<text  x="611.94" y="223.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 1.52%)</title><rect x="564.2" y="261" width="17.9" height="15.0" fill="rgb(232,53,34)" rx="2" ry="2" />
<text  x="567.24" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.76%)</title><rect x="573.2" y="213" width="8.9" height="15.0" fill="rgb(216,195,22)" rx="2" ry="2" />
<text  x="576.18" y="223.5" ></text>
</g>
<g >
<title>__GI__IO_getline (45 samples, 34.09%)</title><rect x="126.2" y="197" width="402.3" height="15.0" fill="rgb(226,186,35)" rx="2" ry="2" />
<text  x="129.21" y="207.5" >__GI__IO_getline</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (1 samples, 0.76%)</title><rect x="608.9" y="277" width="9.0" height="15.0" fill="rgb(219,10,25)" rx="2" ry="2" />
<text  x="611.94" y="287.5" ></text>
</g>
<g >
<title>_IO_new_proc_open (11 samples, 8.33%)</title><rect x="27.9" y="213" width="98.3" height="15.0" fill="rgb(226,29,52)" rx="2" ry="2" />
<text  x="30.88" y="223.5" >_IO_new_pro..</text>
</g>
<g >
<title>std::basic_istream&lt;char, (1 samples, 0.76%)</title><rect x="600.0" y="277" width="8.9" height="15.0" fill="rgb(207,103,14)" rx="2" ry="2" />
<text  x="603.00" y="287.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (45 samples, 34.09%)</title><rect x="126.2" y="149" width="402.3" height="15.0" fill="rgb(244,58,13)" rx="2" ry="2" />
<text  x="129.21" y="159.5" >_IO_new_file_underflow</text>
</g>
<g >
<title>clone (64 samples, 48.48%)</title><rect x="10.0" y="325" width="572.1" height="15.0" fill="rgb(216,66,51)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >clone</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (64 samples, 48.48%)</title><rect x="10.0" y="277" width="572.1" height="15.0" fill="rgb(245,53,33)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.76%)</title><rect x="18.9" y="229" width="9.0" height="15.0" fill="rgb(249,71,19)" rx="2" ry="2" />
<text  x="21.94" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (2 samples, 1.52%)</title><rect x="564.2" y="245" width="17.9" height="15.0" fill="rgb(211,166,36)" rx="2" ry="2" />
<text  x="567.24" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.76%)</title><rect x="608.9" y="85" width="9.0" height="15.0" fill="rgb(239,18,19)" rx="2" ry="2" />
<text  x="611.94" y="95.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.76%)</title><rect x="18.9" y="85" width="9.0" height="15.0" fill="rgb(227,60,1)" rx="2" ry="2" />
<text  x="21.94" y="95.5" ></text>
</g>
<g >
<title>all (132 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(219,62,44)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.76%)</title><rect x="608.9" y="37" width="9.0" height="15.0" fill="rgb(222,17,15)" rx="2" ry="2" />
<text  x="611.94" y="47.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.76%)</title><rect x="18.9" y="213" width="9.0" height="15.0" fill="rgb(221,135,32)" rx="2" ry="2" />
<text  x="21.94" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.76%)</title><rect x="608.9" y="133" width="9.0" height="15.0" fill="rgb(217,141,37)" rx="2" ry="2" />
<text  x="611.94" y="143.5" ></text>
</g>
<g >
<title>__spawnix (11 samples, 8.33%)</title><rect x="27.9" y="149" width="98.3" height="15.0" fill="rgb(231,104,48)" rx="2" ry="2" />
<text  x="30.88" y="159.5" >__spawnix</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 3.03%)</title><rect x="528.5" y="213" width="35.7" height="15.0" fill="rgb(245,115,26)" rx="2" ry="2" />
<text  x="531.48" y="223.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.76%)</title><rect x="18.9" y="197" width="9.0" height="15.0" fill="rgb(205,84,37)" rx="2" ry="2" />
<text  x="21.94" y="207.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (64 samples, 48.48%)</title><rect x="617.9" y="261" width="572.1" height="15.0" fill="rgb(248,55,25)" rx="2" ry="2" />
<text  x="620.88" y="271.5" >__pthread_clockjoin_ex</text>
</g>
<g >
<title>?? (64 samples, 48.48%)</title><rect x="10.0" y="293" width="572.1" height="15.0" fill="rgb(248,186,28)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >??</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.76%)</title><rect x="18.9" y="133" width="9.0" height="15.0" fill="rgb(212,138,0)" rx="2" ry="2" />
<text  x="21.94" y="143.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId (56 samples, 42.42%)</title><rect x="27.9" y="245" width="500.6" height="15.0" fill="rgb(223,33,47)" rx="2" ry="2" />
<text  x="30.88" y="255.5" >Sha256IdGenerator::generateId</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.76%)</title><rect x="582.1" y="181" width="9.0" height="15.0" fill="rgb(212,154,33)" rx="2" ry="2" />
<text  x="585.12" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.76%)</title><rect x="582.1" y="245" width="9.0" height="15.0" fill="rgb(244,157,10)" rx="2" ry="2" />
<text  x="585.12" y="255.5" ></text>
</g>
<g >
<title>__spawni (11 samples, 8.33%)</title><rect x="27.9" y="165" width="98.3" height="15.0" fill="rgb(209,68,14)" rx="2" ry="2" />
<text  x="30.88" y="175.5" >__spawni</text>
</g>
<g >
<title>Page::getId (1 samples, 0.76%)</title><rect x="18.9" y="245" width="9.0" height="15.0" fill="rgb(210,213,2)" rx="2" ry="2" />
<text  x="21.94" y="255.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (3 samples, 2.27%)</title><rect x="537.4" y="133" width="26.8" height="15.0" fill="rgb(242,229,41)" rx="2" ry="2" />
<text  x="540.42" y="143.5" >s..</text>
</g>
<g >
<title>__memmove_avx_unaligned (3 samples, 2.27%)</title><rect x="537.4" y="117" width="26.8" height="15.0" fill="rgb(227,90,54)" rx="2" ry="2" />
<text  x="540.42" y="127.5" >_..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.76%)</title><rect x="582.1" y="229" width="9.0" height="15.0" fill="rgb(232,40,22)" rx="2" ry="2" />
<text  x="585.12" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.27%)</title><rect x="537.4" y="149" width="26.8" height="15.0" fill="rgb(241,189,40)" rx="2" ry="2" />
<text  x="540.42" y="159.5" >s..</text>
</g>
</g>
</svg>
