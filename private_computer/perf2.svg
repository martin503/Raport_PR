<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>std::__cxx11::basic_string&lt;char, (32 samples, 17.78%)</title><rect x="246.0" y="277" width="209.8" height="15.0" fill="rgb(242,200,15)" rx="2" ry="2" />
<text  x="249.00" y="287.5" >std::__cxx11::basic_string&lt;..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 1.67%)</title><rect x="23.1" y="277" width="19.7" height="15.0" fill="rgb(229,85,31)" rx="2" ry="2" />
<text  x="26.11" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (2 samples, 1.11%)</title><rect x="770.4" y="149" width="13.2" height="15.0" fill="rgb(225,29,35)" rx="2" ry="2" />
<text  x="773.44" y="159.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 1.11%)</title><rect x="10.0" y="309" width="13.1" height="15.0" fill="rgb(207,99,48)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;PageId*, (2 samples, 1.11%)</title><rect x="62.4" y="245" width="13.2" height="15.0" fill="rgb(236,167,51)" rx="2" ry="2" />
<text  x="65.44" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (2 samples, 1.11%)</title><rect x="1072.0" y="309" width="13.1" height="15.0" fill="rgb(236,94,17)" rx="2" ry="2" />
<text  x="1075.00" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_free (2 samples, 1.11%)</title><rect x="750.8" y="37" width="13.1" height="15.0" fill="rgb(249,51,15)" rx="2" ry="2" />
<text  x="753.78" y="47.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (3 samples, 1.67%)</title><rect x="750.8" y="197" width="19.6" height="15.0" fill="rgb(245,42,37)" rx="2" ry="2" />
<text  x="753.78" y="207.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (4 samples, 2.22%)</title><rect x="593.4" y="197" width="26.3" height="15.0" fill="rgb(237,42,34)" rx="2" ry="2" />
<text  x="596.44" y="207.5" >s..</text>
</g>
<g >
<title>grow_heap (1 samples, 0.56%)</title><rect x="16.6" y="165" width="6.5" height="15.0" fill="rgb(210,31,41)" rx="2" ry="2" />
<text  x="19.56" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.11%)</title><rect x="29.7" y="261" width="13.1" height="15.0" fill="rgb(208,85,48)" rx="2" ry="2" />
<text  x="32.67" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (25 samples, 13.89%)</title><rect x="75.6" y="341" width="163.8" height="15.0" fill="rgb(240,104,28)" rx="2" ry="2" />
<text  x="78.56" y="351.5" >MultiThreadedPageRank..</text>
</g>
<g >
<title>std::__cxx11::to_string (3 samples, 1.67%)</title><rect x="1104.8" y="325" width="19.6" height="15.0" fill="rgb(212,70,6)" rx="2" ry="2" />
<text  x="1107.78" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (33 samples, 18.33%)</title><rect x="239.4" y="341" width="216.4" height="15.0" fill="rgb(226,101,45)" rx="2" ry="2" />
<text  x="242.44" y="351.5" >PageId::PageId</text>
</g>
<g >
<title>std::__relocate_a_1&lt;PageId*, (2 samples, 1.11%)</title><rect x="62.4" y="229" width="13.2" height="15.0" fill="rgb(218,206,21)" rx="2" ry="2" />
<text  x="65.44" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 1.11%)</title><rect x="1091.7" y="341" width="13.1" height="15.0" fill="rgb(211,72,16)" rx="2" ry="2" />
<text  x="1094.67" y="351.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (25 samples, 13.89%)</title><rect x="75.6" y="325" width="163.8" height="15.0" fill="rgb(206,119,18)" rx="2" ry="2" />
<text  x="78.56" y="335.5" >std::condition_variab..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (10 samples, 5.56%)</title><rect x="672.1" y="309" width="65.6" height="15.0" fill="rgb(226,218,33)" rx="2" ry="2" />
<text  x="675.11" y="319.5" >std::__..</text>
</g>
<g >
<title>_int_free (1 samples, 0.56%)</title><rect x="737.7" y="165" width="6.5" height="15.0" fill="rgb(230,25,48)" rx="2" ry="2" />
<text  x="740.67" y="175.5" ></text>
</g>
<g >
<title>operator (5 samples, 2.78%)</title><rect x="1150.7" y="213" width="32.7" height="15.0" fill="rgb(230,50,17)" rx="2" ry="2" />
<text  x="1153.67" y="223.5" >op..</text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 1.11%)</title><rect x="1091.7" y="101" width="13.1" height="15.0" fill="rgb(228,227,44)" rx="2" ry="2" />
<text  x="1094.67" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (3 samples, 1.67%)</title><rect x="23.1" y="325" width="19.7" height="15.0" fill="rgb(242,7,43)" rx="2" ry="2" />
<text  x="26.11" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.56%)</title><rect x="744.2" y="245" width="6.6" height="15.0" fill="rgb(250,175,2)" rx="2" ry="2" />
<text  x="747.22" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1183.4" y="181" width="6.6" height="15.0" fill="rgb(241,198,0)" rx="2" ry="2" />
<text  x="1186.44" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.56%)</title><rect x="737.7" y="213" width="6.5" height="15.0" fill="rgb(252,193,49)" rx="2" ry="2" />
<text  x="740.67" y="223.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.56%)</title><rect x="16.6" y="181" width="6.5" height="15.0" fill="rgb(236,89,26)" rx="2" ry="2" />
<text  x="19.56" y="191.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initContainersSequential (10 samples, 5.56%)</title><rect x="10.0" y="341" width="65.6" height="15.0" fill="rgb(224,82,37)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >MultiTh..</text>
</g>
<g >
<title>std::_Hash_bytes(void (10 samples, 5.56%)</title><rect x="672.1" y="245" width="65.6" height="15.0" fill="rgb(210,194,5)" rx="2" ry="2" />
<text  x="675.11" y="255.5" >std::_H..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (2 samples, 1.11%)</title><rect x="29.7" y="229" width="13.1" height="15.0" fill="rgb(240,83,30)" rx="2" ry="2" />
<text  x="32.67" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.56%)</title><rect x="744.2" y="213" width="6.6" height="15.0" fill="rgb(235,152,40)" rx="2" ry="2" />
<text  x="747.22" y="223.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.56%)</title><rect x="744.2" y="277" width="6.6" height="15.0" fill="rgb(243,128,38)" rx="2" ry="2" />
<text  x="747.22" y="287.5" ></text>
</g>
<g >
<title>Page::~Page (1 samples, 0.56%)</title><rect x="737.7" y="261" width="6.5" height="15.0" fill="rgb(243,179,44)" rx="2" ry="2" />
<text  x="740.67" y="271.5" ></text>
</g>
<g >
<title>shrink_heap (1 samples, 0.56%)</title><rect x="1078.6" y="149" width="6.5" height="15.0" fill="rgb(224,215,14)" rx="2" ry="2" />
<text  x="1081.56" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 2.22%)</title><rect x="1124.4" y="277" width="26.3" height="15.0" fill="rgb(246,110,24)" rx="2" ry="2" />
<text  x="1127.44" y="287.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="1091.7" y="181" width="13.1" height="15.0" fill="rgb(253,109,34)" rx="2" ry="2" />
<text  x="1094.67" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="42.8" y="229" width="19.6" height="15.0" fill="rgb(240,174,31)" rx="2" ry="2" />
<text  x="45.78" y="239.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (1 samples, 0.56%)</title><rect x="1117.9" y="245" width="6.5" height="15.0" fill="rgb(242,197,28)" rx="2" ry="2" />
<text  x="1120.89" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.56%)</title><rect x="744.2" y="69" width="6.6" height="15.0" fill="rgb(249,136,49)" rx="2" ry="2" />
<text  x="747.22" y="79.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (30 samples, 16.67%)</title><rect x="259.1" y="213" width="196.7" height="15.0" fill="rgb(248,202,37)" rx="2" ry="2" />
<text  x="262.11" y="223.5" >std::char_traits&lt;char&gt;::c..</text>
</g>
<g >
<title>std::vector&lt;PageId, (5 samples, 2.78%)</title><rect x="42.8" y="325" width="32.8" height="15.0" fill="rgb(220,29,13)" rx="2" ry="2" />
<text  x="45.78" y="335.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="455.8" y="293" width="6.5" height="15.0" fill="rgb(252,104,47)" rx="2" ry="2" />
<text  x="458.78" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (2 samples, 1.11%)</title><rect x="770.4" y="165" width="13.2" height="15.0" fill="rgb(225,157,45)" rx="2" ry="2" />
<text  x="773.44" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (30 samples, 16.67%)</title><rect x="259.1" y="245" width="196.7" height="15.0" fill="rgb(253,109,28)" rx="2" ry="2" />
<text  x="262.11" y="255.5" >std::__cxx11::basic_strin..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.56%)</title><rect x="744.2" y="181" width="6.6" height="15.0" fill="rgb(254,25,40)" rx="2" ry="2" />
<text  x="747.22" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1072.0" y="133" width="6.6" height="15.0" fill="rgb(208,90,27)" rx="2" ry="2" />
<text  x="1075.00" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (2 samples, 1.11%)</title><rect x="62.4" y="197" width="13.2" height="15.0" fill="rgb(237,224,19)" rx="2" ry="2" />
<text  x="65.44" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 2.22%)</title><rect x="1124.4" y="293" width="26.3" height="15.0" fill="rgb(228,29,53)" rx="2" ry="2" />
<text  x="1127.44" y="303.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (30 samples, 16.67%)</title><rect x="259.1" y="261" width="196.7" height="15.0" fill="rgb(219,69,35)" rx="2" ry="2" />
<text  x="262.11" y="271.5" >std::__cxx11::basic_strin..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 2.78%)</title><rect x="750.8" y="309" width="32.8" height="15.0" fill="rgb(207,144,8)" rx="2" ry="2" />
<text  x="753.78" y="319.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (3 samples, 1.67%)</title><rect x="42.8" y="293" width="19.6" height="15.0" fill="rgb(227,75,52)" rx="2" ry="2" />
<text  x="45.78" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.56%)</title><rect x="1183.4" y="149" width="6.6" height="15.0" fill="rgb(213,25,3)" rx="2" ry="2" />
<text  x="1186.44" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1144.1" y="245" width="6.6" height="15.0" fill="rgb(206,51,33)" rx="2" ry="2" />
<text  x="1147.11" y="255.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (3 samples, 1.67%)</title><rect x="1104.8" y="341" width="19.6" height="15.0" fill="rgb(219,64,37)" rx="2" ry="2" />
<text  x="1107.78" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 3.33%)</title><rect x="1150.7" y="245" width="39.3" height="15.0" fill="rgb(230,121,46)" rx="2" ry="2" />
<text  x="1153.67" y="255.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="10.0" y="277" width="13.1" height="15.0" fill="rgb(247,19,26)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (5 samples, 2.78%)</title><rect x="750.8" y="229" width="32.8" height="15.0" fill="rgb(214,19,35)" rx="2" ry="2" />
<text  x="753.78" y="239.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="455.8" y="309" width="6.5" height="15.0" fill="rgb(214,68,11)" rx="2" ry="2" />
<text  x="458.78" y="319.5" ></text>
</g>
<g >
<title>PageId::PageId (6 samples, 3.33%)</title><rect x="1150.7" y="293" width="39.3" height="15.0" fill="rgb(245,77,36)" rx="2" ry="2" />
<text  x="1153.67" y="303.5" >Pag..</text>
</g>
<g >
<title>_int_free (1 samples, 0.56%)</title><rect x="1072.0" y="85" width="6.6" height="15.0" fill="rgb(216,196,26)" rx="2" ry="2" />
<text  x="1075.00" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 1.67%)</title><rect x="23.1" y="293" width="19.7" height="15.0" fill="rgb(210,142,10)" rx="2" ry="2" />
<text  x="26.11" y="303.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (49 samples, 27.22%)</title><rect x="750.8" y="373" width="321.2" height="15.0" fill="rgb(248,228,40)" rx="2" ry="2" />
<text  x="753.78" y="383.5" >MultiThreadedPageRankComputer::computeForNe..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1183.4" y="213" width="6.6" height="15.0" fill="rgb(224,88,14)" rx="2" ry="2" />
<text  x="1186.44" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (5 samples, 2.78%)</title><rect x="750.8" y="213" width="32.8" height="15.0" fill="rgb(224,184,1)" rx="2" ry="2" />
<text  x="753.78" y="223.5" >st..</text>
</g>
<g >
<title>clone (113 samples, 62.78%)</title><rect x="10.0" y="405" width="740.8" height="15.0" fill="rgb(234,138,27)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >clone</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.56%)</title><rect x="16.6" y="197" width="6.5" height="15.0" fill="rgb(209,165,49)" rx="2" ry="2" />
<text  x="19.56" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 1.11%)</title><rect x="770.4" y="181" width="13.2" height="15.0" fill="rgb(241,11,32)" rx="2" ry="2" />
<text  x="773.44" y="191.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.56%)</title><rect x="744.2" y="197" width="6.6" height="15.0" fill="rgb(208,126,44)" rx="2" ry="2" />
<text  x="747.22" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.56%)</title><rect x="1072.0" y="213" width="6.6" height="15.0" fill="rgb(223,44,12)" rx="2" ry="2" />
<text  x="1075.00" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="1091.7" y="165" width="13.1" height="15.0" fill="rgb(235,146,21)" rx="2" ry="2" />
<text  x="1094.67" y="175.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (30 samples, 16.67%)</title><rect x="259.1" y="197" width="196.7" height="15.0" fill="rgb(224,134,53)" rx="2" ry="2" />
<text  x="262.11" y="207.5" >__memmove_avx_unaligned_e..</text>
</g>
<g >
<title>Page::Page (2 samples, 1.11%)</title><rect x="1091.7" y="293" width="13.1" height="15.0" fill="rgb(228,119,31)" rx="2" ry="2" />
<text  x="1094.67" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (5 samples, 2.78%)</title><rect x="750.8" y="245" width="32.8" height="15.0" fill="rgb(212,135,36)" rx="2" ry="2" />
<text  x="753.78" y="255.5" >__..</text>
</g>
<g >
<title>checked_request2size (1 samples, 0.56%)</title><rect x="1137.6" y="213" width="6.5" height="15.0" fill="rgb(225,128,45)" rx="2" ry="2" />
<text  x="1140.56" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (3 samples, 1.67%)</title><rect x="750.8" y="69" width="19.6" height="15.0" fill="rgb(244,143,23)" rx="2" ry="2" />
<text  x="753.78" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (8 samples, 4.44%)</title><rect x="619.7" y="293" width="52.4" height="15.0" fill="rgb(249,18,12)" rx="2" ry="2" />
<text  x="622.67" y="303.5" >std::..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (10 samples, 5.56%)</title><rect x="672.1" y="277" width="65.6" height="15.0" fill="rgb(208,60,23)" rx="2" ry="2" />
<text  x="675.11" y="287.5" >std::ha..</text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 1.11%)</title><rect x="737.7" y="341" width="13.1" height="15.0" fill="rgb(247,0,15)" rx="2" ry="2" />
<text  x="740.67" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 1.11%)</title><rect x="1072.0" y="261" width="13.1" height="15.0" fill="rgb(217,115,45)" rx="2" ry="2" />
<text  x="1075.00" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (31 samples, 17.22%)</title><rect x="468.9" y="309" width="203.2" height="15.0" fill="rgb(205,46,52)" rx="2" ry="2" />
<text  x="471.89" y="319.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>__pthread_clockjoin_ex (44 samples, 24.44%)</title><rect x="783.6" y="341" width="288.4" height="15.0" fill="rgb(238,88,49)" rx="2" ry="2" />
<text  x="786.56" y="351.5" >__pthread_clockjoin_ex</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="455.8" y="325" width="6.5" height="15.0" fill="rgb(211,184,47)" rx="2" ry="2" />
<text  x="458.78" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 3.33%)</title><rect x="1150.7" y="277" width="39.3" height="15.0" fill="rgb(208,211,31)" rx="2" ry="2" />
<text  x="1153.67" y="287.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="10.0" y="293" width="13.1" height="15.0" fill="rgb(253,215,27)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 1.67%)</title><rect x="527.9" y="261" width="19.7" height="15.0" fill="rgb(222,219,22)" rx="2" ry="2" />
<text  x="530.89" y="271.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (4 samples, 2.22%)</title><rect x="1124.4" y="309" width="26.3" height="15.0" fill="rgb(253,178,0)" rx="2" ry="2" />
<text  x="1127.44" y="319.5" >s..</text>
</g>
<g >
<title>Network::~Network (2 samples, 1.11%)</title><rect x="1072.0" y="373" width="13.1" height="15.0" fill="rgb(226,100,31)" rx="2" ry="2" />
<text  x="1075.00" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="750.8" y="101" width="19.6" height="15.0" fill="rgb(244,64,34)" rx="2" ry="2" />
<text  x="753.78" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="1131.0" y="261" width="19.7" height="15.0" fill="rgb(249,217,12)" rx="2" ry="2" />
<text  x="1134.00" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (3 samples, 1.67%)</title><rect x="42.8" y="277" width="19.6" height="15.0" fill="rgb(242,174,30)" rx="2" ry="2" />
<text  x="45.78" y="287.5" ></text>
</g>
<g >
<title>Page::addLink (6 samples, 3.33%)</title><rect x="1150.7" y="357" width="39.3" height="15.0" fill="rgb(243,133,18)" rx="2" ry="2" />
<text  x="1153.67" y="367.5" >Pag..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.56%)</title><rect x="1072.0" y="229" width="6.6" height="15.0" fill="rgb(223,52,11)" rx="2" ry="2" />
<text  x="1075.00" y="239.5" ></text>
</g>
<g >
<title>heap_trim (1 samples, 0.56%)</title><rect x="1078.6" y="165" width="6.5" height="15.0" fill="rgb(240,45,18)" rx="2" ry="2" />
<text  x="1081.56" y="175.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (4 samples, 2.22%)</title><rect x="1124.4" y="325" width="26.3" height="15.0" fill="rgb(209,216,2)" rx="2" ry="2" />
<text  x="1127.44" y="335.5" >S..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.56%)</title><rect x="1078.6" y="197" width="6.5" height="15.0" fill="rgb(228,191,48)" rx="2" ry="2" />
<text  x="1081.56" y="207.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.56%)</title><rect x="1072.0" y="181" width="6.6" height="15.0" fill="rgb(217,27,0)" rx="2" ry="2" />
<text  x="1075.00" y="191.5" ></text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize (16 samples, 8.89%)</title><rect x="1085.1" y="373" width="104.9" height="15.0" fill="rgb(245,5,42)" rx="2" ry="2" />
<text  x="1088.11" y="383.5" >SimpleNetwor..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1183.4" y="197" width="6.6" height="15.0" fill="rgb(211,213,44)" rx="2" ry="2" />
<text  x="1186.44" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (42 samples, 23.33%)</title><rect x="462.3" y="341" width="275.4" height="15.0" fill="rgb(219,133,26)" rx="2" ry="2" />
<text  x="465.33" y="351.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>std::_Hash_impl::hash (10 samples, 5.56%)</title><rect x="672.1" y="261" width="65.6" height="15.0" fill="rgb(212,2,38)" rx="2" ry="2" />
<text  x="675.11" y="271.5" >std::_H..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.56%)</title><rect x="744.2" y="85" width="6.6" height="15.0" fill="rgb(227,21,4)" rx="2" ry="2" />
<text  x="747.22" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 0.56%)</title><rect x="455.8" y="261" width="6.5" height="15.0" fill="rgb(205,127,12)" rx="2" ry="2" />
<text  x="458.78" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 1.67%)</title><rect x="600.0" y="181" width="19.7" height="15.0" fill="rgb(219,115,35)" rx="2" ry="2" />
<text  x="603.00" y="191.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 0.56%)</title><rect x="737.7" y="325" width="6.5" height="15.0" fill="rgb(225,119,33)" rx="2" ry="2" />
<text  x="740.67" y="335.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (25 samples, 13.89%)</title><rect x="75.6" y="293" width="163.8" height="15.0" fill="rgb(215,33,25)" rx="2" ry="2" />
<text  x="78.56" y="303.5" >__pthread_cond_wait</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (5 samples, 2.78%)</title><rect x="750.8" y="293" width="32.8" height="15.0" fill="rgb(234,120,32)" rx="2" ry="2" />
<text  x="753.78" y="303.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (6 samples, 3.33%)</title><rect x="1150.7" y="325" width="39.3" height="15.0" fill="rgb(210,118,34)" rx="2" ry="2" />
<text  x="1153.67" y="335.5" >std..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 1.11%)</title><rect x="770.4" y="197" width="13.2" height="15.0" fill="rgb(243,123,9)" rx="2" ry="2" />
<text  x="773.44" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (11 samples, 6.11%)</title><rect x="547.6" y="277" width="72.1" height="15.0" fill="rgb(209,187,17)" rx="2" ry="2" />
<text  x="550.56" y="287.5" >std::__d..</text>
</g>
<g >
<title>_int_free (1 samples, 0.56%)</title><rect x="455.8" y="245" width="6.5" height="15.0" fill="rgb(242,226,20)" rx="2" ry="2" />
<text  x="458.78" y="255.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (2 samples, 1.11%)</title><rect x="1091.7" y="213" width="13.1" height="15.0" fill="rgb(246,181,50)" rx="2" ry="2" />
<text  x="1094.67" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (32 samples, 17.78%)</title><rect x="246.0" y="309" width="209.8" height="15.0" fill="rgb(227,101,9)" rx="2" ry="2" />
<text  x="249.00" y="319.5" >std::__cxx11::basic_string&lt;..</text>
</g>
<g >
<title>__vsnprintf_internal (3 samples, 1.67%)</title><rect x="1104.8" y="277" width="19.6" height="15.0" fill="rgb(252,114,8)" rx="2" ry="2" />
<text  x="1107.78" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.56%)</title><rect x="1072.0" y="197" width="6.6" height="15.0" fill="rgb(207,106,1)" rx="2" ry="2" />
<text  x="1075.00" y="207.5" ></text>
</g>
<g >
<title>unlink_chunk (1 samples, 0.56%)</title><rect x="737.7" y="133" width="6.5" height="15.0" fill="rgb(205,154,54)" rx="2" ry="2" />
<text  x="740.67" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 1.11%)</title><rect x="1091.7" y="229" width="13.1" height="15.0" fill="rgb(216,43,3)" rx="2" ry="2" />
<text  x="1094.67" y="239.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (5 samples, 2.78%)</title><rect x="586.9" y="245" width="32.8" height="15.0" fill="rgb(223,92,38)" rx="2" ry="2" />
<text  x="589.89" y="255.5" >st..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.56%)</title><rect x="737.7" y="229" width="6.5" height="15.0" fill="rgb(251,66,6)" rx="2" ry="2" />
<text  x="740.67" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (2 samples, 1.11%)</title><rect x="1072.0" y="293" width="13.1" height="15.0" fill="rgb(249,152,35)" rx="2" ry="2" />
<text  x="1075.00" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.56%)</title><rect x="1078.6" y="245" width="6.5" height="15.0" fill="rgb(235,224,42)" rx="2" ry="2" />
<text  x="1081.56" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (23 samples, 12.78%)</title><rect x="468.9" y="293" width="150.8" height="15.0" fill="rgb(228,36,51)" rx="2" ry="2" />
<text  x="471.89" y="303.5" >std::_Hashtable&lt;Pag..</text>
</g>
<g >
<title>PageIdHash::operator() (10 samples, 5.56%)</title><rect x="672.1" y="293" width="65.6" height="15.0" fill="rgb(227,229,25)" rx="2" ry="2" />
<text  x="675.11" y="303.5" >PageIdH..</text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 1.11%)</title><rect x="62.4" y="293" width="13.2" height="15.0" fill="rgb(205,40,4)" rx="2" ry="2" />
<text  x="65.44" y="303.5" ></text>
</g>
<g >
<title>_int_malloc (3 samples, 1.67%)</title><rect x="1163.8" y="181" width="19.6" height="15.0" fill="rgb(241,132,45)" rx="2" ry="2" />
<text  x="1166.78" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (5 samples, 2.78%)</title><rect x="1150.7" y="197" width="32.7" height="15.0" fill="rgb(236,8,43)" rx="2" ry="2" />
<text  x="1153.67" y="207.5" >__..</text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 1.11%)</title><rect x="1091.7" y="277" width="13.1" height="15.0" fill="rgb(226,147,6)" rx="2" ry="2" />
<text  x="1094.67" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (2 samples, 1.11%)</title><rect x="1091.7" y="325" width="13.1" height="15.0" fill="rgb(207,95,34)" rx="2" ry="2" />
<text  x="1094.67" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.56%)</title><rect x="1072.0" y="117" width="6.6" height="15.0" fill="rgb(219,85,17)" rx="2" ry="2" />
<text  x="1075.00" y="127.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (7 samples, 3.89%)</title><rect x="1104.8" y="357" width="45.9" height="15.0" fill="rgb(223,33,23)" rx="2" ry="2" />
<text  x="1107.78" y="367.5" >Netw..</text>
</g>
<g >
<title>PageId::PageId (3 samples, 1.67%)</title><rect x="42.8" y="261" width="19.6" height="15.0" fill="rgb(236,169,14)" rx="2" ry="2" />
<text  x="45.78" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 0.56%)</title><rect x="737.7" y="293" width="6.5" height="15.0" fill="rgb(253,67,18)" rx="2" ry="2" />
<text  x="740.67" y="303.5" ></text>
</g>
<g >
<title>__vfprintf_internal (3 samples, 1.67%)</title><rect x="1104.8" y="261" width="19.6" height="15.0" fill="rgb(208,79,41)" rx="2" ry="2" />
<text  x="1107.78" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="744.2" y="117" width="6.6" height="15.0" fill="rgb(238,18,50)" rx="2" ry="2" />
<text  x="747.22" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.56%)</title><rect x="1144.1" y="213" width="6.6" height="15.0" fill="rgb(240,225,45)" rx="2" ry="2" />
<text  x="1147.11" y="223.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.56%)</title><rect x="1183.4" y="165" width="6.6" height="15.0" fill="rgb(235,3,27)" rx="2" ry="2" />
<text  x="1186.44" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 3.33%)</title><rect x="1150.7" y="229" width="39.3" height="15.0" fill="rgb(230,126,39)" rx="2" ry="2" />
<text  x="1153.67" y="239.5" >std..</text>
</g>
<g >
<title>__pthread_cond_wait_common (25 samples, 13.89%)</title><rect x="75.6" y="277" width="163.8" height="15.0" fill="rgb(213,196,22)" rx="2" ry="2" />
<text  x="78.56" y="287.5" >__pthread_cond_wait_c..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="10.0" y="245" width="13.1" height="15.0" fill="rgb(229,118,4)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (113 samples, 62.78%)</title><rect x="10.0" y="357" width="740.8" height="15.0" fill="rgb(236,140,17)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (30 samples, 16.67%)</title><rect x="259.1" y="229" width="196.7" height="15.0" fill="rgb(245,229,13)" rx="2" ry="2" />
<text  x="262.11" y="239.5" >std::__cxx11::basic_strin..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (3 samples, 1.67%)</title><rect x="750.8" y="181" width="19.6" height="15.0" fill="rgb(234,26,15)" rx="2" ry="2" />
<text  x="753.78" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 1.11%)</title><rect x="62.4" y="261" width="13.2" height="15.0" fill="rgb(229,109,16)" rx="2" ry="2" />
<text  x="65.44" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 1.67%)</title><rect x="23.1" y="309" width="19.7" height="15.0" fill="rgb(228,214,14)" rx="2" ry="2" />
<text  x="26.11" y="319.5" ></text>
</g>
<g >
<title>malloc_consolidate (2 samples, 1.11%)</title><rect x="770.4" y="117" width="13.2" height="15.0" fill="rgb(238,104,24)" rx="2" ry="2" />
<text  x="773.44" y="127.5" ></text>
</g>
<g >
<title>Network::addPage (2 samples, 1.11%)</title><rect x="1091.7" y="357" width="13.1" height="15.0" fill="rgb(216,14,52)" rx="2" ry="2" />
<text  x="1094.67" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 1.11%)</title><rect x="62.4" y="277" width="13.2" height="15.0" fill="rgb(217,148,14)" rx="2" ry="2" />
<text  x="65.44" y="287.5" ></text>
</g>
<g >
<title>operator (2 samples, 1.11%)</title><rect x="246.0" y="261" width="13.1" height="15.0" fill="rgb(222,142,48)" rx="2" ry="2" />
<text  x="249.00" y="271.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.56%)</title><rect x="744.2" y="101" width="6.6" height="15.0" fill="rgb(205,201,3)" rx="2" ry="2" />
<text  x="747.22" y="111.5" ></text>
</g>
<g >
<title>start_thread (113 samples, 62.78%)</title><rect x="10.0" y="389" width="740.8" height="15.0" fill="rgb(229,175,3)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >start_thread</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.56%)</title><rect x="744.2" y="293" width="6.6" height="15.0" fill="rgb(245,50,15)" rx="2" ry="2" />
<text  x="747.22" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 1.11%)</title><rect x="29.7" y="245" width="13.1" height="15.0" fill="rgb(238,196,7)" rx="2" ry="2" />
<text  x="32.67" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (3 samples, 1.67%)</title><rect x="527.9" y="245" width="19.7" height="15.0" fill="rgb(236,22,27)" rx="2" ry="2" />
<text  x="530.89" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 0.56%)</title><rect x="737.7" y="309" width="6.5" height="15.0" fill="rgb(250,146,36)" rx="2" ry="2" />
<text  x="740.67" y="319.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 1.11%)</title><rect x="770.4" y="133" width="13.2" height="15.0" fill="rgb(239,55,17)" rx="2" ry="2" />
<text  x="773.44" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1072.0" y="149" width="6.6" height="15.0" fill="rgb(222,33,38)" rx="2" ry="2" />
<text  x="1075.00" y="159.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.56%)</title><rect x="16.6" y="149" width="6.5" height="15.0" fill="rgb(232,52,13)" rx="2" ry="2" />
<text  x="19.56" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.56%)</title><rect x="737.7" y="245" width="6.5" height="15.0" fill="rgb(243,110,53)" rx="2" ry="2" />
<text  x="740.67" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="42.8" y="245" width="19.6" height="15.0" fill="rgb(227,115,18)" rx="2" ry="2" />
<text  x="45.78" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 2.78%)</title><rect x="750.8" y="325" width="32.8" height="15.0" fill="rgb(220,140,11)" rx="2" ry="2" />
<text  x="753.78" y="335.5" >st..</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.56%)</title><rect x="1098.2" y="85" width="6.6" height="15.0" fill="rgb(225,212,20)" rx="2" ry="2" />
<text  x="1101.22" y="95.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.56%)</title><rect x="1078.6" y="229" width="6.5" height="15.0" fill="rgb(209,48,19)" rx="2" ry="2" />
<text  x="1081.56" y="239.5" ></text>
</g>
<g >
<title>?? (113 samples, 62.78%)</title><rect x="10.0" y="373" width="740.8" height="15.0" fill="rgb(233,152,34)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >??</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="62.4" y="149" width="13.2" height="15.0" fill="rgb(240,27,2)" rx="2" ry="2" />
<text  x="65.44" y="159.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.56%)</title><rect x="763.9" y="37" width="6.5" height="15.0" fill="rgb(209,28,54)" rx="2" ry="2" />
<text  x="766.89" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (11 samples, 6.11%)</title><rect x="547.6" y="261" width="72.1" height="15.0" fill="rgb(222,210,15)" rx="2" ry="2" />
<text  x="550.56" y="271.5" >std::__d..</text>
</g>
<g >
<title>std::__relocate_object_a&lt;PageId, (2 samples, 1.11%)</title><rect x="62.4" y="213" width="13.2" height="15.0" fill="rgb(222,8,49)" rx="2" ry="2" />
<text  x="65.44" y="223.5" ></text>
</g>
<g >
<title>pageRankComputationWithNumNodes (67 samples, 37.22%)</title><rect x="750.8" y="389" width="439.2" height="15.0" fill="rgb(250,125,16)" rx="2" ry="2" />
<text  x="753.78" y="399.5" >pageRankComputationWithNumNodes</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (3 samples, 1.67%)</title><rect x="750.8" y="53" width="19.6" height="15.0" fill="rgb(244,148,52)" rx="2" ry="2" />
<text  x="753.78" y="63.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.56%)</title><rect x="252.6" y="245" width="6.5" height="15.0" fill="rgb(245,200,11)" rx="2" ry="2" />
<text  x="255.56" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="744.2" y="165" width="6.6" height="15.0" fill="rgb(242,223,10)" rx="2" ry="2" />
<text  x="747.22" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (6 samples, 3.33%)</title><rect x="1150.7" y="341" width="39.3" height="15.0" fill="rgb(206,9,38)" rx="2" ry="2" />
<text  x="1153.67" y="351.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (5 samples, 2.78%)</title><rect x="750.8" y="277" width="32.8" height="15.0" fill="rgb(246,141,48)" rx="2" ry="2" />
<text  x="753.78" y="287.5" >st..</text>
</g>
<g >
<title>operator (2 samples, 1.11%)</title><rect x="1091.7" y="117" width="13.1" height="15.0" fill="rgb(226,99,20)" rx="2" ry="2" />
<text  x="1094.67" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (8 samples, 4.44%)</title><rect x="619.7" y="277" width="52.4" height="15.0" fill="rgb(250,34,36)" rx="2" ry="2" />
<text  x="622.67" y="287.5" >std::..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 0.56%)</title><rect x="1072.0" y="101" width="6.6" height="15.0" fill="rgb(251,120,42)" rx="2" ry="2" />
<text  x="1075.00" y="111.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (2 samples, 1.11%)</title><rect x="1072.0" y="341" width="13.1" height="15.0" fill="rgb(211,90,8)" rx="2" ry="2" />
<text  x="1075.00" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="69.0" y="133" width="6.6" height="15.0" fill="rgb(250,134,31)" rx="2" ry="2" />
<text  x="72.00" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.56%)</title><rect x="455.8" y="277" width="6.5" height="15.0" fill="rgb(245,212,51)" rx="2" ry="2" />
<text  x="458.78" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (3 samples, 1.67%)</title><rect x="750.8" y="149" width="19.6" height="15.0" fill="rgb(211,23,14)" rx="2" ry="2" />
<text  x="753.78" y="159.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (2 samples, 1.11%)</title><rect x="1072.0" y="325" width="13.1" height="15.0" fill="rgb(230,65,44)" rx="2" ry="2" />
<text  x="1075.00" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="750.8" y="85" width="19.6" height="15.0" fill="rgb(236,123,35)" rx="2" ry="2" />
<text  x="753.78" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="1104.8" y="309" width="19.6" height="15.0" fill="rgb(240,53,9)" rx="2" ry="2" />
<text  x="1107.78" y="319.5" ></text>
</g>
<g >
<title>Page::~Page (2 samples, 1.11%)</title><rect x="1072.0" y="277" width="13.1" height="15.0" fill="rgb(207,215,44)" rx="2" ry="2" />
<text  x="1075.00" y="287.5" ></text>
</g>
<g >
<title>Page::generateId (4 samples, 2.22%)</title><rect x="1124.4" y="341" width="26.3" height="15.0" fill="rgb(238,120,43)" rx="2" ry="2" />
<text  x="1127.44" y="351.5" >P..</text>
</g>
<g >
<title>PageId::PageId (2 samples, 1.11%)</title><rect x="1091.7" y="197" width="13.1" height="15.0" fill="rgb(242,152,38)" rx="2" ry="2" />
<text  x="1094.67" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="1091.7" y="133" width="13.1" height="15.0" fill="rgb(209,63,37)" rx="2" ry="2" />
<text  x="1094.67" y="143.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.56%)</title><rect x="1072.0" y="245" width="6.6" height="15.0" fill="rgb(239,150,7)" rx="2" ry="2" />
<text  x="1075.00" y="255.5" ></text>
</g>
<g >
<title>Page::getId (2 samples, 1.11%)</title><rect x="10.0" y="325" width="13.1" height="15.0" fill="rgb(208,0,35)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.56%)</title><rect x="744.2" y="261" width="6.6" height="15.0" fill="rgb(229,143,46)" rx="2" ry="2" />
<text  x="747.22" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned (1 samples, 0.56%)</title><rect x="1131.0" y="245" width="6.6" height="15.0" fill="rgb(242,201,52)" rx="2" ry="2" />
<text  x="1134.00" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (33 samples, 18.33%)</title><rect x="239.4" y="325" width="216.4" height="15.0" fill="rgb(219,45,51)" rx="2" ry="2" />
<text  x="242.44" y="335.5" >std::__cxx11::basic_string&lt;c..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="1072.0" y="165" width="6.6" height="15.0" fill="rgb(239,216,43)" rx="2" ry="2" />
<text  x="1075.00" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.56%)</title><rect x="1078.6" y="213" width="6.5" height="15.0" fill="rgb(222,221,26)" rx="2" ry="2" />
<text  x="1081.56" y="223.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 2.78%)</title><rect x="750.8" y="341" width="32.8" height="15.0" fill="rgb(227,85,24)" rx="2" ry="2" />
<text  x="753.78" y="351.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.56%)</title><rect x="744.2" y="309" width="6.6" height="15.0" fill="rgb(227,135,42)" rx="2" ry="2" />
<text  x="747.22" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 1.11%)</title><rect x="1072.0" y="357" width="13.1" height="15.0" fill="rgb(221,78,39)" rx="2" ry="2" />
<text  x="1075.00" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 3.33%)</title><rect x="1150.7" y="261" width="39.3" height="15.0" fill="rgb(244,60,12)" rx="2" ry="2" />
<text  x="1153.67" y="271.5" >std..</text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 1.11%)</title><rect x="10.0" y="213" width="13.1" height="15.0" fill="rgb(205,202,32)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (5 samples, 2.78%)</title><rect x="750.8" y="357" width="32.8" height="15.0" fill="rgb(208,120,46)" rx="2" ry="2" />
<text  x="753.78" y="367.5" >Mu..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (3 samples, 1.67%)</title><rect x="750.8" y="165" width="19.6" height="15.0" fill="rgb(240,72,11)" rx="2" ry="2" />
<text  x="753.78" y="175.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.56%)</title><rect x="744.2" y="229" width="6.6" height="15.0" fill="rgb(225,134,20)" rx="2" ry="2" />
<text  x="747.22" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 1.67%)</title><rect x="750.8" y="117" width="19.6" height="15.0" fill="rgb(241,141,35)" rx="2" ry="2" />
<text  x="753.78" y="127.5" ></text>
</g>
<g >
<title>all (180 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(217,70,33)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.56%)</title><rect x="744.2" y="325" width="6.6" height="15.0" fill="rgb(211,157,14)" rx="2" ry="2" />
<text  x="747.22" y="335.5" ></text>
</g>
<g >
<title>tcache_put (1 samples, 0.56%)</title><rect x="455.8" y="229" width="6.5" height="15.0" fill="rgb(247,148,9)" rx="2" ry="2" />
<text  x="458.78" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="744.2" y="149" width="6.6" height="15.0" fill="rgb(228,187,21)" rx="2" ry="2" />
<text  x="747.22" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (2 samples, 1.11%)</title><rect x="1091.7" y="309" width="13.1" height="15.0" fill="rgb(227,64,51)" rx="2" ry="2" />
<text  x="1094.67" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (2 samples, 1.11%)</title><rect x="62.4" y="181" width="13.2" height="15.0" fill="rgb(206,20,7)" rx="2" ry="2" />
<text  x="65.44" y="191.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (25 samples, 13.89%)</title><rect x="75.6" y="261" width="163.8" height="15.0" fill="rgb(227,34,36)" rx="2" ry="2" />
<text  x="78.56" y="271.5" >futex_wait_cancelable</text>
</g>
<g >
<title>operator (1 samples, 0.56%)</title><rect x="1144.1" y="229" width="6.6" height="15.0" fill="rgb(248,8,3)" rx="2" ry="2" />
<text  x="1147.11" y="239.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 1.11%)</title><rect x="1091.7" y="245" width="13.1" height="15.0" fill="rgb(206,161,24)" rx="2" ry="2" />
<text  x="1094.67" y="255.5" ></text>
</g>
<g >
<title>madvise (1 samples, 0.56%)</title><rect x="1078.6" y="133" width="6.5" height="15.0" fill="rgb(231,155,44)" rx="2" ry="2" />
<text  x="1081.56" y="143.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (25 samples, 13.89%)</title><rect x="75.6" y="309" width="163.8" height="15.0" fill="rgb(214,66,24)" rx="2" ry="2" />
<text  x="78.56" y="319.5" >std::condition_variab..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.56%)</title><rect x="1137.6" y="229" width="6.5" height="15.0" fill="rgb(205,11,28)" rx="2" ry="2" />
<text  x="1140.56" y="239.5" ></text>
</g>
<g >
<title>operator (2 samples, 1.11%)</title><rect x="10.0" y="229" width="13.1" height="15.0" fill="rgb(228,107,28)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>PageId::~PageId (3 samples, 1.67%)</title><rect x="750.8" y="133" width="19.6" height="15.0" fill="rgb(216,113,50)" rx="2" ry="2" />
<text  x="753.78" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 1.67%)</title><rect x="527.9" y="277" width="19.7" height="15.0" fill="rgb(216,87,43)" rx="2" ry="2" />
<text  x="530.89" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 0.56%)</title><rect x="737.7" y="277" width="6.5" height="15.0" fill="rgb(239,51,20)" rx="2" ry="2" />
<text  x="740.67" y="287.5" ></text>
</g>
<g >
<title>main (67 samples, 37.22%)</title><rect x="750.8" y="405" width="439.2" height="15.0" fill="rgb(206,28,53)" rx="2" ry="2" />
<text  x="753.78" y="415.5" >main</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="1091.7" y="149" width="13.1" height="15.0" fill="rgb(225,36,53)" rx="2" ry="2" />
<text  x="1094.67" y="159.5" ></text>
</g>
<g >
<title>PageId::operator== (5 samples, 2.78%)</title><rect x="586.9" y="229" width="32.8" height="15.0" fill="rgb(205,45,6)" rx="2" ry="2" />
<text  x="589.89" y="239.5" >Pa..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.56%)</title><rect x="744.2" y="133" width="6.6" height="15.0" fill="rgb(207,27,40)" rx="2" ry="2" />
<text  x="747.22" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (6 samples, 3.33%)</title><rect x="1150.7" y="309" width="39.3" height="15.0" fill="rgb(243,149,21)" rx="2" ry="2" />
<text  x="1153.67" y="319.5" >__g..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (42 samples, 23.33%)</title><rect x="462.3" y="325" width="275.4" height="15.0" fill="rgb(219,59,10)" rx="2" ry="2" />
<text  x="465.33" y="335.5" >std::__detail::_Map_base&lt;PageId,</text>
</g>
<g >
<title>std::vector&lt;PageId, (5 samples, 2.78%)</title><rect x="42.8" y="309" width="32.8" height="15.0" fill="rgb(253,155,40)" rx="2" ry="2" />
<text  x="45.78" y="319.5" >st..</text>
</g>
<g >
<title>unlink_chunk (2 samples, 1.11%)</title><rect x="770.4" y="101" width="13.2" height="15.0" fill="rgb(221,5,43)" rx="2" ry="2" />
<text  x="773.44" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.56%)</title><rect x="737.7" y="197" width="6.5" height="15.0" fill="rgb(217,26,51)" rx="2" ry="2" />
<text  x="740.67" y="207.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.56%)</title><rect x="737.7" y="149" width="6.5" height="15.0" fill="rgb(224,80,30)" rx="2" ry="2" />
<text  x="740.67" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (5 samples, 2.78%)</title><rect x="750.8" y="261" width="32.8" height="15.0" fill="rgb(208,174,46)" rx="2" ry="2" />
<text  x="753.78" y="271.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.56%)</title><rect x="737.7" y="181" width="6.5" height="15.0" fill="rgb(214,216,37)" rx="2" ry="2" />
<text  x="740.67" y="191.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 1.11%)</title><rect x="62.4" y="165" width="13.2" height="15.0" fill="rgb(222,48,32)" rx="2" ry="2" />
<text  x="65.44" y="175.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.56%)</title><rect x="1078.6" y="181" width="6.5" height="15.0" fill="rgb(248,35,44)" rx="2" ry="2" />
<text  x="1081.56" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.11%)</title><rect x="10.0" y="261" width="13.1" height="15.0" fill="rgb(250,182,53)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>std::thread::join() (44 samples, 24.44%)</title><rect x="783.6" y="357" width="288.4" height="15.0" fill="rgb(232,186,41)" rx="2" ry="2" />
<text  x="786.56" y="367.5" >std::thread::join()</text>
</g>
<g >
<title>operator (1 samples, 0.56%)</title><rect x="1137.6" y="245" width="6.5" height="15.0" fill="rgb(219,109,50)" rx="2" ry="2" />
<text  x="1140.56" y="255.5" ></text>
</g>
<g >
<title>__GI__IO_default_xsputn (1 samples, 0.56%)</title><rect x="1117.9" y="229" width="6.5" height="15.0" fill="rgb(214,63,30)" rx="2" ry="2" />
<text  x="1120.89" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (32 samples, 17.78%)</title><rect x="246.0" y="293" width="209.8" height="15.0" fill="rgb(233,145,50)" rx="2" ry="2" />
<text  x="249.00" y="303.5" >std::__cxx11::basic_string&lt;..</text>
</g>
<g >
<title>tcache_get (1 samples, 0.56%)</title><rect x="1144.1" y="197" width="6.6" height="15.0" fill="rgb(235,180,4)" rx="2" ry="2" />
<text  x="1147.11" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 1.11%)</title><rect x="1091.7" y="261" width="13.1" height="15.0" fill="rgb(216,145,47)" rx="2" ry="2" />
<text  x="1094.67" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (5 samples, 2.78%)</title><rect x="586.9" y="213" width="32.8" height="15.0" fill="rgb(240,141,42)" rx="2" ry="2" />
<text  x="589.89" y="223.5" >st..</text>
</g>
<g >
<title>vsnprintf (3 samples, 1.67%)</title><rect x="1104.8" y="293" width="19.6" height="15.0" fill="rgb(252,83,20)" rx="2" ry="2" />
<text  x="1107.78" y="303.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.56%)</title><rect x="455.8" y="341" width="6.5" height="15.0" fill="rgb(208,176,26)" rx="2" ry="2" />
<text  x="458.78" y="351.5" ></text>
</g>
</g>
</svg>
