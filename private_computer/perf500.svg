<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (396 samples, 69.11%)</title><rect x="10.0" y="405" width="815.5" height="15.0" fill="rgb(222,59,3)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.52%)</title><rect x="753.4" y="325" width="6.2" height="15.0" fill="rgb(235,162,51)" rx="2" ry="2" />
<text  x="756.42" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="1126.2" y="357" width="8.2" height="15.0" fill="rgb(252,171,6)" rx="2" ry="2" />
<text  x="1129.16" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="516.6" y="309" width="8.2" height="15.0" fill="rgb(242,210,50)" rx="2" ry="2" />
<text  x="519.60" y="319.5" ></text>
</g>
<g >
<title>mprotect (2 samples, 0.35%)</title><rect x="456.9" y="133" width="4.1" height="15.0" fill="rgb(226,87,26)" rx="2" ry="2" />
<text  x="459.88" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="55.3" y="309" width="4.1" height="15.0" fill="rgb(224,206,33)" rx="2" ry="2" />
<text  x="58.31" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;PageId, (1 samples, 0.17%)</title><rect x="1183.8" y="389" width="2.1" height="15.0" fill="rgb(251,19,27)" rx="2" ry="2" />
<text  x="1186.82" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageIdAndRank&gt;::construct&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="524.8" y="325" width="2.1" height="15.0" fill="rgb(225,107,39)" rx="2" ry="2" />
<text  x="527.83" y="335.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (180 samples, 31.41%)</title><rect x="63.5" y="357" width="370.7" height="15.0" fill="rgb(247,116,5)" rx="2" ry="2" />
<text  x="66.54" y="367.5" >std::condition_variable::wait(std::unique_lock&lt;std..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.87%)</title><rect x="827.6" y="357" width="10.3" height="15.0" fill="rgb(223,189,9)" rx="2" ry="2" />
<text  x="830.56" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="461.0" y="213" width="2.1" height="15.0" fill="rgb(222,40,44)" rx="2" ry="2" />
<text  x="463.99" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="831.7" y="341" width="6.2" height="15.0" fill="rgb(241,189,2)" rx="2" ry="2" />
<text  x="834.68" y="351.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.17%)</title><rect x="1181.8" y="357" width="2.0" height="15.0" fill="rgb(240,39,41)" rx="2" ry="2" />
<text  x="1184.76" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1155.0" y="325" width="2.1" height="15.0" fill="rgb(246,106,13)" rx="2" ry="2" />
<text  x="1157.99" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="535.1" y="325" width="8.3" height="15.0" fill="rgb(243,143,52)" rx="2" ry="2" />
<text  x="538.13" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="483.6" y="117" width="8.3" height="15.0" fill="rgb(236,136,13)" rx="2" ry="2" />
<text  x="486.65" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (3 samples, 0.52%)</title><rect x="759.6" y="309" width="6.2" height="15.0" fill="rgb(253,225,35)" rx="2" ry="2" />
<text  x="762.60" y="319.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (180 samples, 31.41%)</title><rect x="63.5" y="341" width="370.7" height="15.0" fill="rgb(207,209,12)" rx="2" ry="2" />
<text  x="66.54" y="351.5" >__pthread_cond_wait</text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="38.8" y="261" width="2.1" height="15.0" fill="rgb(243,198,54)" rx="2" ry="2" />
<text  x="41.83" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (2 samples, 0.35%)</title><rect x="59.4" y="293" width="4.1" height="15.0" fill="rgb(253,20,44)" rx="2" ry="2" />
<text  x="62.42" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (4 samples, 0.70%)</title><rect x="516.6" y="293" width="8.2" height="15.0" fill="rgb(243,133,3)" rx="2" ry="2" />
<text  x="519.60" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (4 samples, 0.70%)</title><rect x="454.8" y="261" width="8.3" height="15.0" fill="rgb(225,76,28)" rx="2" ry="2" />
<text  x="457.82" y="271.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.17%)</title><rect x="1117.9" y="389" width="2.1" height="15.0" fill="rgb(251,100,44)" rx="2" ry="2" />
<text  x="1120.92" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.17%)</title><rect x="846.1" y="245" width="2.1" height="15.0" fill="rgb(208,138,19)" rx="2" ry="2" />
<text  x="849.09" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.35%)</title><rect x="846.1" y="389" width="4.1" height="15.0" fill="rgb(242,55,2)" rx="2" ry="2" />
<text  x="849.09" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1181.8" y="341" width="2.0" height="15.0" fill="rgb(243,157,2)" rx="2" ry="2" />
<text  x="1184.76" y="351.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="1115.9" y="309" width="2.0" height="15.0" fill="rgb(243,187,26)" rx="2" ry="2" />
<text  x="1118.86" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageIdAndRank&gt; (1 samples, 0.17%)</title><rect x="1185.9" y="341" width="2.0" height="15.0" fill="rgb(216,73,54)" rx="2" ry="2" />
<text  x="1188.88" y="351.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (27 samples, 4.71%)</title><rect x="543.4" y="357" width="55.6" height="15.0" fill="rgb(234,129,28)" rx="2" ry="2" />
<text  x="546.37" y="367.5" >__gth..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="454.8" y="229" width="2.1" height="15.0" fill="rgb(217,98,36)" rx="2" ry="2" />
<text  x="457.82" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="1132.3" y="245" width="2.1" height="15.0" fill="rgb(242,81,47)" rx="2" ry="2" />
<text  x="1135.34" y="255.5" ></text>
</g>
<g >
<title>std::mutex::unlock (3 samples, 0.52%)</title><rect x="599.0" y="373" width="6.1" height="15.0" fill="rgb(208,98,44)" rx="2" ry="2" />
<text  x="601.97" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="825.5" y="261" width="2.1" height="15.0" fill="rgb(217,85,24)" rx="2" ry="2" />
<text  x="828.50" y="271.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.17%)</title><rect x="1132.3" y="261" width="2.1" height="15.0" fill="rgb(217,152,39)" rx="2" ry="2" />
<text  x="1135.34" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.35%)</title><rect x="819.3" y="357" width="4.1" height="15.0" fill="rgb(252,142,12)" rx="2" ry="2" />
<text  x="822.32" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (1 samples, 0.17%)</title><rect x="1181.8" y="309" width="2.0" height="15.0" fill="rgb(236,43,34)" rx="2" ry="2" />
<text  x="1184.76" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 1.05%)</title><rect x="1142.6" y="357" width="12.4" height="15.0" fill="rgb(244,103,17)" rx="2" ry="2" />
<text  x="1145.64" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="1122.0" y="373" width="4.2" height="15.0" fill="rgb(207,18,11)" rx="2" ry="2" />
<text  x="1125.04" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1117.9" y="373" width="2.1" height="15.0" fill="rgb(237,99,43)" rx="2" ry="2" />
<text  x="1120.92" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 0.70%)</title><rect x="516.6" y="341" width="8.2" height="15.0" fill="rgb(250,173,50)" rx="2" ry="2" />
<text  x="519.60" y="351.5" ></text>
</g>
<g >
<title>PageId::PageId (14 samples, 2.44%)</title><rect x="463.1" y="213" width="28.8" height="15.0" fill="rgb(252,179,34)" rx="2" ry="2" />
<text  x="466.05" y="223.5" >Pa..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="456.9" y="245" width="6.2" height="15.0" fill="rgb(244,75,38)" rx="2" ry="2" />
<text  x="459.88" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="1146.8" y="181" width="2.0" height="15.0" fill="rgb(212,37,21)" rx="2" ry="2" />
<text  x="1149.75" y="191.5" ></text>
</g>
<g >
<title>unlink_chunk (3 samples, 0.52%)</title><rect x="837.9" y="245" width="6.1" height="15.0" fill="rgb(230,53,40)" rx="2" ry="2" />
<text  x="840.85" y="255.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2 samples, 0.35%)</title><rect x="679.3" y="245" width="4.1" height="15.0" fill="rgb(221,142,42)" rx="2" ry="2" />
<text  x="682.28" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (3 samples, 0.52%)</title><rect x="1148.8" y="325" width="6.2" height="15.0" fill="rgb(216,142,6)" rx="2" ry="2" />
<text  x="1151.81" y="335.5" ></text>
</g>
<g >
<title>unlink_chunk (1 samples, 0.17%)</title><rect x="848.2" y="277" width="2.0" height="15.0" fill="rgb(250,130,4)" rx="2" ry="2" />
<text  x="851.15" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1185.9" y="277" width="2.0" height="15.0" fill="rgb(233,190,10)" rx="2" ry="2" />
<text  x="1188.88" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="529.0" y="309" width="6.1" height="15.0" fill="rgb(253,54,51)" rx="2" ry="2" />
<text  x="531.95" y="319.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;Page, (2 samples, 0.35%)</title><rect x="1109.7" y="293" width="4.1" height="15.0" fill="rgb(253,74,26)" rx="2" ry="2" />
<text  x="1112.69" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageIdAndRank*&gt; (1 samples, 0.17%)</title><rect x="1185.9" y="357" width="2.0" height="15.0" fill="rgb(244,137,15)" rx="2" ry="2" />
<text  x="1188.88" y="367.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (27 samples, 4.71%)</title><rect x="543.4" y="389" width="55.6" height="15.0" fill="rgb(223,32,38)" rx="2" ry="2" />
<text  x="546.37" y="399.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="529.0" y="357" width="6.1" height="15.0" fill="rgb(232,219,42)" rx="2" ry="2" />
<text  x="531.95" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.35%)</title><rect x="456.9" y="181" width="4.1" height="15.0" fill="rgb(244,5,42)" rx="2" ry="2" />
<text  x="459.88" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.17%)</title><rect x="1181.8" y="373" width="2.0" height="15.0" fill="rgb(225,52,6)" rx="2" ry="2" />
<text  x="1184.76" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="844.0" y="325" width="2.1" height="15.0" fill="rgb(209,150,43)" rx="2" ry="2" />
<text  x="847.03" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (9 samples, 1.57%)</title><rect x="40.9" y="357" width="18.5" height="15.0" fill="rgb(216,163,40)" rx="2" ry="2" />
<text  x="43.89" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 0.17%)</title><rect x="1185.9" y="229" width="2.0" height="15.0" fill="rgb(206,97,42)" rx="2" ry="2" />
<text  x="1188.88" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (2 samples, 0.35%)</title><rect x="718.4" y="293" width="4.1" height="15.0" fill="rgb(206,181,1)" rx="2" ry="2" />
<text  x="721.41" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="55.3" y="325" width="4.1" height="15.0" fill="rgb(233,34,16)" rx="2" ry="2" />
<text  x="58.31" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.52%)</title><rect x="493.9" y="325" width="6.2" height="15.0" fill="rgb(239,153,51)" rx="2" ry="2" />
<text  x="496.94" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.17%)</title><rect x="1115.9" y="389" width="2.0" height="15.0" fill="rgb(241,63,20)" rx="2" ry="2" />
<text  x="1118.86" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="16.2" y="277" width="2.0" height="15.0" fill="rgb(222,8,20)" rx="2" ry="2" />
<text  x="19.18" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="825.5" y="245" width="2.1" height="15.0" fill="rgb(252,121,12)" rx="2" ry="2" />
<text  x="828.50" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1132.3" y="325" width="2.1" height="15.0" fill="rgb(231,102,51)" rx="2" ry="2" />
<text  x="1135.34" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="825.5" y="389" width="2.1" height="15.0" fill="rgb(250,14,39)" rx="2" ry="2" />
<text  x="828.50" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1155.0" y="261" width="2.1" height="15.0" fill="rgb(250,201,14)" rx="2" ry="2" />
<text  x="1157.99" y="271.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (1 samples, 0.17%)</title><rect x="526.9" y="373" width="2.1" height="15.0" fill="rgb(212,16,13)" rx="2" ry="2" />
<text  x="529.89" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageIdAndRank&gt; (1 samples, 0.17%)</title><rect x="524.8" y="341" width="2.1" height="15.0" fill="rgb(249,71,44)" rx="2" ry="2" />
<text  x="527.83" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.87%)</title><rect x="827.6" y="373" width="10.3" height="15.0" fill="rgb(228,189,26)" rx="2" ry="2" />
<text  x="830.56" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (51 samples, 8.90%)</title><rect x="613.4" y="357" width="105.0" height="15.0" fill="rgb(210,195,20)" rx="2" ry="2" />
<text  x="616.39" y="367.5" >std::_Hashta..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1185.9" y="261" width="2.0" height="15.0" fill="rgb(236,103,51)" rx="2" ry="2" />
<text  x="1188.88" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="325" width="2.1" height="15.0" fill="rgb(209,174,40)" rx="2" ry="2" />
<text  x="1116.80" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="825.5" y="197" width="2.1" height="15.0" fill="rgb(233,224,44)" rx="2" ry="2" />
<text  x="828.50" y="207.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="1117.9" y="309" width="2.1" height="15.0" fill="rgb(237,79,27)" rx="2" ry="2" />
<text  x="1120.92" y="319.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.17%)</title><rect x="825.5" y="293" width="2.1" height="15.0" fill="rgb(247,164,32)" rx="2" ry="2" />
<text  x="828.50" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="55.3" y="341" width="4.1" height="15.0" fill="rgb(221,199,49)" rx="2" ry="2" />
<text  x="58.31" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (14 samples, 2.44%)</title><rect x="463.1" y="261" width="28.8" height="15.0" fill="rgb(207,112,43)" rx="2" ry="2" />
<text  x="466.05" y="271.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="38.8" y="293" width="2.1" height="15.0" fill="rgb(225,220,36)" rx="2" ry="2" />
<text  x="41.83" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1146.8" y="229" width="2.0" height="15.0" fill="rgb(236,155,39)" rx="2" ry="2" />
<text  x="1149.75" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.17%)</title><rect x="846.1" y="357" width="2.1" height="15.0" fill="rgb(208,61,36)" rx="2" ry="2" />
<text  x="849.09" y="367.5" ></text>
</g>
<g >
<title>PageId::PageId (4 samples, 0.70%)</title><rect x="1126.2" y="389" width="8.2" height="15.0" fill="rgb(224,193,27)" rx="2" ry="2" />
<text  x="1129.16" y="399.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.17%)</title><rect x="1187.9" y="309" width="2.1" height="15.0" fill="rgb(224,126,2)" rx="2" ry="2" />
<text  x="1190.94" y="319.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.35%)</title><rect x="12.1" y="277" width="4.1" height="15.0" fill="rgb(207,24,11)" rx="2" ry="2" />
<text  x="15.06" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.35%)</title><rect x="537.2" y="293" width="4.1" height="15.0" fill="rgb(209,121,5)" rx="2" ry="2" />
<text  x="540.19" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.17%)</title><rect x="22.4" y="293" width="2.0" height="15.0" fill="rgb(237,14,52)" rx="2" ry="2" />
<text  x="25.36" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.17%)</title><rect x="1187.9" y="325" width="2.1" height="15.0" fill="rgb(237,7,16)" rx="2" ry="2" />
<text  x="1190.94" y="335.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.17%)</title><rect x="823.4" y="277" width="2.1" height="15.0" fill="rgb(240,206,37)" rx="2" ry="2" />
<text  x="826.44" y="287.5" ></text>
</g>
<g >
<title>malloc_consolidate (3 samples, 0.52%)</title><rect x="1148.8" y="277" width="6.2" height="15.0" fill="rgb(225,153,38)" rx="2" ry="2" />
<text  x="1151.81" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (2 samples, 0.35%)</title><rect x="1109.7" y="277" width="4.1" height="15.0" fill="rgb(222,132,53)" rx="2" ry="2" />
<text  x="1112.69" y="287.5" ></text>
</g>
<g >
<title>grow_heap (2 samples, 0.35%)</title><rect x="456.9" y="149" width="4.1" height="15.0" fill="rgb(251,23,7)" rx="2" ry="2" />
<text  x="459.88" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (21 samples, 3.66%)</title><rect x="722.5" y="341" width="43.3" height="15.0" fill="rgb(210,200,40)" rx="2" ry="2" />
<text  x="725.53" y="351.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Insert&lt;PageId, (6 samples, 1.05%)</title><rect x="28.5" y="357" width="12.4" height="15.0" fill="rgb(243,26,2)" rx="2" ry="2" />
<text  x="31.53" y="367.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (6 samples, 1.05%)</title><rect x="28.5" y="373" width="12.4" height="15.0" fill="rgb(238,223,14)" rx="2" ry="2" />
<text  x="31.53" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 0.35%)</title><rect x="1109.7" y="213" width="4.1" height="15.0" fill="rgb(216,51,21)" rx="2" ry="2" />
<text  x="1112.69" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (17 samples, 2.97%)</title><rect x="683.4" y="325" width="35.0" height="15.0" fill="rgb(217,227,27)" rx="2" ry="2" />
<text  x="686.40" y="335.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (14 samples, 2.44%)</title><rect x="463.1" y="245" width="28.8" height="15.0" fill="rgb(248,205,22)" rx="2" ry="2" />
<text  x="466.05" y="255.5" >__..</text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1155.0" y="293" width="2.1" height="15.0" fill="rgb(218,142,43)" rx="2" ry="2" />
<text  x="1157.99" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1155.0" y="229" width="2.1" height="15.0" fill="rgb(206,39,32)" rx="2" ry="2" />
<text  x="1157.99" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (26 samples, 4.54%)</title><rect x="765.8" y="325" width="53.5" height="15.0" fill="rgb(249,104,20)" rx="2" ry="2" />
<text  x="768.78" y="335.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="16.2" y="261" width="2.0" height="15.0" fill="rgb(250,99,52)" rx="2" ry="2" />
<text  x="19.18" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (3 samples, 0.52%)</title><rect x="753.4" y="293" width="6.2" height="15.0" fill="rgb(235,121,24)" rx="2" ry="2" />
<text  x="756.42" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1185.9" y="293" width="2.0" height="15.0" fill="rgb(233,194,1)" rx="2" ry="2" />
<text  x="1188.88" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="293" width="2.1" height="15.0" fill="rgb(218,27,53)" rx="2" ry="2" />
<text  x="1116.80" y="303.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (1 samples, 0.17%)</title><rect x="526.9" y="357" width="2.1" height="15.0" fill="rgb(246,108,23)" rx="2" ry="2" />
<text  x="529.89" y="367.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.35%)</title><rect x="434.2" y="357" width="4.1" height="15.0" fill="rgb(216,104,41)" rx="2" ry="2" />
<text  x="437.22" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.35%)</title><rect x="827.6" y="325" width="4.1" height="15.0" fill="rgb(249,27,32)" rx="2" ry="2" />
<text  x="830.56" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (27 samples, 4.71%)</title><rect x="627.8" y="325" width="55.6" height="15.0" fill="rgb(253,81,6)" rx="2" ry="2" />
<text  x="630.80" y="335.5" >std::..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 0.87%)</title><rect x="827.6" y="389" width="10.3" height="15.0" fill="rgb(224,123,23)" rx="2" ry="2" />
<text  x="830.56" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (12 samples, 2.09%)</title><rect x="1159.1" y="389" width="24.7" height="15.0" fill="rgb(222,127,8)" rx="2" ry="2" />
<text  x="1162.11" y="399.5" >s..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.35%)</title><rect x="1144.7" y="325" width="4.1" height="15.0" fill="rgb(213,183,32)" rx="2" ry="2" />
<text  x="1147.69" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (1 samples, 0.17%)</title><rect x="1142.6" y="293" width="2.1" height="15.0" fill="rgb(237,49,35)" rx="2" ry="2" />
<text  x="1145.64" y="303.5" ></text>
</g>
<g >
<title>PageId::operator== (26 samples, 4.54%)</title><rect x="629.9" y="277" width="53.5" height="15.0" fill="rgb(230,176,53)" rx="2" ry="2" />
<text  x="632.86" y="287.5" >PageI..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.17%)</title><rect x="24.4" y="325" width="2.1" height="15.0" fill="rgb(251,98,41)" rx="2" ry="2" />
<text  x="27.42" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (3 samples, 0.52%)</title><rect x="759.6" y="325" width="6.2" height="15.0" fill="rgb(215,86,41)" rx="2" ry="2" />
<text  x="762.60" y="335.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.17%)</title><rect x="1113.8" y="373" width="2.1" height="15.0" fill="rgb(253,189,36)" rx="2" ry="2" />
<text  x="1116.80" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.35%)</title><rect x="456.9" y="197" width="4.1" height="15.0" fill="rgb(218,148,0)" rx="2" ry="2" />
<text  x="459.88" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (4 samples, 0.70%)</title><rect x="837.9" y="357" width="8.2" height="15.0" fill="rgb(228,106,10)" rx="2" ry="2" />
<text  x="840.85" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;Page, (1 samples, 0.17%)</title><rect x="823.4" y="357" width="2.1" height="15.0" fill="rgb(237,157,32)" rx="2" ry="2" />
<text  x="826.44" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.17%)</title><rect x="26.5" y="261" width="2.0" height="15.0" fill="rgb(210,80,0)" rx="2" ry="2" />
<text  x="29.47" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.35%)</title><rect x="12.1" y="245" width="4.1" height="15.0" fill="rgb(212,100,41)" rx="2" ry="2" />
<text  x="15.06" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.17%)</title><rect x="848.2" y="373" width="2.0" height="15.0" fill="rgb(216,27,54)" rx="2" ry="2" />
<text  x="851.15" y="383.5" ></text>
</g>
<g >
<title>malloc_consolidate (2 samples, 0.35%)</title><rect x="827.6" y="261" width="4.1" height="15.0" fill="rgb(207,215,47)" rx="2" ry="2" />
<text  x="830.56" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (2 samples, 0.35%)</title><rect x="1169.4" y="341" width="4.1" height="15.0" fill="rgb(229,104,22)" rx="2" ry="2" />
<text  x="1172.41" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.17%)</title><rect x="1157.1" y="373" width="2.0" height="15.0" fill="rgb(224,151,13)" rx="2" ry="2" />
<text  x="1160.05" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (1 samples, 0.17%)</title><rect x="454.8" y="213" width="2.1" height="15.0" fill="rgb(205,99,6)" rx="2" ry="2" />
<text  x="457.82" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1155.0" y="245" width="2.1" height="15.0" fill="rgb(217,116,27)" rx="2" ry="2" />
<text  x="1157.99" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="38.8" y="325" width="2.1" height="15.0" fill="rgb(249,84,11)" rx="2" ry="2" />
<text  x="41.83" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="456.9" y="229" width="6.2" height="15.0" fill="rgb(206,169,6)" rx="2" ry="2" />
<text  x="459.88" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.17%)</title><rect x="32.7" y="261" width="2.0" height="15.0" fill="rgb(252,88,36)" rx="2" ry="2" />
<text  x="35.65" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.17%)</title><rect x="32.7" y="277" width="2.0" height="15.0" fill="rgb(212,28,5)" rx="2" ry="2" />
<text  x="35.65" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="819.3" y="325" width="4.1" height="15.0" fill="rgb(222,25,7)" rx="2" ry="2" />
<text  x="822.32" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (26 samples, 4.54%)</title><rect x="438.3" y="357" width="53.6" height="15.0" fill="rgb(207,66,20)" rx="2" ry="2" />
<text  x="441.34" y="367.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (8 samples, 1.40%)</title><rect x="500.1" y="325" width="16.5" height="15.0" fill="rgb(246,179,40)" rx="2" ry="2" />
<text  x="503.12" y="335.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.52%)</title><rect x="837.9" y="277" width="6.1" height="15.0" fill="rgb(232,84,26)" rx="2" ry="2" />
<text  x="840.85" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.17%)</title><rect x="20.3" y="293" width="2.1" height="15.0" fill="rgb(247,97,33)" rx="2" ry="2" />
<text  x="23.30" y="303.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.17%)</title><rect x="1115.9" y="405" width="2.0" height="15.0" fill="rgb(219,45,12)" rx="2" ry="2" />
<text  x="1118.86" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.17%)</title><rect x="1183.8" y="373" width="2.1" height="15.0" fill="rgb(223,172,38)" rx="2" ry="2" />
<text  x="1186.82" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 0.35%)</title><rect x="827.6" y="341" width="4.1" height="15.0" fill="rgb(218,183,20)" rx="2" ry="2" />
<text  x="830.56" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="541.3" y="293" width="2.1" height="15.0" fill="rgb(212,73,8)" rx="2" ry="2" />
<text  x="544.31" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (14 samples, 2.44%)</title><rect x="463.1" y="197" width="28.8" height="15.0" fill="rgb(238,146,54)" rx="2" ry="2" />
<text  x="466.05" y="207.5" >st..</text>
</g>
<g >
<title>mprotect (1 samples, 0.17%)</title><rect x="26.5" y="213" width="2.0" height="15.0" fill="rgb(213,50,8)" rx="2" ry="2" />
<text  x="29.47" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1124.1" y="293" width="2.1" height="15.0" fill="rgb(232,113,19)" rx="2" ry="2" />
<text  x="1127.10" y="303.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (3 samples, 0.52%)</title><rect x="599.0" y="357" width="6.1" height="15.0" fill="rgb(229,144,19)" rx="2" ry="2" />
<text  x="601.97" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="38.8" y="277" width="2.1" height="15.0" fill="rgb(224,39,40)" rx="2" ry="2" />
<text  x="41.83" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (5 samples, 0.87%)</title><rect x="18.2" y="373" width="10.3" height="15.0" fill="rgb(211,175,0)" rx="2" ry="2" />
<text  x="21.24" y="383.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.17%)</title><rect x="848.2" y="293" width="2.0" height="15.0" fill="rgb(246,65,54)" rx="2" ry="2" />
<text  x="851.15" y="303.5" ></text>
</g>
<g >
<title>sysmalloc (3 samples, 0.52%)</title><rect x="529.0" y="245" width="6.1" height="15.0" fill="rgb(208,217,6)" rx="2" ry="2" />
<text  x="531.95" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 1.05%)</title><rect x="28.5" y="341" width="12.4" height="15.0" fill="rgb(216,89,50)" rx="2" ry="2" />
<text  x="31.53" y="351.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.17%)</title><rect x="763.7" y="293" width="2.1" height="15.0" fill="rgb(240,136,7)" rx="2" ry="2" />
<text  x="766.72" y="303.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.17%)</title><rect x="823.4" y="245" width="2.1" height="15.0" fill="rgb(253,101,10)" rx="2" ry="2" />
<text  x="826.44" y="255.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="823.4" y="309" width="2.1" height="15.0" fill="rgb(228,193,27)" rx="2" ry="2" />
<text  x="826.44" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.17%)</title><rect x="848.2" y="357" width="2.0" height="15.0" fill="rgb(205,214,8)" rx="2" ry="2" />
<text  x="851.15" y="367.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (1 samples, 0.17%)</title><rect x="825.5" y="357" width="2.1" height="15.0" fill="rgb(213,147,25)" rx="2" ry="2" />
<text  x="828.50" y="367.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (180 samples, 31.41%)</title><rect x="63.5" y="325" width="370.7" height="15.0" fill="rgb(224,195,39)" rx="2" ry="2" />
<text  x="66.54" y="335.5" >__pthread_cond_wait_common</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.17%)</title><rect x="461.0" y="85" width="2.1" height="15.0" fill="rgb(210,80,43)" rx="2" ry="2" />
<text  x="463.99" y="95.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.17%)</title><rect x="22.4" y="261" width="2.0" height="15.0" fill="rgb(236,35,15)" rx="2" ry="2" />
<text  x="25.36" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.17%)</title><rect x="846.1" y="325" width="2.1" height="15.0" fill="rgb(219,63,27)" rx="2" ry="2" />
<text  x="849.09" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="26.5" y="325" width="2.0" height="15.0" fill="rgb(223,28,31)" rx="2" ry="2" />
<text  x="29.47" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="541.3" y="309" width="2.1" height="15.0" fill="rgb(218,223,8)" rx="2" ry="2" />
<text  x="544.31" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="434.2" y="325" width="4.1" height="15.0" fill="rgb(236,104,54)" rx="2" ry="2" />
<text  x="437.22" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (1 samples, 0.17%)</title><rect x="821.4" y="293" width="2.0" height="15.0" fill="rgb(240,172,48)" rx="2" ry="2" />
<text  x="824.38" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (106 samples, 18.50%)</title><rect x="605.1" y="389" width="218.3" height="15.0" fill="rgb(233,127,47)" rx="2" ry="2" />
<text  x="608.15" y="399.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="1117.9" y="293" width="2.1" height="15.0" fill="rgb(220,134,38)" rx="2" ry="2" />
<text  x="1120.92" y="303.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;Page*, (2 samples, 0.35%)</title><rect x="1109.7" y="309" width="4.1" height="15.0" fill="rgb(233,53,18)" rx="2" ry="2" />
<text  x="1112.69" y="319.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="479.5" y="133" width="2.1" height="15.0" fill="rgb(240,123,13)" rx="2" ry="2" />
<text  x="482.53" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (3 samples, 0.52%)</title><rect x="837.9" y="309" width="6.1" height="15.0" fill="rgb(250,194,8)" rx="2" ry="2" />
<text  x="840.85" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.35%)</title><rect x="1109.7" y="229" width="4.1" height="15.0" fill="rgb(214,173,27)" rx="2" ry="2" />
<text  x="1112.69" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 0.52%)</title><rect x="753.4" y="309" width="6.2" height="15.0" fill="rgb(221,144,13)" rx="2" ry="2" />
<text  x="756.42" y="319.5" ></text>
</g>
<g >
<title>std::mutex::lock (27 samples, 4.71%)</title><rect x="543.4" y="373" width="55.6" height="15.0" fill="rgb(236,84,16)" rx="2" ry="2" />
<text  x="546.37" y="383.5" >std::..</text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="461.0" y="117" width="2.1" height="15.0" fill="rgb(254,185,40)" rx="2" ry="2" />
<text  x="463.99" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="26.5" y="341" width="2.0" height="15.0" fill="rgb(231,73,46)" rx="2" ry="2" />
<text  x="29.47" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (11 samples, 1.92%)</title><rect x="493.9" y="341" width="22.7" height="15.0" fill="rgb(238,198,47)" rx="2" ry="2" />
<text  x="496.94" y="351.5" >s..</text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.35%)</title><rect x="1109.7" y="389" width="4.1" height="15.0" fill="rgb(252,3,5)" rx="2" ry="2" />
<text  x="1112.69" y="399.5" ></text>
</g>
<g >
<title>Page::Page (2 samples, 0.35%)</title><rect x="1109.7" y="245" width="4.1" height="15.0" fill="rgb(237,28,35)" rx="2" ry="2" />
<text  x="1112.69" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="535.1" y="373" width="8.3" height="15.0" fill="rgb(254,186,5)" rx="2" ry="2" />
<text  x="538.13" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1124.1" y="309" width="2.1" height="15.0" fill="rgb(233,133,8)" rx="2" ry="2" />
<text  x="1127.10" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 0.35%)</title><rect x="18.2" y="309" width="4.2" height="15.0" fill="rgb(212,107,25)" rx="2" ry="2" />
<text  x="21.24" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="844.0" y="341" width="2.1" height="15.0" fill="rgb(208,200,54)" rx="2" ry="2" />
<text  x="847.03" y="351.5" ></text>
</g>
<g >
<title>mprotect (3 samples, 0.52%)</title><rect x="529.0" y="213" width="6.1" height="15.0" fill="rgb(233,19,20)" rx="2" ry="2" />
<text  x="531.95" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="12.1" y="309" width="6.1" height="15.0" fill="rgb(241,46,19)" rx="2" ry="2" />
<text  x="15.06" y="319.5" ></text>
</g>
<g >
<title>PageId::PageId (3 samples, 0.52%)</title><rect x="12.1" y="357" width="6.1" height="15.0" fill="rgb(251,168,17)" rx="2" ry="2" />
<text  x="15.06" y="367.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.17%)</title><rect x="539.2" y="277" width="2.1" height="15.0" fill="rgb(247,144,14)" rx="2" ry="2" />
<text  x="542.25" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.17%)</title><rect x="823.4" y="389" width="2.1" height="15.0" fill="rgb(213,46,25)" rx="2" ry="2" />
<text  x="826.44" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="483.6" y="101" width="8.3" height="15.0" fill="rgb(253,172,0)" rx="2" ry="2" />
<text  x="486.65" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="535.1" y="341" width="8.3" height="15.0" fill="rgb(218,107,19)" rx="2" ry="2" />
<text  x="538.13" y="351.5" ></text>
</g>
<g >
<title>PageId::PageId (3 samples, 0.52%)</title><rect x="1120.0" y="405" width="6.2" height="15.0" fill="rgb(210,1,9)" rx="2" ry="2" />
<text  x="1122.98" y="415.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 0.35%)</title><rect x="819.3" y="341" width="4.1" height="15.0" fill="rgb(227,94,53)" rx="2" ry="2" />
<text  x="822.32" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (2 samples, 0.35%)</title><rect x="1109.7" y="261" width="4.1" height="15.0" fill="rgb(245,121,21)" rx="2" ry="2" />
<text  x="1112.69" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (2 samples, 0.35%)</title><rect x="434.2" y="373" width="4.1" height="15.0" fill="rgb(229,6,39)" rx="2" ry="2" />
<text  x="437.22" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.17%)</title><rect x="1157.1" y="325" width="2.0" height="15.0" fill="rgb(246,49,19)" rx="2" ry="2" />
<text  x="1160.05" y="335.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (1 samples, 0.17%)</title><rect x="524.8" y="309" width="2.1" height="15.0" fill="rgb(205,59,15)" rx="2" ry="2" />
<text  x="527.83" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="823.4" y="293" width="2.1" height="15.0" fill="rgb(207,183,40)" rx="2" ry="2" />
<text  x="826.44" y="303.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (27 samples, 4.71%)</title><rect x="543.4" y="341" width="55.6" height="15.0" fill="rgb(248,78,18)" rx="2" ry="2" />
<text  x="546.37" y="351.5" >__GI_..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (11 samples, 1.92%)</title><rect x="1159.1" y="373" width="22.7" height="15.0" fill="rgb(234,192,48)" rx="2" ry="2" />
<text  x="1162.11" y="383.5" >s..</text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.35%)</title><rect x="1109.7" y="341" width="4.1" height="15.0" fill="rgb(211,216,40)" rx="2" ry="2" />
<text  x="1112.69" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 1.22%)</title><rect x="1159.1" y="357" width="14.4" height="15.0" fill="rgb(217,177,6)" rx="2" ry="2" />
<text  x="1162.11" y="367.5" ></text>
</g>
<g >
<title>__lll_lock_wait (27 samples, 4.71%)</title><rect x="543.4" y="325" width="55.6" height="15.0" fill="rgb(241,90,1)" rx="2" ry="2" />
<text  x="546.37" y="335.5" >__lll..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (8 samples, 1.40%)</title><rect x="500.1" y="309" width="16.5" height="15.0" fill="rgb(208,70,0)" rx="2" ry="2" />
<text  x="503.12" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="844.0" y="293" width="2.1" height="15.0" fill="rgb(212,83,11)" rx="2" ry="2" />
<text  x="847.03" y="303.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (236 samples, 41.19%)</title><rect x="40.9" y="389" width="486.0" height="15.0" fill="rgb(239,195,4)" rx="2" ry="2" />
<text  x="43.89" y="399.5" >MultiThreadedPageRankComputer::WorkerData::wait</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="541.3" y="245" width="2.1" height="15.0" fill="rgb(229,182,48)" rx="2" ry="2" />
<text  x="544.31" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.35%)</title><rect x="718.4" y="357" width="4.1" height="15.0" fill="rgb(241,198,0)" rx="2" ry="2" />
<text  x="721.41" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.52%)</title><rect x="28.5" y="293" width="6.2" height="15.0" fill="rgb(223,64,53)" rx="2" ry="2" />
<text  x="31.53" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.17%)</title><rect x="1185.9" y="213" width="2.0" height="15.0" fill="rgb(235,35,11)" rx="2" ry="2" />
<text  x="1188.88" y="223.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="526.9" y="293" width="2.1" height="15.0" fill="rgb(216,55,3)" rx="2" ry="2" />
<text  x="529.89" y="303.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.17%)</title><rect x="26.5" y="229" width="2.0" height="15.0" fill="rgb(221,129,13)" rx="2" ry="2" />
<text  x="29.47" y="239.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.17%)</title><rect x="16.2" y="229" width="2.0" height="15.0" fill="rgb(236,198,33)" rx="2" ry="2" />
<text  x="19.18" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1115.9" y="373" width="2.0" height="15.0" fill="rgb(209,88,45)" rx="2" ry="2" />
<text  x="1118.86" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (2 samples, 0.35%)</title><rect x="827.6" y="309" width="4.1" height="15.0" fill="rgb(225,2,42)" rx="2" ry="2" />
<text  x="830.56" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1142.6" y="309" width="2.1" height="15.0" fill="rgb(229,192,37)" rx="2" ry="2" />
<text  x="1145.64" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2 samples, 0.35%)</title><rect x="718.4" y="309" width="4.1" height="15.0" fill="rgb(239,116,7)" rx="2" ry="2" />
<text  x="721.41" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (4 samples, 0.70%)</title><rect x="18.2" y="341" width="8.3" height="15.0" fill="rgb(252,168,28)" rx="2" ry="2" />
<text  x="21.24" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1132.3" y="293" width="2.1" height="15.0" fill="rgb(232,94,20)" rx="2" ry="2" />
<text  x="1135.34" y="303.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 0.35%)</title><rect x="718.4" y="341" width="4.1" height="15.0" fill="rgb(219,16,51)" rx="2" ry="2" />
<text  x="721.41" y="351.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (1 samples, 0.17%)</title><rect x="1183.8" y="405" width="2.1" height="15.0" fill="rgb(247,171,42)" rx="2" ry="2" />
<text  x="1186.82" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="38.8" y="309" width="2.1" height="15.0" fill="rgb(225,217,16)" rx="2" ry="2" />
<text  x="41.83" y="319.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.17%)</title><rect x="823.4" y="229" width="2.1" height="15.0" fill="rgb(228,192,15)" rx="2" ry="2" />
<text  x="826.44" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 0.35%)</title><rect x="623.7" y="325" width="4.1" height="15.0" fill="rgb(221,31,7)" rx="2" ry="2" />
<text  x="626.68" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (3 samples, 0.52%)</title><rect x="529.0" y="373" width="6.1" height="15.0" fill="rgb(232,168,50)" rx="2" ry="2" />
<text  x="531.95" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (3 samples, 0.52%)</title><rect x="837.9" y="293" width="6.1" height="15.0" fill="rgb(226,192,50)" rx="2" ry="2" />
<text  x="840.85" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (2 samples, 0.35%)</title><rect x="1169.4" y="325" width="4.1" height="15.0" fill="rgb(254,126,26)" rx="2" ry="2" />
<text  x="1172.41" y="335.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="825.5" y="213" width="2.1" height="15.0" fill="rgb(208,169,12)" rx="2" ry="2" />
<text  x="828.50" y="223.5" ></text>
</g>
<g >
<title>sysmalloc (2 samples, 0.35%)</title><rect x="456.9" y="165" width="4.1" height="15.0" fill="rgb(244,188,38)" rx="2" ry="2" />
<text  x="459.88" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="846.1" y="261" width="2.1" height="15.0" fill="rgb(220,33,13)" rx="2" ry="2" />
<text  x="849.09" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.35%)</title><rect x="623.7" y="309" width="4.1" height="15.0" fill="rgb(232,60,20)" rx="2" ry="2" />
<text  x="626.68" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.17%)</title><rect x="24.4" y="309" width="2.1" height="15.0" fill="rgb(211,189,7)" rx="2" ry="2" />
<text  x="27.42" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 0.70%)</title><rect x="1173.5" y="357" width="8.3" height="15.0" fill="rgb(232,196,8)" rx="2" ry="2" />
<text  x="1176.53" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (18 samples, 3.14%)</title><rect x="454.8" y="293" width="37.1" height="15.0" fill="rgb(227,188,14)" rx="2" ry="2" />
<text  x="457.82" y="303.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 0.87%)</title><rect x="481.6" y="133" width="10.3" height="15.0" fill="rgb(227,92,53)" rx="2" ry="2" />
<text  x="484.59" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1146.8" y="261" width="2.0" height="15.0" fill="rgb(238,226,53)" rx="2" ry="2" />
<text  x="1149.75" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (26 samples, 4.54%)</title><rect x="629.9" y="261" width="53.5" height="15.0" fill="rgb(253,120,0)" rx="2" ry="2" />
<text  x="632.86" y="271.5" >std::..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.17%)</title><rect x="846.1" y="309" width="2.1" height="15.0" fill="rgb(254,167,24)" rx="2" ry="2" />
<text  x="849.09" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="277" width="2.1" height="15.0" fill="rgb(214,162,1)" rx="2" ry="2" />
<text  x="1116.80" y="287.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.17%)</title><rect x="1146.8" y="165" width="2.0" height="15.0" fill="rgb(237,129,2)" rx="2" ry="2" />
<text  x="1149.75" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.17%)</title><rect x="763.7" y="261" width="2.1" height="15.0" fill="rgb(252,178,5)" rx="2" ry="2" />
<text  x="766.72" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1117.9" y="357" width="2.1" height="15.0" fill="rgb(243,19,32)" rx="2" ry="2" />
<text  x="1120.92" y="367.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="1146.8" y="197" width="2.0" height="15.0" fill="rgb(209,119,47)" rx="2" ry="2" />
<text  x="1149.75" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageIdAndRank*&gt; (1 samples, 0.17%)</title><rect x="1185.9" y="373" width="2.0" height="15.0" fill="rgb(247,14,2)" rx="2" ry="2" />
<text  x="1188.88" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.52%)</title><rect x="18.2" y="325" width="6.2" height="15.0" fill="rgb(213,7,15)" rx="2" ry="2" />
<text  x="21.24" y="335.5" ></text>
</g>
<g >
<title>sysmalloc (2 samples, 0.35%)</title><rect x="12.1" y="229" width="4.1" height="15.0" fill="rgb(235,34,35)" rx="2" ry="2" />
<text  x="15.06" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.17%)</title><rect x="848.2" y="341" width="2.0" height="15.0" fill="rgb(242,166,45)" rx="2" ry="2" />
<text  x="851.15" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.17%)</title><rect x="763.7" y="245" width="2.1" height="15.0" fill="rgb(206,1,13)" rx="2" ry="2" />
<text  x="766.72" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="529.0" y="341" width="6.1" height="15.0" fill="rgb(251,227,52)" rx="2" ry="2" />
<text  x="531.95" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.17%)</title><rect x="823.4" y="373" width="2.1" height="15.0" fill="rgb(219,73,32)" rx="2" ry="2" />
<text  x="826.44" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 0.17%)</title><rect x="846.1" y="229" width="2.1" height="15.0" fill="rgb(245,18,54)" rx="2" ry="2" />
<text  x="849.09" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1146.8" y="213" width="2.0" height="15.0" fill="rgb(221,177,38)" rx="2" ry="2" />
<text  x="1149.75" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="1115.9" y="293" width="2.0" height="15.0" fill="rgb(206,113,9)" rx="2" ry="2" />
<text  x="1118.86" y="303.5" ></text>
</g>
<g >
<title>main (177 samples, 30.89%)</title><rect x="825.5" y="453" width="364.5" height="15.0" fill="rgb(222,202,25)" rx="2" ry="2" />
<text  x="828.50" y="463.5" >main</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="309" width="2.1" height="15.0" fill="rgb(233,123,54)" rx="2" ry="2" />
<text  x="1116.80" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.17%)</title><rect x="846.1" y="341" width="2.1" height="15.0" fill="rgb(248,157,47)" rx="2" ry="2" />
<text  x="849.09" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.17%)</title><rect x="1171.5" y="261" width="2.0" height="15.0" fill="rgb(250,229,17)" rx="2" ry="2" />
<text  x="1174.47" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1115.9" y="357" width="2.0" height="15.0" fill="rgb(253,194,2)" rx="2" ry="2" />
<text  x="1118.86" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.17%)</title><rect x="1185.9" y="245" width="2.0" height="15.0" fill="rgb(208,34,4)" rx="2" ry="2" />
<text  x="1188.88" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.17%)</title><rect x="1181.8" y="325" width="2.0" height="15.0" fill="rgb(240,120,43)" rx="2" ry="2" />
<text  x="1184.76" y="335.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (138 samples, 24.08%)</title><rect x="825.5" y="421" width="284.2" height="15.0" fill="rgb(213,136,4)" rx="2" ry="2" />
<text  x="828.50" y="431.5" >MultiThreadedPageRankComputer::compute..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (1 samples, 0.17%)</title><rect x="825.5" y="373" width="2.1" height="15.0" fill="rgb(250,181,32)" rx="2" ry="2" />
<text  x="828.50" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (2 samples, 0.35%)</title><rect x="34.7" y="277" width="4.1" height="15.0" fill="rgb(215,61,19)" rx="2" ry="2" />
<text  x="37.71" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (3 samples, 0.52%)</title><rect x="1148.8" y="309" width="6.2" height="15.0" fill="rgb(251,195,32)" rx="2" ry="2" />
<text  x="1151.81" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.17%)</title><rect x="1183.8" y="357" width="2.1" height="15.0" fill="rgb(231,120,1)" rx="2" ry="2" />
<text  x="1186.82" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1132.3" y="277" width="2.1" height="15.0" fill="rgb(230,74,15)" rx="2" ry="2" />
<text  x="1135.34" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageIdAndRank&gt;::deallocate (1 samples, 0.17%)</title><rect x="1187.9" y="341" width="2.1" height="15.0" fill="rgb(238,219,32)" rx="2" ry="2" />
<text  x="1190.94" y="351.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (126 samples, 21.99%)</title><rect x="850.2" y="389" width="259.5" height="15.0" fill="rgb(225,221,36)" rx="2" ry="2" />
<text  x="853.21" y="399.5" >__pthread_clockjoin_ex</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initContainersSequential (14 samples, 2.44%)</title><rect x="12.1" y="389" width="28.8" height="15.0" fill="rgb(228,60,50)" rx="2" ry="2" />
<text  x="15.06" y="399.5" >Mu..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (26 samples, 4.54%)</title><rect x="438.3" y="325" width="53.6" height="15.0" fill="rgb(233,28,1)" rx="2" ry="2" />
<text  x="441.34" y="335.5" >std::..</text>
</g>
<g >
<title>operator (3 samples, 0.52%)</title><rect x="529.0" y="293" width="6.1" height="15.0" fill="rgb(221,108,30)" rx="2" ry="2" />
<text  x="531.95" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1117.9" y="341" width="2.1" height="15.0" fill="rgb(230,226,28)" rx="2" ry="2" />
<text  x="1120.92" y="351.5" ></text>
</g>
<g >
<title>all (573 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(211,148,49)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (6 samples, 1.05%)</title><rect x="1142.6" y="341" width="12.4" height="15.0" fill="rgb(238,121,14)" rx="2" ry="2" />
<text  x="1145.64" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="526.9" y="325" width="2.1" height="15.0" fill="rgb(210,188,5)" rx="2" ry="2" />
<text  x="529.89" y="335.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (3 samples, 0.52%)</title><rect x="599.0" y="389" width="6.1" height="15.0" fill="rgb(216,149,33)" rx="2" ry="2" />
<text  x="601.97" y="399.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.17%)</title><rect x="38.8" y="229" width="2.1" height="15.0" fill="rgb(252,116,38)" rx="2" ry="2" />
<text  x="41.83" y="239.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.17%)</title><rect x="461.0" y="37" width="2.1" height="15.0" fill="rgb(226,52,21)" rx="2" ry="2" />
<text  x="463.99" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1142.6" y="325" width="2.1" height="15.0" fill="rgb(236,100,15)" rx="2" ry="2" />
<text  x="1145.64" y="335.5" ></text>
</g>
<g >
<title>Page::getId (3 samples, 0.52%)</title><rect x="12.1" y="373" width="6.1" height="15.0" fill="rgb(242,41,0)" rx="2" ry="2" />
<text  x="15.06" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1155.0" y="309" width="2.1" height="15.0" fill="rgb(248,49,2)" rx="2" ry="2" />
<text  x="1157.99" y="319.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.17%)</title><rect x="846.1" y="213" width="2.1" height="15.0" fill="rgb(235,156,9)" rx="2" ry="2" />
<text  x="849.09" y="223.5" ></text>
</g>
<g >
<title>PageId::~PageId (2 samples, 0.35%)</title><rect x="59.4" y="373" width="4.1" height="15.0" fill="rgb(226,140,32)" rx="2" ry="2" />
<text  x="62.42" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (5 samples, 0.87%)</title><rect x="18.2" y="357" width="10.3" height="15.0" fill="rgb(212,87,29)" rx="2" ry="2" />
<text  x="21.24" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.17%)</title><rect x="20.3" y="277" width="2.1" height="15.0" fill="rgb(232,171,1)" rx="2" ry="2" />
<text  x="23.30" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="526.9" y="341" width="2.1" height="15.0" fill="rgb(237,162,35)" rx="2" ry="2" />
<text  x="529.89" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1124.1" y="357" width="2.1" height="15.0" fill="rgb(239,135,1)" rx="2" ry="2" />
<text  x="1127.10" y="367.5" ></text>
</g>
<g >
<title>Network::addPage (2 samples, 0.35%)</title><rect x="1109.7" y="405" width="4.1" height="15.0" fill="rgb(252,155,11)" rx="2" ry="2" />
<text  x="1112.69" y="415.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="825.5" y="325" width="2.1" height="15.0" fill="rgb(246,177,17)" rx="2" ry="2" />
<text  x="828.50" y="335.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (180 samples, 31.41%)</title><rect x="63.5" y="373" width="370.7" height="15.0" fill="rgb(205,156,3)" rx="2" ry="2" />
<text  x="66.54" y="383.5" >std::condition_variable::wait&lt;MultiThreadedPageRan..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="59.4" y="325" width="4.1" height="15.0" fill="rgb(231,199,16)" rx="2" ry="2" />
<text  x="62.42" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="59.4" y="357" width="4.1" height="15.0" fill="rgb(226,221,35)" rx="2" ry="2" />
<text  x="62.42" y="367.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.52%)</title><rect x="599.0" y="325" width="6.1" height="15.0" fill="rgb(241,161,54)" rx="2" ry="2" />
<text  x="601.97" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="26.5" y="309" width="2.0" height="15.0" fill="rgb(248,172,17)" rx="2" ry="2" />
<text  x="29.47" y="319.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.17%)</title><rect x="38.8" y="181" width="2.1" height="15.0" fill="rgb(251,59,46)" rx="2" ry="2" />
<text  x="41.83" y="191.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.17%)</title><rect x="26.5" y="245" width="2.0" height="15.0" fill="rgb(252,70,41)" rx="2" ry="2" />
<text  x="29.47" y="255.5" ></text>
</g>
<g >
<title>pageRankComputationWithNumNodes (177 samples, 30.89%)</title><rect x="825.5" y="437" width="364.5" height="15.0" fill="rgb(235,226,23)" rx="2" ry="2" />
<text  x="828.50" y="447.5" >pageRankComputationWithNumNodes</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="12.1" y="341" width="6.1" height="15.0" fill="rgb(234,198,15)" rx="2" ry="2" />
<text  x="15.06" y="351.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.17%)</title><rect x="823.4" y="261" width="2.1" height="15.0" fill="rgb(207,56,39)" rx="2" ry="2" />
<text  x="826.44" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.35%)</title><rect x="1109.7" y="357" width="4.1" height="15.0" fill="rgb(222,75,24)" rx="2" ry="2" />
<text  x="1112.69" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageIdAndRank&gt; (1 samples, 0.17%)</title><rect x="1187.9" y="357" width="2.1" height="15.0" fill="rgb(212,18,37)" rx="2" ry="2" />
<text  x="1190.94" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 1.05%)</title><rect x="479.5" y="165" width="12.4" height="15.0" fill="rgb(223,115,34)" rx="2" ry="2" />
<text  x="482.53" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (4 samples, 0.70%)</title><rect x="837.9" y="373" width="8.2" height="15.0" fill="rgb(231,77,47)" rx="2" ry="2" />
<text  x="840.85" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.17%)</title><rect x="22.4" y="309" width="2.0" height="15.0" fill="rgb(211,159,13)" rx="2" ry="2" />
<text  x="25.36" y="319.5" ></text>
</g>
<g >
<title>grow_heap (3 samples, 0.52%)</title><rect x="529.0" y="229" width="6.1" height="15.0" fill="rgb(238,81,18)" rx="2" ry="2" />
<text  x="531.95" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="16.2" y="213" width="2.0" height="15.0" fill="rgb(208,36,36)" rx="2" ry="2" />
<text  x="19.18" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="831.7" y="213" width="6.2" height="15.0" fill="rgb(209,97,53)" rx="2" ry="2" />
<text  x="834.68" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="529.0" y="325" width="6.1" height="15.0" fill="rgb(213,226,28)" rx="2" ry="2" />
<text  x="531.95" y="335.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.17%)</title><rect x="1171.5" y="293" width="2.0" height="15.0" fill="rgb(211,158,40)" rx="2" ry="2" />
<text  x="1174.47" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="1113.8" y="229" width="2.1" height="15.0" fill="rgb(227,145,7)" rx="2" ry="2" />
<text  x="1116.80" y="239.5" ></text>
</g>
<g >
<title>PageIdAndRank::~PageIdAndRank (1 samples, 0.17%)</title><rect x="1185.9" y="325" width="2.0" height="15.0" fill="rgb(252,62,3)" rx="2" ry="2" />
<text  x="1188.88" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="831.7" y="229" width="6.2" height="15.0" fill="rgb(235,79,47)" rx="2" ry="2" />
<text  x="834.68" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.17%)</title><rect x="22.4" y="277" width="2.0" height="15.0" fill="rgb(223,73,7)" rx="2" ry="2" />
<text  x="25.36" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.35%)</title><rect x="1185.9" y="405" width="4.1" height="15.0" fill="rgb(219,58,25)" rx="2" ry="2" />
<text  x="1188.88" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="38.8" y="245" width="2.1" height="15.0" fill="rgb(238,17,40)" rx="2" ry="2" />
<text  x="41.83" y="255.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.52%)</title><rect x="1148.8" y="293" width="6.2" height="15.0" fill="rgb(230,208,36)" rx="2" ry="2" />
<text  x="1151.81" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (57 samples, 9.95%)</title><rect x="605.1" y="373" width="117.4" height="15.0" fill="rgb(230,91,17)" rx="2" ry="2" />
<text  x="608.15" y="383.5" >std::_Hashtabl..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1146.8" y="245" width="2.0" height="15.0" fill="rgb(224,216,24)" rx="2" ry="2" />
<text  x="1149.75" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (1 samples, 0.17%)</title><rect x="825.5" y="341" width="2.1" height="15.0" fill="rgb(238,88,23)" rx="2" ry="2" />
<text  x="828.50" y="351.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="844.0" y="261" width="2.1" height="15.0" fill="rgb(205,181,10)" rx="2" ry="2" />
<text  x="847.03" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="1187.9" y="389" width="2.1" height="15.0" fill="rgb(215,64,53)" rx="2" ry="2" />
<text  x="1190.94" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.17%)</title><rect x="1124.1" y="277" width="2.1" height="15.0" fill="rgb(217,229,29)" rx="2" ry="2" />
<text  x="1127.10" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="461.0" y="165" width="2.1" height="15.0" fill="rgb(251,110,46)" rx="2" ry="2" />
<text  x="463.99" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1115.9" y="341" width="2.0" height="15.0" fill="rgb(239,198,53)" rx="2" ry="2" />
<text  x="1118.86" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (2 samples, 0.35%)</title><rect x="827.6" y="293" width="4.1" height="15.0" fill="rgb(249,103,44)" rx="2" ry="2" />
<text  x="830.56" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (3 samples, 0.52%)</title><rect x="837.9" y="325" width="6.1" height="15.0" fill="rgb(233,127,25)" rx="2" ry="2" />
<text  x="840.85" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="1126.2" y="373" width="8.2" height="15.0" fill="rgb(252,160,21)" rx="2" ry="2" />
<text  x="1129.16" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (18 samples, 3.14%)</title><rect x="454.8" y="309" width="37.1" height="15.0" fill="rgb(219,75,1)" rx="2" ry="2" />
<text  x="457.82" y="319.5" >std..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.17%)</title><rect x="823.4" y="341" width="2.1" height="15.0" fill="rgb(214,49,41)" rx="2" ry="2" />
<text  x="826.44" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="341" width="2.1" height="15.0" fill="rgb(210,142,52)" rx="2" ry="2" />
<text  x="1116.80" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1132.3" y="341" width="2.1" height="15.0" fill="rgb(241,185,15)" rx="2" ry="2" />
<text  x="1135.34" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="436.3" y="309" width="2.0" height="15.0" fill="rgb(217,78,51)" rx="2" ry="2" />
<text  x="439.28" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="16.2" y="245" width="2.0" height="15.0" fill="rgb(223,57,51)" rx="2" ry="2" />
<text  x="19.18" y="255.5" ></text>
</g>
<g >
<title>?? (396 samples, 69.11%)</title><rect x="10.0" y="421" width="815.5" height="15.0" fill="rgb(229,87,37)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >??</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.17%)</title><rect x="1185.9" y="309" width="2.0" height="15.0" fill="rgb(246,214,54)" rx="2" ry="2" />
<text  x="1188.88" y="319.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.17%)</title><rect x="763.7" y="277" width="2.1" height="15.0" fill="rgb(207,171,32)" rx="2" ry="2" />
<text  x="766.72" y="287.5" ></text>
</g>
<g >
<title>PageId::PageId (9 samples, 1.57%)</title><rect x="40.9" y="373" width="18.5" height="15.0" fill="rgb(246,129,54)" rx="2" ry="2" />
<text  x="43.89" y="383.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.17%)</title><rect x="1155.0" y="277" width="2.1" height="15.0" fill="rgb(240,47,45)" rx="2" ry="2" />
<text  x="1157.99" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.35%)</title><rect x="1144.7" y="309" width="4.1" height="15.0" fill="rgb(213,70,4)" rx="2" ry="2" />
<text  x="1147.69" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1124.1" y="341" width="2.1" height="15.0" fill="rgb(249,20,30)" rx="2" ry="2" />
<text  x="1127.10" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.17%)</title><rect x="763.7" y="229" width="2.1" height="15.0" fill="rgb(236,73,1)" rx="2" ry="2" />
<text  x="766.72" y="239.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.17%)</title><rect x="38.8" y="213" width="2.1" height="15.0" fill="rgb(240,142,9)" rx="2" ry="2" />
<text  x="41.83" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.87%)</title><rect x="28.5" y="325" width="10.3" height="15.0" fill="rgb(246,3,21)" rx="2" ry="2" />
<text  x="31.53" y="335.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.17%)</title><rect x="26.5" y="293" width="2.0" height="15.0" fill="rgb(230,154,6)" rx="2" ry="2" />
<text  x="29.47" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (32 samples, 5.58%)</title><rect x="617.5" y="341" width="65.9" height="15.0" fill="rgb(224,225,54)" rx="2" ry="2" />
<text  x="620.50" y="351.5" >std::_H..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="831.7" y="293" width="6.2" height="15.0" fill="rgb(206,166,24)" rx="2" ry="2" />
<text  x="834.68" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.17%)</title><rect x="846.1" y="373" width="2.1" height="15.0" fill="rgb(245,87,15)" rx="2" ry="2" />
<text  x="849.09" y="383.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (1 samples, 0.17%)</title><rect x="1113.8" y="405" width="2.1" height="15.0" fill="rgb(252,54,47)" rx="2" ry="2" />
<text  x="1116.80" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="526.9" y="309" width="2.1" height="15.0" fill="rgb(214,121,50)" rx="2" ry="2" />
<text  x="529.89" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="461.0" y="181" width="2.1" height="15.0" fill="rgb(233,158,21)" rx="2" ry="2" />
<text  x="463.99" y="191.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.17%)</title><rect x="1146.8" y="277" width="2.0" height="15.0" fill="rgb(245,204,49)" rx="2" ry="2" />
<text  x="1149.75" y="287.5" ></text>
</g>
<g >
<title>PageId::PageId (4 samples, 0.70%)</title><rect x="535.1" y="389" width="8.3" height="15.0" fill="rgb(220,30,43)" rx="2" ry="2" />
<text  x="538.13" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1155.0" y="213" width="2.1" height="15.0" fill="rgb(223,40,23)" rx="2" ry="2" />
<text  x="1157.99" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (4 samples, 0.70%)</title><rect x="516.6" y="277" width="8.2" height="15.0" fill="rgb(243,59,11)" rx="2" ry="2" />
<text  x="519.60" y="287.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (26 samples, 4.54%)</title><rect x="629.9" y="293" width="53.5" height="15.0" fill="rgb(248,154,22)" rx="2" ry="2" />
<text  x="632.86" y="303.5" >std::..</text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (1 samples, 0.17%)</title><rect x="1113.8" y="389" width="2.1" height="15.0" fill="rgb(230,212,21)" rx="2" ry="2" />
<text  x="1116.80" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.35%)</title><rect x="1109.7" y="373" width="4.1" height="15.0" fill="rgb(215,1,25)" rx="2" ry="2" />
<text  x="1112.69" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="825.5" y="229" width="2.1" height="15.0" fill="rgb(244,120,42)" rx="2" ry="2" />
<text  x="828.50" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1157.1" y="341" width="2.0" height="15.0" fill="rgb(211,87,37)" rx="2" ry="2" />
<text  x="1160.05" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.17%)</title><rect x="1117.9" y="277" width="2.1" height="15.0" fill="rgb(218,10,29)" rx="2" ry="2" />
<text  x="1120.92" y="287.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.17%)</title><rect x="22.4" y="213" width="2.0" height="15.0" fill="rgb(225,144,45)" rx="2" ry="2" />
<text  x="25.36" y="223.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;Page*, (2 samples, 0.35%)</title><rect x="1109.7" y="325" width="4.1" height="15.0" fill="rgb(229,79,24)" rx="2" ry="2" />
<text  x="1112.69" y="335.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (180 samples, 31.41%)</title><rect x="63.5" y="309" width="370.7" height="15.0" fill="rgb(226,129,53)" rx="2" ry="2" />
<text  x="66.54" y="319.5" >futex_wait_cancelable</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.70%)</title><rect x="535.1" y="357" width="8.3" height="15.0" fill="rgb(233,33,51)" rx="2" ry="2" />
<text  x="538.13" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="526.9" y="277" width="2.1" height="15.0" fill="rgb(221,29,19)" rx="2" ry="2" />
<text  x="529.89" y="287.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.17%)</title><rect x="22.4" y="245" width="2.0" height="15.0" fill="rgb(250,34,16)" rx="2" ry="2" />
<text  x="25.36" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="454.8" y="245" width="2.1" height="15.0" fill="rgb(222,115,31)" rx="2" ry="2" />
<text  x="457.82" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.87%)</title><rect x="28.5" y="309" width="10.3" height="15.0" fill="rgb(222,27,46)" rx="2" ry="2" />
<text  x="31.53" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (2 samples, 0.35%)</title><rect x="623.7" y="293" width="4.1" height="15.0" fill="rgb(205,99,18)" rx="2" ry="2" />
<text  x="626.68" y="303.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.17%)</title><rect x="38.8" y="197" width="2.1" height="15.0" fill="rgb(209,12,0)" rx="2" ry="2" />
<text  x="41.83" y="207.5" ></text>
</g>
<g >
<title>clone (396 samples, 69.11%)</title><rect x="10.0" y="453" width="815.5" height="15.0" fill="rgb(235,115,44)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >clone</text>
</g>
<g >
<title>grow_heap (1 samples, 0.17%)</title><rect x="461.0" y="53" width="2.1" height="15.0" fill="rgb(222,103,29)" rx="2" ry="2" />
<text  x="463.99" y="63.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="461.0" y="101" width="2.1" height="15.0" fill="rgb(206,9,50)" rx="2" ry="2" />
<text  x="463.99" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1115.9" y="325" width="2.0" height="15.0" fill="rgb(251,117,48)" rx="2" ry="2" />
<text  x="1118.86" y="335.5" ></text>
</g>
<g >
<title>Page::getId (3 samples, 0.52%)</title><rect x="529.0" y="389" width="6.1" height="15.0" fill="rgb(248,155,49)" rx="2" ry="2" />
<text  x="531.95" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="846.1" y="277" width="2.1" height="15.0" fill="rgb(216,203,34)" rx="2" ry="2" />
<text  x="849.09" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2 samples, 0.35%)</title><rect x="819.3" y="309" width="4.1" height="15.0" fill="rgb(216,150,4)" rx="2" ry="2" />
<text  x="822.32" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="461.0" y="149" width="2.1" height="15.0" fill="rgb(223,53,50)" rx="2" ry="2" />
<text  x="463.99" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 1.05%)</title><rect x="479.5" y="149" width="12.4" height="15.0" fill="rgb(213,43,16)" rx="2" ry="2" />
<text  x="482.53" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="12.1" y="293" width="6.1" height="15.0" fill="rgb(220,203,27)" rx="2" ry="2" />
<text  x="15.06" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="1187.9" y="373" width="2.1" height="15.0" fill="rgb(223,189,24)" rx="2" ry="2" />
<text  x="1190.94" y="383.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (1 samples, 0.17%)</title><rect x="825.5" y="309" width="2.1" height="15.0" fill="rgb(240,215,46)" rx="2" ry="2" />
<text  x="828.50" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (2 samples, 0.35%)</title><rect x="59.4" y="309" width="4.1" height="15.0" fill="rgb(235,66,44)" rx="2" ry="2" />
<text  x="62.42" y="319.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.17%)</title><rect x="541.3" y="261" width="2.1" height="15.0" fill="rgb(241,52,10)" rx="2" ry="2" />
<text  x="544.31" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (26 samples, 4.54%)</title><rect x="438.3" y="341" width="53.6" height="15.0" fill="rgb(246,170,0)" rx="2" ry="2" />
<text  x="441.34" y="351.5" >std::..</text>
</g>
<g >
<title>_int_malloc (3 samples, 0.52%)</title><rect x="529.0" y="261" width="6.1" height="15.0" fill="rgb(212,115,44)" rx="2" ry="2" />
<text  x="531.95" y="271.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.17%)</title><rect x="1113.8" y="245" width="2.1" height="15.0" fill="rgb(251,212,19)" rx="2" ry="2" />
<text  x="1116.80" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.17%)</title><rect x="59.4" y="277" width="2.1" height="15.0" fill="rgb(208,86,21)" rx="2" ry="2" />
<text  x="62.42" y="287.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.35%)</title><rect x="827.6" y="277" width="4.1" height="15.0" fill="rgb(222,48,37)" rx="2" ry="2" />
<text  x="830.56" y="287.5" ></text>
</g>
<g >
<title>operator (3 samples, 0.52%)</title><rect x="535.1" y="309" width="6.2" height="15.0" fill="rgb(235,6,36)" rx="2" ry="2" />
<text  x="538.13" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="357" width="2.1" height="15.0" fill="rgb(234,24,26)" rx="2" ry="2" />
<text  x="1116.80" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.17%)</title><rect x="22.4" y="197" width="2.0" height="15.0" fill="rgb(211,207,1)" rx="2" ry="2" />
<text  x="25.36" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.52%)</title><rect x="837.9" y="341" width="6.1" height="15.0" fill="rgb(254,92,24)" rx="2" ry="2" />
<text  x="840.85" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="524.8" y="357" width="2.1" height="15.0" fill="rgb(226,156,43)" rx="2" ry="2" />
<text  x="527.83" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (26 samples, 4.54%)</title><rect x="765.8" y="341" width="53.5" height="15.0" fill="rgb(225,6,54)" rx="2" ry="2" />
<text  x="768.78" y="351.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (2 samples, 0.35%)</title><rect x="34.7" y="293" width="4.1" height="15.0" fill="rgb(224,106,30)" rx="2" ry="2" />
<text  x="37.71" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="59.4" y="341" width="4.1" height="15.0" fill="rgb(209,229,53)" rx="2" ry="2" />
<text  x="62.42" y="351.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.17%)</title><rect x="461.0" y="69" width="2.1" height="15.0" fill="rgb(247,174,16)" rx="2" ry="2" />
<text  x="463.99" y="79.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.35%)</title><rect x="12.1" y="261" width="4.1" height="15.0" fill="rgb(221,88,44)" rx="2" ry="2" />
<text  x="15.06" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (18 samples, 3.14%)</title><rect x="454.8" y="277" width="37.1" height="15.0" fill="rgb(254,28,46)" rx="2" ry="2" />
<text  x="457.82" y="287.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (17 samples, 2.97%)</title><rect x="683.4" y="341" width="35.0" height="15.0" fill="rgb(239,34,8)" rx="2" ry="2" />
<text  x="686.40" y="351.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="436.3" y="293" width="2.0" height="15.0" fill="rgb(247,25,3)" rx="2" ry="2" />
<text  x="439.28" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (16 samples, 2.79%)</title><rect x="491.9" y="357" width="32.9" height="15.0" fill="rgb(219,197,52)" rx="2" ry="2" />
<text  x="494.88" y="367.5" >st..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::getResult (1 samples, 0.17%)</title><rect x="825.5" y="405" width="2.1" height="15.0" fill="rgb(222,12,53)" rx="2" ry="2" />
<text  x="828.50" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (42 samples, 7.33%)</title><rect x="438.3" y="373" width="86.5" height="15.0" fill="rgb(211,198,49)" rx="2" ry="2" />
<text  x="441.34" y="383.5" >std::unord..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="436.3" y="277" width="2.0" height="15.0" fill="rgb(231,68,11)" rx="2" ry="2" />
<text  x="439.28" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="831.7" y="277" width="6.2" height="15.0" fill="rgb(234,146,18)" rx="2" ry="2" />
<text  x="834.68" y="287.5" ></text>
</g>
<g >
<title>start_thread (396 samples, 69.11%)</title><rect x="10.0" y="437" width="815.5" height="15.0" fill="rgb(245,104,39)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >start_thread</text>
</g>
<g >
<title>operator (2 samples, 0.35%)</title><rect x="456.9" y="213" width="4.1" height="15.0" fill="rgb(223,85,49)" rx="2" ry="2" />
<text  x="459.88" y="223.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.70%)</title><rect x="483.6" y="69" width="8.3" height="15.0" fill="rgb(239,174,30)" rx="2" ry="2" />
<text  x="486.65" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (12 samples, 2.09%)</title><rect x="1134.4" y="389" width="24.7" height="15.0" fill="rgb(236,158,36)" rx="2" ry="2" />
<text  x="1137.40" y="399.5" >s..</text>
</g>
<g >
<title>std::pair&lt;PageId (2 samples, 0.35%)</title><rect x="1144.7" y="293" width="4.1" height="15.0" fill="rgb(208,125,8)" rx="2" ry="2" />
<text  x="1147.69" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.17%)</title><rect x="1124.1" y="261" width="2.1" height="15.0" fill="rgb(231,55,4)" rx="2" ry="2" />
<text  x="1127.10" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.17%)</title><rect x="1171.5" y="277" width="2.0" height="15.0" fill="rgb(242,112,41)" rx="2" ry="2" />
<text  x="1174.47" y="287.5" ></text>
</g>
<g >
<title>std::thread::join() (126 samples, 21.99%)</title><rect x="850.2" y="405" width="259.5" height="15.0" fill="rgb(246,154,37)" rx="2" ry="2" />
<text  x="853.21" y="415.5" >std::thread::join()</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="434.2" y="341" width="4.1" height="15.0" fill="rgb(226,163,10)" rx="2" ry="2" />
<text  x="437.22" y="351.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.17%)</title><rect x="1157.1" y="357" width="2.0" height="15.0" fill="rgb(244,22,51)" rx="2" ry="2" />
<text  x="1160.05" y="367.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (4 samples, 0.70%)</title><rect x="837.9" y="389" width="8.2" height="15.0" fill="rgb(253,42,20)" rx="2" ry="2" />
<text  x="840.85" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1155.0" y="357" width="2.1" height="15.0" fill="rgb(238,127,4)" rx="2" ry="2" />
<text  x="1157.99" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (14 samples, 2.44%)</title><rect x="463.1" y="229" width="28.8" height="15.0" fill="rgb(217,60,20)" rx="2" ry="2" />
<text  x="466.05" y="239.5" >st..</text>
</g>
<g >
<title>Page::getId (1 samples, 0.17%)</title><rect x="1117.9" y="405" width="2.1" height="15.0" fill="rgb(230,16,12)" rx="2" ry="2" />
<text  x="1120.92" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="479.5" y="117" width="2.1" height="15.0" fill="rgb(231,56,18)" rx="2" ry="2" />
<text  x="482.53" y="127.5" ></text>
</g>
<g >
<title>Page::generateId (1 samples, 0.17%)</title><rect x="526.9" y="389" width="2.1" height="15.0" fill="rgb(207,162,50)" rx="2" ry="2" />
<text  x="529.89" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="1120.0" y="389" width="6.2" height="15.0" fill="rgb(246,134,3)" rx="2" ry="2" />
<text  x="1122.98" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (49 samples, 8.55%)</title><rect x="722.5" y="373" width="100.9" height="15.0" fill="rgb(231,29,50)" rx="2" ry="2" />
<text  x="725.53" y="383.5" >std::__detai..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1113.8" y="261" width="2.1" height="15.0" fill="rgb(236,103,4)" rx="2" ry="2" />
<text  x="1116.80" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.17%)</title><rect x="1171.5" y="245" width="2.0" height="15.0" fill="rgb(210,228,36)" rx="2" ry="2" />
<text  x="1174.47" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (4 samples, 0.70%)</title><rect x="1173.5" y="341" width="8.3" height="15.0" fill="rgb(251,194,51)" rx="2" ry="2" />
<text  x="1176.53" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="831.7" y="197" width="6.2" height="15.0" fill="rgb(224,219,29)" rx="2" ry="2" />
<text  x="834.68" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.35%)</title><rect x="679.3" y="229" width="4.1" height="15.0" fill="rgb(215,177,52)" rx="2" ry="2" />
<text  x="682.28" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (3 samples, 0.52%)</title><rect x="529.0" y="277" width="6.1" height="15.0" fill="rgb(238,60,23)" rx="2" ry="2" />
<text  x="531.95" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 0.35%)</title><rect x="1109.7" y="181" width="4.1" height="15.0" fill="rgb(249,57,27)" rx="2" ry="2" />
<text  x="1112.69" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 0.35%)</title><rect x="718.4" y="325" width="4.1" height="15.0" fill="rgb(218,38,38)" rx="2" ry="2" />
<text  x="721.41" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (4 samples, 0.70%)</title><rect x="1126.2" y="405" width="8.2" height="15.0" fill="rgb(214,115,11)" rx="2" ry="2" />
<text  x="1129.16" y="415.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (4 samples, 0.70%)</title><rect x="483.6" y="85" width="8.3" height="15.0" fill="rgb(235,177,46)" rx="2" ry="2" />
<text  x="486.65" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (1 samples, 0.17%)</title><rect x="524.8" y="373" width="2.1" height="15.0" fill="rgb(215,182,26)" rx="2" ry="2" />
<text  x="527.83" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (1 samples, 0.17%)</title><rect x="1157.1" y="309" width="2.0" height="15.0" fill="rgb(228,12,27)" rx="2" ry="2" />
<text  x="1160.05" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.17%)</title><rect x="848.2" y="325" width="2.0" height="15.0" fill="rgb(240,95,49)" rx="2" ry="2" />
<text  x="851.15" y="335.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (11 samples, 1.92%)</title><rect x="827.6" y="405" width="22.6" height="15.0" fill="rgb(219,218,11)" rx="2" ry="2" />
<text  x="830.56" y="415.5" >M..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="12.1" y="325" width="6.1" height="15.0" fill="rgb(233,22,7)" rx="2" ry="2" />
<text  x="15.06" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageIdAndRank*, (1 samples, 0.17%)</title><rect x="1185.9" y="389" width="2.0" height="15.0" fill="rgb(240,152,21)" rx="2" ry="2" />
<text  x="1188.88" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (27 samples, 4.71%)</title><rect x="627.8" y="309" width="55.6" height="15.0" fill="rgb(222,36,33)" rx="2" ry="2" />
<text  x="630.80" y="319.5" >std::..</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.17%)</title><rect x="1171.5" y="309" width="2.0" height="15.0" fill="rgb(229,149,25)" rx="2" ry="2" />
<text  x="1174.47" y="319.5" ></text>
</g>
<g >
<title>PageId::~PageId (3 samples, 0.52%)</title><rect x="831.7" y="261" width="6.2" height="15.0" fill="rgb(248,203,44)" rx="2" ry="2" />
<text  x="834.68" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="825.5" y="277" width="2.1" height="15.0" fill="rgb(234,108,2)" rx="2" ry="2" />
<text  x="828.50" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::allocate (1 samples, 0.17%)</title><rect x="823.4" y="325" width="2.1" height="15.0" fill="rgb(206,3,37)" rx="2" ry="2" />
<text  x="826.44" y="335.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (3 samples, 0.52%)</title><rect x="599.0" y="341" width="6.1" height="15.0" fill="rgb(233,52,34)" rx="2" ry="2" />
<text  x="601.97" y="351.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.17%)</title><rect x="848.2" y="309" width="2.0" height="15.0" fill="rgb(228,47,5)" rx="2" ry="2" />
<text  x="851.15" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="844.0" y="277" width="2.1" height="15.0" fill="rgb(238,200,46)" rx="2" ry="2" />
<text  x="847.03" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (24 samples, 4.19%)</title><rect x="1134.4" y="405" width="49.4" height="15.0" fill="rgb(210,138,39)" rx="2" ry="2" />
<text  x="1137.40" y="415.5" >std:..</text>
</g>
<g >
<title>_int_free (1 samples, 0.17%)</title><rect x="61.5" y="277" width="2.0" height="15.0" fill="rgb(218,113,45)" rx="2" ry="2" />
<text  x="64.48" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1124.1" y="325" width="2.1" height="15.0" fill="rgb(213,194,53)" rx="2" ry="2" />
<text  x="1127.10" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.17%)</title><rect x="26.5" y="277" width="2.0" height="15.0" fill="rgb(231,92,29)" rx="2" ry="2" />
<text  x="29.47" y="287.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.17%)</title><rect x="461.0" y="197" width="2.1" height="15.0" fill="rgb(221,205,42)" rx="2" ry="2" />
<text  x="463.99" y="207.5" ></text>
</g>
<g >
<title>malloc_consolidate (3 samples, 0.52%)</title><rect x="837.9" y="261" width="6.1" height="15.0" fill="rgb(239,220,27)" rx="2" ry="2" />
<text  x="840.85" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (11 samples, 1.92%)</title><rect x="656.6" y="245" width="22.7" height="15.0" fill="rgb(224,2,8)" rx="2" ry="2" />
<text  x="659.63" y="255.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.17%)</title><rect x="844.0" y="309" width="2.1" height="15.0" fill="rgb(251,85,43)" rx="2" ry="2" />
<text  x="847.03" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="831.7" y="309" width="6.2" height="15.0" fill="rgb(205,83,7)" rx="2" ry="2" />
<text  x="834.68" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.17%)</title><rect x="22.4" y="229" width="2.0" height="15.0" fill="rgb(231,75,11)" rx="2" ry="2" />
<text  x="25.36" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="846.1" y="293" width="2.1" height="15.0" fill="rgb(214,212,8)" rx="2" ry="2" />
<text  x="849.09" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 1.05%)</title><rect x="479.5" y="181" width="12.4" height="15.0" fill="rgb(238,77,1)" rx="2" ry="2" />
<text  x="482.53" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.52%)</title><rect x="831.7" y="325" width="6.2" height="15.0" fill="rgb(240,57,43)" rx="2" ry="2" />
<text  x="834.68" y="335.5" ></text>
</g>
<g >
<title>NetworkWithoutManyEdgesGenerator::generateNetworkOfSize (3 samples, 0.52%)</title><rect x="1109.7" y="421" width="6.2" height="15.0" fill="rgb(247,151,18)" rx="2" ry="2" />
<text  x="1112.69" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (10 samples, 1.75%)</title><rect x="1136.5" y="373" width="20.6" height="15.0" fill="rgb(246,0,25)" rx="2" ry="2" />
<text  x="1139.46" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="541.3" y="277" width="2.1" height="15.0" fill="rgb(217,154,14)" rx="2" ry="2" />
<text  x="544.31" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.17%)</title><rect x="1155.0" y="341" width="2.1" height="15.0" fill="rgb(246,10,25)" rx="2" ry="2" />
<text  x="1157.99" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="461.0" y="133" width="2.1" height="15.0" fill="rgb(211,81,37)" rx="2" ry="2" />
<text  x="463.99" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.52%)</title><rect x="831.7" y="245" width="6.2" height="15.0" fill="rgb(216,175,46)" rx="2" ry="2" />
<text  x="834.68" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1132.3" y="309" width="2.1" height="15.0" fill="rgb(231,210,28)" rx="2" ry="2" />
<text  x="1135.34" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (2 samples, 0.35%)</title><rect x="1109.7" y="197" width="4.1" height="15.0" fill="rgb(210,72,18)" rx="2" ry="2" />
<text  x="1112.69" y="207.5" ></text>
</g>
<g >
<title>SingleThreadedPageRankComputer::computeForNetwork (36 samples, 6.28%)</title><rect x="1115.9" y="421" width="74.1" height="15.0" fill="rgb(253,54,6)" rx="2" ry="2" />
<text  x="1118.86" y="431.5" >SingleTh..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.17%)</title><rect x="1117.9" y="325" width="2.1" height="15.0" fill="rgb(246,35,43)" rx="2" ry="2" />
<text  x="1120.92" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.17%)</title><rect x="1183.8" y="341" width="2.1" height="15.0" fill="rgb(222,10,6)" rx="2" ry="2" />
<text  x="1186.82" y="351.5" ></text>
</g>
<g >
<title>unlink_chunk (2 samples, 0.35%)</title><rect x="1150.9" y="261" width="4.1" height="15.0" fill="rgb(207,93,53)" rx="2" ry="2" />
<text  x="1153.87" y="271.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (4 samples, 0.70%)</title><rect x="516.6" y="325" width="8.2" height="15.0" fill="rgb(252,70,5)" rx="2" ry="2" />
<text  x="519.60" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (47 samples, 8.20%)</title><rect x="722.5" y="357" width="96.8" height="15.0" fill="rgb(208,29,45)" rx="2" ry="2" />
<text  x="725.53" y="367.5" >std::_Hasht..</text>
</g>
</g>
</svg>
