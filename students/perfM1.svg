<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (6 samples, 8.00%)</title><rect x="246.0" y="117" width="94.4" height="15.0" fill="rgb(237,121,25)" rx="2" ry="2" />
<text  x="249.00" y="127.5" >std::__deta..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 1.33%)</title><rect x="72.9" y="181" width="15.8" height="15.0" fill="rgb(248,6,54)" rx="2" ry="2" />
<text  x="75.93" y="191.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="1079.9" y="197" width="15.7" height="15.0" fill="rgb(214,211,31)" rx="2" ry="2" />
<text  x="1082.87" y="207.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 1.33%)</title><rect x="544.9" y="85" width="15.8" height="15.0" fill="rgb(209,141,41)" rx="2" ry="2" />
<text  x="547.93" y="95.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (33 samples, 44.00%)</title><rect x="10.0" y="229" width="519.2" height="15.0" fill="rgb(218,175,40)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (2 samples, 2.67%)</title><rect x="356.1" y="133" width="31.5" height="15.0" fill="rgb(240,45,33)" rx="2" ry="2" />
<text  x="359.13" y="143.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (23 samples, 30.67%)</title><rect x="151.6" y="197" width="361.9" height="15.0" fill="rgb(229,39,53)" rx="2" ry="2" />
<text  x="154.60" y="207.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (10 samples, 13.33%)</title><rect x="183.1" y="149" width="157.3" height="15.0" fill="rgb(231,221,53)" rx="2" ry="2" />
<text  x="186.07" y="159.5" >std::_Hashtable&lt;Page..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.33%)</title><rect x="41.5" y="165" width="15.7" height="15.0" fill="rgb(209,140,53)" rx="2" ry="2" />
<text  x="44.47" y="175.5" ></text>
</g>
<g >
<title>std::thread::join() (33 samples, 44.00%)</title><rect x="560.7" y="309" width="519.2" height="15.0" fill="rgb(230,125,17)" rx="2" ry="2" />
<text  x="563.67" y="319.5" >std::thread::join()</text>
</g>
<g >
<title>Page::generateId (2 samples, 2.67%)</title><rect x="1127.1" y="293" width="31.4" height="15.0" fill="rgb(215,165,33)" rx="2" ry="2" />
<text  x="1130.07" y="303.5" >Pa..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 2.67%)</title><rect x="120.1" y="165" width="31.5" height="15.0" fill="rgb(215,103,18)" rx="2" ry="2" />
<text  x="123.13" y="175.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="1142.8" y="229" width="15.7" height="15.0" fill="rgb(238,44,53)" rx="2" ry="2" />
<text  x="1145.80" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.33%)</title><rect x="1111.3" y="245" width="15.8" height="15.0" fill="rgb(222,118,19)" rx="2" ry="2" />
<text  x="1114.33" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 2.67%)</title><rect x="1127.1" y="245" width="31.4" height="15.0" fill="rgb(226,145,17)" rx="2" ry="2" />
<text  x="1130.07" y="255.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="277.5" y="53" width="15.7" height="15.0" fill="rgb(251,89,30)" rx="2" ry="2" />
<text  x="280.47" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.33%)</title><rect x="72.9" y="133" width="15.8" height="15.0" fill="rgb(247,70,4)" rx="2" ry="2" />
<text  x="75.93" y="143.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 1.33%)</title><rect x="529.2" y="133" width="15.7" height="15.0" fill="rgb(224,45,9)" rx="2" ry="2" />
<text  x="532.20" y="143.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (4 samples, 5.33%)</title><rect x="277.5" y="69" width="62.9" height="15.0" fill="rgb(236,154,49)" rx="2" ry="2" />
<text  x="280.47" y="79.5" >std::o..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (2 samples, 2.67%)</title><rect x="529.2" y="309" width="31.5" height="15.0" fill="rgb(241,190,21)" rx="2" ry="2" />
<text  x="532.20" y="319.5" >Mu..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.33%)</title><rect x="529.2" y="85" width="15.7" height="15.0" fill="rgb(238,126,23)" rx="2" ry="2" />
<text  x="532.20" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 1.33%)</title><rect x="214.5" y="101" width="15.8" height="15.0" fill="rgb(222,208,0)" rx="2" ry="2" />
<text  x="217.53" y="111.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (33 samples, 44.00%)</title><rect x="10.0" y="293" width="519.2" height="15.0" fill="rgb(213,0,17)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::compute..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 1.33%)</title><rect x="529.2" y="149" width="15.7" height="15.0" fill="rgb(212,207,51)" rx="2" ry="2" />
<text  x="532.20" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 2.67%)</title><rect x="198.8" y="117" width="31.5" height="15.0" fill="rgb(235,98,48)" rx="2" ry="2" />
<text  x="201.80" y="127.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.67%)</title><rect x="529.2" y="213" width="31.5" height="15.0" fill="rgb(227,212,8)" rx="2" ry="2" />
<text  x="532.20" y="223.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="72.9" y="37" width="15.8" height="15.0" fill="rgb(252,149,37)" rx="2" ry="2" />
<text  x="75.93" y="47.5" ></text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize (7 samples, 9.33%)</title><rect x="1079.9" y="325" width="110.1" height="15.0" fill="rgb(252,213,11)" rx="2" ry="2" />
<text  x="1082.87" y="335.5" >SimpleNetwork..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (4 samples, 5.33%)</title><rect x="25.7" y="197" width="63.0" height="15.0" fill="rgb(253,220,53)" rx="2" ry="2" />
<text  x="28.73" y="207.5" >MultiT..</text>
</g>
<g >
<title>PageIdHash::operator() (7 samples, 9.33%)</title><rect x="387.6" y="149" width="110.1" height="15.0" fill="rgb(242,88,52)" rx="2" ry="2" />
<text  x="390.60" y="159.5" >PageIdHash::o..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="1079.9" y="213" width="15.7" height="15.0" fill="rgb(209,184,0)" rx="2" ry="2" />
<text  x="1082.87" y="223.5" ></text>
</g>
<g >
<title>Page::Page (2 samples, 2.67%)</title><rect x="1095.6" y="277" width="31.5" height="15.0" fill="rgb(206,10,24)" rx="2" ry="2" />
<text  x="1098.60" y="287.5" >Pa..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.33%)</title><rect x="544.9" y="133" width="15.8" height="15.0" fill="rgb(218,164,47)" rx="2" ry="2" />
<text  x="547.93" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.33%)</title><rect x="1111.3" y="261" width="15.8" height="15.0" fill="rgb(226,73,27)" rx="2" ry="2" />
<text  x="1114.33" y="271.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (2 samples, 2.67%)</title><rect x="1095.6" y="293" width="31.5" height="15.0" fill="rgb(206,135,22)" rx="2" ry="2" />
<text  x="1098.60" y="303.5" >Ne..</text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 1.33%)</title><rect x="513.5" y="197" width="15.7" height="15.0" fill="rgb(245,61,28)" rx="2" ry="2" />
<text  x="516.47" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 1.33%)</title><rect x="57.2" y="149" width="15.7" height="15.0" fill="rgb(251,211,29)" rx="2" ry="2" />
<text  x="60.20" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 2.67%)</title><rect x="529.2" y="165" width="31.5" height="15.0" fill="rgb(214,4,19)" rx="2" ry="2" />
<text  x="532.20" y="175.5" >st..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (33 samples, 44.00%)</title><rect x="10.0" y="309" width="519.2" height="15.0" fill="rgb(230,29,16)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreaded..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="41.5" y="149" width="15.7" height="15.0" fill="rgb(247,8,51)" rx="2" ry="2" />
<text  x="44.47" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 1.33%)</title><rect x="72.9" y="101" width="15.8" height="15.0" fill="rgb(251,39,26)" rx="2" ry="2" />
<text  x="75.93" y="111.5" ></text>
</g>
<g >
<title>main (42 samples, 56.00%)</title><rect x="529.2" y="357" width="660.8" height="15.0" fill="rgb(246,217,37)" rx="2" ry="2" />
<text  x="532.20" y="367.5" >main</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.33%)</title><rect x="1111.3" y="229" width="15.8" height="15.0" fill="rgb(232,181,16)" rx="2" ry="2" />
<text  x="1114.33" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.67%)</title><rect x="198.8" y="133" width="31.5" height="15.0" fill="rgb(240,200,33)" rx="2" ry="2" />
<text  x="201.80" y="143.5" >st..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.33%)</title><rect x="1079.9" y="229" width="15.7" height="15.0" fill="rgb(237,30,49)" rx="2" ry="2" />
<text  x="1082.87" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="513.5" y="37" width="15.7" height="15.0" fill="rgb(229,172,18)" rx="2" ry="2" />
<text  x="516.47" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.33%)</title><rect x="230.3" y="133" width="15.7" height="15.0" fill="rgb(217,108,32)" rx="2" ry="2" />
<text  x="233.27" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="1079.9" y="165" width="15.7" height="15.0" fill="rgb(208,30,22)" rx="2" ry="2" />
<text  x="1082.87" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 1.33%)</title><rect x="513.5" y="181" width="15.7" height="15.0" fill="rgb(212,190,50)" rx="2" ry="2" />
<text  x="516.47" y="191.5" ></text>
</g>
<g >
<title>operator (1 samples, 1.33%)</title><rect x="1158.5" y="245" width="15.8" height="15.0" fill="rgb(247,189,35)" rx="2" ry="2" />
<text  x="1161.53" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.67%)</title><rect x="529.2" y="293" width="31.5" height="15.0" fill="rgb(244,152,51)" rx="2" ry="2" />
<text  x="532.20" y="303.5" >st..</text>
</g>
<g >
<title>Page::Page (1 samples, 1.33%)</title><rect x="1079.9" y="245" width="15.7" height="15.0" fill="rgb(223,58,17)" rx="2" ry="2" />
<text  x="1082.87" y="255.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (2 samples, 2.67%)</title><rect x="1127.1" y="261" width="31.4" height="15.0" fill="rgb(234,67,1)" rx="2" ry="2" />
<text  x="1130.07" y="271.5" >st..</text>
</g>
<g >
<title>pageRankComputationWithNumNodes (42 samples, 56.00%)</title><rect x="529.2" y="341" width="660.8" height="15.0" fill="rgb(233,111,9)" rx="2" ry="2" />
<text  x="532.20" y="351.5" >pageRankComputationWithNumNodes</text>
</g>
<g >
<title>clone (33 samples, 44.00%)</title><rect x="10.0" y="357" width="519.2" height="15.0" fill="rgb(232,201,31)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >clone</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 1.33%)</title><rect x="1158.5" y="277" width="15.8" height="15.0" fill="rgb(243,128,50)" rx="2" ry="2" />
<text  x="1161.53" y="287.5" ></text>
</g>
<g >
<title>start_thread (33 samples, 44.00%)</title><rect x="10.0" y="341" width="519.2" height="15.0" fill="rgb(216,128,36)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >start_thread</text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 1.33%)</title><rect x="513.5" y="69" width="15.7" height="15.0" fill="rgb(225,1,50)" rx="2" ry="2" />
<text  x="516.47" y="79.5" ></text>
</g>
<g >
<title>Page::addLink (1 samples, 1.33%)</title><rect x="1158.5" y="309" width="15.8" height="15.0" fill="rgb(241,60,52)" rx="2" ry="2" />
<text  x="1161.53" y="319.5" ></text>
</g>
<g >
<title>Page::getId (2 samples, 2.67%)</title><rect x="25.7" y="181" width="31.5" height="15.0" fill="rgb(210,152,8)" rx="2" ry="2" />
<text  x="28.73" y="191.5" >Pa..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (33 samples, 44.00%)</title><rect x="10.0" y="245" width="519.2" height="15.0" fill="rgb(250,128,42)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 1.33%)</title><rect x="72.9" y="165" width="15.8" height="15.0" fill="rgb(246,38,8)" rx="2" ry="2" />
<text  x="75.93" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 1.33%)</title><rect x="1079.9" y="261" width="15.7" height="15.0" fill="rgb(210,44,33)" rx="2" ry="2" />
<text  x="1082.87" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="513.5" y="85" width="15.7" height="15.0" fill="rgb(238,19,35)" rx="2" ry="2" />
<text  x="516.47" y="95.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (33 samples, 44.00%)</title><rect x="10.0" y="261" width="519.2" height="15.0" fill="rgb(242,95,29)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>tcache_put (1 samples, 1.33%)</title><rect x="1142.8" y="197" width="15.7" height="15.0" fill="rgb(246,216,50)" rx="2" ry="2" />
<text  x="1145.80" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.33%)</title><rect x="340.4" y="133" width="15.7" height="15.0" fill="rgb(250,23,53)" rx="2" ry="2" />
<text  x="343.40" y="143.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.33%)</title><rect x="57.2" y="181" width="15.7" height="15.0" fill="rgb(253,67,48)" rx="2" ry="2" />
<text  x="60.20" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (5 samples, 6.67%)</title><rect x="419.1" y="101" width="78.6" height="15.0" fill="rgb(225,91,14)" rx="2" ry="2" />
<text  x="422.07" y="111.5" >std::_Has..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="57.2" y="165" width="15.7" height="15.0" fill="rgb(218,49,52)" rx="2" ry="2" />
<text  x="60.20" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 1.33%)</title><rect x="544.9" y="101" width="15.8" height="15.0" fill="rgb(233,23,52)" rx="2" ry="2" />
<text  x="547.93" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.67%)</title><rect x="529.2" y="261" width="31.5" height="15.0" fill="rgb(214,164,21)" rx="2" ry="2" />
<text  x="532.20" y="271.5" >st..</text>
</g>
<g >
<title>malloc_consolidate (1 samples, 1.33%)</title><rect x="544.9" y="69" width="15.8" height="15.0" fill="rgb(242,209,54)" rx="2" ry="2" />
<text  x="547.93" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.33%)</title><rect x="513.5" y="133" width="15.7" height="15.0" fill="rgb(216,48,7)" rx="2" ry="2" />
<text  x="516.47" y="143.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 2.67%)</title><rect x="308.9" y="37" width="31.5" height="15.0" fill="rgb(213,195,15)" rx="2" ry="2" />
<text  x="311.93" y="47.5" >__..</text>
</g>
<g >
<title>memcpy@plt (1 samples, 1.33%)</title><rect x="41.5" y="133" width="15.7" height="15.0" fill="rgb(243,19,19)" rx="2" ry="2" />
<text  x="44.47" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 1.33%)</title><rect x="72.9" y="149" width="15.8" height="15.0" fill="rgb(210,191,53)" rx="2" ry="2" />
<text  x="75.93" y="159.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.33%)</title><rect x="72.9" y="85" width="15.8" height="15.0" fill="rgb(248,140,18)" rx="2" ry="2" />
<text  x="75.93" y="95.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.33%)</title><rect x="513.5" y="53" width="15.7" height="15.0" fill="rgb(234,109,20)" rx="2" ry="2" />
<text  x="516.47" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (15 samples, 20.00%)</title><rect x="151.6" y="165" width="236.0" height="15.0" fill="rgb(237,174,2)" rx="2" ry="2" />
<text  x="154.60" y="175.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.33%)</title><rect x="497.7" y="149" width="15.8" height="15.0" fill="rgb(216,229,3)" rx="2" ry="2" />
<text  x="500.73" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.33%)</title><rect x="1158.5" y="293" width="15.8" height="15.0" fill="rgb(219,108,32)" rx="2" ry="2" />
<text  x="1161.53" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 1.33%)</title><rect x="513.5" y="165" width="15.7" height="15.0" fill="rgb(244,133,34)" rx="2" ry="2" />
<text  x="516.47" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 4.00%)</title><rect x="340.4" y="149" width="47.2" height="15.0" fill="rgb(209,139,42)" rx="2" ry="2" />
<text  x="343.40" y="159.5" >std:..</text>
</g>
<g >
<title>__GI___libc_free (1 samples, 1.33%)</title><rect x="529.2" y="69" width="15.7" height="15.0" fill="rgb(233,126,5)" rx="2" ry="2" />
<text  x="532.20" y="79.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (2 samples, 2.67%)</title><rect x="1127.1" y="277" width="31.4" height="15.0" fill="rgb(235,225,11)" rx="2" ry="2" />
<text  x="1130.07" y="287.5" >Si..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (6 samples, 8.00%)</title><rect x="403.3" y="133" width="94.4" height="15.0" fill="rgb(217,174,22)" rx="2" ry="2" />
<text  x="406.33" y="143.5" >std::hash&lt;s..</text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (1 samples, 1.33%)</title><rect x="1095.6" y="229" width="15.7" height="15.0" fill="rgb(235,181,48)" rx="2" ry="2" />
<text  x="1098.60" y="239.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (33 samples, 44.00%)</title><rect x="10.0" y="213" width="519.2" height="15.0" fill="rgb(210,187,38)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 1.33%)</title><rect x="1095.6" y="245" width="15.7" height="15.0" fill="rgb(243,88,13)" rx="2" ry="2" />
<text  x="1098.60" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.33%)</title><rect x="72.9" y="117" width="15.8" height="15.0" fill="rgb(206,66,13)" rx="2" ry="2" />
<text  x="75.93" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="513.5" y="117" width="15.7" height="15.0" fill="rgb(248,74,26)" rx="2" ry="2" />
<text  x="516.47" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 1.33%)</title><rect x="544.9" y="149" width="15.8" height="15.0" fill="rgb(224,222,3)" rx="2" ry="2" />
<text  x="547.93" y="159.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (4 samples, 5.33%)</title><rect x="277.5" y="101" width="62.9" height="15.0" fill="rgb(208,223,48)" rx="2" ry="2" />
<text  x="280.47" y="111.5" >std::e..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.67%)</title><rect x="529.2" y="277" width="31.5" height="15.0" fill="rgb(244,176,5)" rx="2" ry="2" />
<text  x="532.20" y="287.5" >st..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (3 samples, 4.00%)</title><rect x="293.2" y="53" width="47.2" height="15.0" fill="rgb(237,89,13)" rx="2" ry="2" />
<text  x="296.20" y="63.5" >std:..</text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (4 samples, 5.33%)</title><rect x="1095.6" y="309" width="62.9" height="15.0" fill="rgb(243,31,11)" rx="2" ry="2" />
<text  x="1098.60" y="319.5" >Networ..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (23 samples, 30.67%)</title><rect x="151.6" y="181" width="361.9" height="15.0" fill="rgb(238,160,47)" rx="2" ry="2" />
<text  x="154.60" y="191.5" >std::__detail::_Map_base&lt;PageId,</text>
</g>
<g >
<title>Network::addPage (1 samples, 1.33%)</title><rect x="1079.9" y="309" width="15.7" height="15.0" fill="rgb(222,101,38)" rx="2" ry="2" />
<text  x="1082.87" y="319.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.33%)</title><rect x="1174.3" y="309" width="15.7" height="15.0" fill="rgb(235,224,53)" rx="2" ry="2" />
<text  x="1177.27" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.67%)</title><rect x="529.2" y="245" width="31.5" height="15.0" fill="rgb(234,99,5)" rx="2" ry="2" />
<text  x="532.20" y="255.5" >st..</text>
</g>
<g >
<title>std::_Hash_impl::hash (6 samples, 8.00%)</title><rect x="403.3" y="117" width="94.4" height="15.0" fill="rgb(218,105,25)" rx="2" ry="2" />
<text  x="406.33" y="127.5" >std::_Hash_..</text>
</g>
<g >
<title>_int_free (1 samples, 1.33%)</title><rect x="1142.8" y="213" width="15.7" height="15.0" fill="rgb(212,65,5)" rx="2" ry="2" />
<text  x="1145.80" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.67%)</title><rect x="529.2" y="197" width="31.5" height="15.0" fill="rgb(212,131,2)" rx="2" ry="2" />
<text  x="532.20" y="207.5" >__..</text>
</g>
<g >
<title>__GI___libc_free (1 samples, 1.33%)</title><rect x="1174.3" y="293" width="15.7" height="15.0" fill="rgb(228,34,25)" rx="2" ry="2" />
<text  x="1177.27" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (6 samples, 8.00%)</title><rect x="246.0" y="133" width="94.4" height="15.0" fill="rgb(236,200,12)" rx="2" ry="2" />
<text  x="249.00" y="143.5" >std::__deta..</text>
</g>
<g >
<title>std::pair&lt;PageId (2 samples, 2.67%)</title><rect x="529.2" y="181" width="31.5" height="15.0" fill="rgb(213,43,6)" rx="2" ry="2" />
<text  x="532.20" y="191.5" >st..</text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="513.5" y="101" width="15.7" height="15.0" fill="rgb(225,46,29)" rx="2" ry="2" />
<text  x="516.47" y="111.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 1.33%)</title><rect x="529.2" y="101" width="15.7" height="15.0" fill="rgb(227,144,36)" rx="2" ry="2" />
<text  x="532.20" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.33%)</title><rect x="1095.6" y="261" width="15.7" height="15.0" fill="rgb(212,83,26)" rx="2" ry="2" />
<text  x="1098.60" y="271.5" ></text>
</g>
<g >
<title>PageId::PageId (4 samples, 5.33%)</title><rect x="88.7" y="197" width="62.9" height="15.0" fill="rgb(206,147,40)" rx="2" ry="2" />
<text  x="91.67" y="207.5" >PageId..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 5.33%)</title><rect x="88.7" y="181" width="62.9" height="15.0" fill="rgb(230,173,20)" rx="2" ry="2" />
<text  x="91.67" y="191.5" >std::_..</text>
</g>
<g >
<title>PageId::operator== (4 samples, 5.33%)</title><rect x="277.5" y="85" width="62.9" height="15.0" fill="rgb(229,117,16)" rx="2" ry="2" />
<text  x="280.47" y="95.5" >PageId..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (8 samples, 10.67%)</title><rect x="387.6" y="165" width="125.9" height="15.0" fill="rgb(231,54,37)" rx="2" ry="2" />
<text  x="390.60" y="175.5" >std::__detail::..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.33%)</title><rect x="1079.9" y="181" width="15.7" height="15.0" fill="rgb(230,13,5)" rx="2" ry="2" />
<text  x="1082.87" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (1 samples, 1.33%)</title><rect x="1158.5" y="261" width="15.8" height="15.0" fill="rgb(221,205,44)" rx="2" ry="2" />
<text  x="1161.53" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 1.33%)</title><rect x="1079.9" y="293" width="15.7" height="15.0" fill="rgb(244,191,0)" rx="2" ry="2" />
<text  x="1082.87" y="303.5" ></text>
</g>
<g >
<title>?? (33 samples, 44.00%)</title><rect x="10.0" y="325" width="519.2" height="15.0" fill="rgb(211,49,14)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >??</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (35 samples, 46.67%)</title><rect x="529.2" y="325" width="550.7" height="15.0" fill="rgb(251,73,30)" rx="2" ry="2" />
<text  x="532.20" y="335.5" >MultiThreadedPageRankComputer::computeForNetwork</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 2.67%)</title><rect x="529.2" y="229" width="31.5" height="15.0" fill="rgb(220,208,54)" rx="2" ry="2" />
<text  x="532.20" y="239.5" >st..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 1.33%)</title><rect x="529.2" y="117" width="15.7" height="15.0" fill="rgb(234,170,28)" rx="2" ry="2" />
<text  x="532.20" y="127.5" ></text>
</g>
<g >
<title>all (75 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(237,212,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 1.33%)</title><rect x="544.9" y="117" width="15.8" height="15.0" fill="rgb(224,107,12)" rx="2" ry="2" />
<text  x="547.93" y="127.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 1.33%)</title><rect x="513.5" y="149" width="15.7" height="15.0" fill="rgb(237,158,46)" rx="2" ry="2" />
<text  x="516.47" y="159.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 1.33%)</title><rect x="72.9" y="69" width="15.8" height="15.0" fill="rgb(222,14,36)" rx="2" ry="2" />
<text  x="75.93" y="79.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (33 samples, 44.00%)</title><rect x="10.0" y="277" width="519.2" height="15.0" fill="rgb(241,10,5)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::compute..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 1.33%)</title><rect x="72.9" y="53" width="15.8" height="15.0" fill="rgb(209,62,16)" rx="2" ry="2" />
<text  x="75.93" y="63.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 1.33%)</title><rect x="1079.9" y="277" width="15.7" height="15.0" fill="rgb(225,46,35)" rx="2" ry="2" />
<text  x="1082.87" y="287.5" ></text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex (33 samples, 44.00%)</title><rect x="560.7" y="293" width="519.2" height="15.0" fill="rgb(222,187,28)" rx="2" ry="2" />
<text  x="563.67" y="303.5" >__GI___pthread_timedjoin_ex</text>
</g>
</g>
</svg>
