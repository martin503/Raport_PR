<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.98%)</title><rect x="889.2" y="181" width="11.6" height="15.0" fill="rgb(211,27,45)" rx="2" ry="2" />
<text  x="892.22" y="191.5" ></text>
</g>
<g >
<title>__GI__IO_un_link (5 samples, 4.90%)</title><rect x="796.7" y="245" width="57.8" height="15.0" fill="rgb(215,53,42)" rx="2" ry="2" />
<text  x="799.67" y="255.5" >__GI__..</text>
</g>
<g >
<title>arch_fork (6 samples, 5.88%)</title><rect x="704.1" y="229" width="69.4" height="15.0" fill="rgb(243,182,10)" rx="2" ry="2" />
<text  x="707.12" y="239.5" >arch_fork</text>
</g>
<g >
<title>__GI__IO_getline (28 samples, 27.45%)</title><rect x="148.8" y="261" width="323.9" height="15.0" fill="rgb(212,105,48)" rx="2" ry="2" />
<text  x="151.82" y="271.5" >__GI__IO_getline</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="866.1" y="261" width="11.5" height="15.0" fill="rgb(222,1,44)" rx="2" ry="2" />
<text  x="869.08" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="866.1" y="245" width="11.5" height="15.0" fill="rgb(226,57,27)" rx="2" ry="2" />
<text  x="869.08" y="255.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.98%)</title><rect x="889.2" y="133" width="11.6" height="15.0" fill="rgb(251,222,21)" rx="2" ry="2" />
<text  x="892.22" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_read (28 samples, 27.45%)</title><rect x="148.8" y="197" width="323.9" height="15.0" fill="rgb(223,117,33)" rx="2" ry="2" />
<text  x="151.82" y="207.5" >__GI___libc_read</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 0.98%)</title><rect x="889.2" y="69" width="11.6" height="15.0" fill="rgb(232,227,28)" rx="2" ry="2" />
<text  x="892.22" y="79.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (28 samples, 27.45%)</title><rect x="148.8" y="245" width="323.9" height="15.0" fill="rgb(216,17,53)" rx="2" ry="2" />
<text  x="151.82" y="255.5" >__GI__IO_getline_info</text>
</g>
<g >
<title>PageId::PageId (2 samples, 1.96%)</title><rect x="854.5" y="309" width="23.1" height="15.0" fill="rgb(228,205,18)" rx="2" ry="2" />
<text  x="857.51" y="319.5" >P..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.98%)</title><rect x="866.1" y="181" width="11.5" height="15.0" fill="rgb(223,112,48)" rx="2" ry="2" />
<text  x="869.08" y="191.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (3 samples, 2.94%)</title><rect x="900.8" y="213" width="34.7" height="15.0" fill="rgb(240,9,17)" rx="2" ry="2" />
<text  x="903.78" y="223.5" >st..</text>
</g>
<g >
<title>Page::Page (8 samples, 7.84%)</title><rect x="935.5" y="245" width="92.5" height="15.0" fill="rgb(252,40,6)" rx="2" ry="2" />
<text  x="938.49" y="255.5" >Page::Page</text>
</g>
<g >
<title>_IO_fgets (28 samples, 27.45%)</title><rect x="148.8" y="277" width="323.9" height="15.0" fill="rgb(233,151,9)" rx="2" ry="2" />
<text  x="151.82" y="287.5" >_IO_fgets</text>
</g>
<g >
<title>_IO_new_fclose (7 samples, 6.86%)</title><rect x="773.5" y="261" width="81.0" height="15.0" fill="rgb(234,44,5)" rx="2" ry="2" />
<text  x="776.53" y="271.5" >_IO_new_f..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.94%)</title><rect x="900.8" y="133" width="34.7" height="15.0" fill="rgb(223,135,27)" rx="2" ry="2" />
<text  x="903.78" y="143.5" >st..</text>
</g>
<g >
<title>all (102 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,65,4)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.98%)</title><rect x="877.6" y="261" width="11.6" height="15.0" fill="rgb(215,64,9)" rx="2" ry="2" />
<text  x="880.65" y="271.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (12 samples, 11.76%)</title><rect x="10.0" y="245" width="138.8" height="15.0" fill="rgb(252,87,19)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >__pthread_cond_wa..</text>
</g>
<g >
<title>std::vector&lt;Page, (8 samples, 7.84%)</title><rect x="935.5" y="293" width="92.5" height="15.0" fill="rgb(221,84,49)" rx="2" ry="2" />
<text  x="938.49" y="303.5" >std::vector..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="935.5" y="229" width="11.6" height="15.0" fill="rgb(249,197,27)" rx="2" ry="2" />
<text  x="938.49" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="889.2" y="85" width="11.6" height="15.0" fill="rgb(235,26,22)" rx="2" ry="2" />
<text  x="892.22" y="95.5" ></text>
</g>
<g >
<title>__run_fork_handlers (14 samples, 13.73%)</title><rect x="542.2" y="229" width="161.9" height="15.0" fill="rgb(208,152,40)" rx="2" ry="2" />
<text  x="545.16" y="239.5" >__run_fork_handlers</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="935.5" y="197" width="11.6" height="15.0" fill="rgb(227,217,42)" rx="2" ry="2" />
<text  x="938.49" y="207.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.98%)</title><rect x="935.5" y="165" width="11.6" height="15.0" fill="rgb(227,84,44)" rx="2" ry="2" />
<text  x="938.49" y="175.5" ></text>
</g>
<g >
<title>__GI__IO_link_in (2 samples, 1.96%)</title><rect x="472.7" y="245" width="23.2" height="15.0" fill="rgb(211,138,44)" rx="2" ry="2" />
<text  x="475.75" y="255.5" >_..</text>
</g>
<g >
<title>__new_pclose (7 samples, 6.86%)</title><rect x="773.5" y="277" width="81.0" height="15.0" fill="rgb(207,65,13)" rx="2" ry="2" />
<text  x="776.53" y="287.5" >__new_pcl..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (8 samples, 7.84%)</title><rect x="935.5" y="261" width="92.5" height="15.0" fill="rgb(246,209,33)" rx="2" ry="2" />
<text  x="938.49" y="271.5" >__gnu_cxx::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="889.2" y="117" width="11.6" height="15.0" fill="rgb(232,225,48)" rx="2" ry="2" />
<text  x="892.22" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 0.98%)</title><rect x="889.2" y="277" width="11.6" height="15.0" fill="rgb(219,56,45)" rx="2" ry="2" />
<text  x="892.22" y="287.5" ></text>
</g>
<g >
<title>__GI__IO_setb (2 samples, 1.96%)</title><rect x="773.5" y="229" width="23.2" height="15.0" fill="rgb(246,136,51)" rx="2" ry="2" />
<text  x="776.53" y="239.5" >_..</text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 0.98%)</title><rect x="889.2" y="245" width="11.6" height="15.0" fill="rgb(223,195,45)" rx="2" ry="2" />
<text  x="892.22" y="255.5" ></text>
</g>
<g >
<title>_IO_ungetc (1 samples, 0.98%)</title><rect x="1028.0" y="309" width="11.6" height="15.0" fill="rgb(229,54,49)" rx="2" ry="2" />
<text  x="1031.04" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 0.98%)</title><rect x="877.6" y="293" width="11.6" height="15.0" fill="rgb(231,42,5)" rx="2" ry="2" />
<text  x="880.65" y="303.5" ></text>
</g>
<g >
<title>start_thread (88 samples, 86.27%)</title><rect x="10.0" y="357" width="1018.0" height="15.0" fill="rgb(233,38,4)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >start_thread</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (11 samples, 10.78%)</title><rect x="1062.7" y="341" width="127.3" height="15.0" fill="rgb(237,26,24)" rx="2" ry="2" />
<text  x="1065.75" y="351.5" >MultiThreadedPa..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="866.1" y="213" width="11.5" height="15.0" fill="rgb(226,101,43)" rx="2" ry="2" />
<text  x="869.08" y="223.5" ></text>
</g>
<g >
<title>PageId::PageId (7 samples, 6.86%)</title><rect x="947.1" y="149" width="80.9" height="15.0" fill="rgb(226,19,5)" rx="2" ry="2" />
<text  x="950.06" y="159.5" >PageId::P..</text>
</g>
<g >
<title>std::thread::join() (11 samples, 10.78%)</title><rect x="1062.7" y="325" width="127.3" height="15.0" fill="rgb(242,166,1)" rx="2" ry="2" />
<text  x="1065.75" y="335.5" >std::thread::jo..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.98%)</title><rect x="877.6" y="245" width="11.6" height="15.0" fill="rgb(234,55,28)" rx="2" ry="2" />
<text  x="880.65" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="935.5" y="181" width="11.6" height="15.0" fill="rgb(210,123,13)" rx="2" ry="2" />
<text  x="938.49" y="191.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, (3 samples, 2.94%)</title><rect x="1028.0" y="325" width="34.7" height="15.0" fill="rgb(236,11,19)" rx="2" ry="2" />
<text  x="1031.04" y="335.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait_private (5 samples, 4.90%)</title><rect x="796.7" y="213" width="57.8" height="15.0" fill="rgb(207,111,24)" rx="2" ry="2" />
<text  x="799.67" y="223.5" >__lll_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.94%)</title><rect x="900.8" y="117" width="34.7" height="15.0" fill="rgb(209,153,43)" rx="2" ry="2" />
<text  x="903.78" y="127.5" >st..</text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (3 samples, 2.94%)</title><rect x="1028.0" y="357" width="34.7" height="15.0" fill="rgb(226,141,35)" rx="2" ry="2" />
<text  x="1031.04" y="367.5" >St..</text>
</g>
<g >
<title>__lll_lock_wait_private (2 samples, 1.96%)</title><rect x="519.0" y="213" width="23.2" height="15.0" fill="rgb(217,34,52)" rx="2" ry="2" />
<text  x="522.02" y="223.5" >_..</text>
</g>
<g >
<title>_IO_new_file_underflow (28 samples, 27.45%)</title><rect x="148.8" y="213" width="323.9" height="15.0" fill="rgb(214,19,2)" rx="2" ry="2" />
<text  x="151.82" y="223.5" >_IO_new_file_underflow</text>
</g>
<g >
<title>__GI___libc_malloc (7 samples, 6.86%)</title><rect x="947.1" y="53" width="80.9" height="15.0" fill="rgb(229,171,45)" rx="2" ry="2" />
<text  x="950.06" y="63.5" >__GI___li..</text>
</g>
<g >
<title>Page::~Page (1 samples, 0.98%)</title><rect x="889.2" y="229" width="11.6" height="15.0" fill="rgb(228,229,37)" rx="2" ry="2" />
<text  x="892.22" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId (61 samples, 59.80%)</title><rect x="148.8" y="293" width="705.7" height="15.0" fill="rgb(223,40,50)" rx="2" ry="2" />
<text  x="151.82" y="303.5" >Sha256IdGenerator::generateId</text>
</g>
<g >
<title>__GI__IO_un_link (5 samples, 4.90%)</title><rect x="796.7" y="229" width="57.8" height="15.0" fill="rgb(247,95,5)" rx="2" ry="2" />
<text  x="799.67" y="239.5" >__GI__..</text>
</g>
<g >
<title>_int_free (2 samples, 1.96%)</title><rect x="773.5" y="213" width="23.2" height="15.0" fill="rgb(235,229,10)" rx="2" ry="2" />
<text  x="776.53" y="223.5" >_..</text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (12 samples, 11.76%)</title><rect x="10.0" y="293" width="138.8" height="15.0" fill="rgb(232,147,19)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::condition_va..</text>
</g>
<g >
<title>Page::generateId (61 samples, 59.80%)</title><rect x="148.8" y="309" width="705.7" height="15.0" fill="rgb(211,1,15)" rx="2" ry="2" />
<text  x="151.82" y="319.5" >Page::generateId</text>
</g>
<g >
<title>std::vector&lt;Page, (12 samples, 11.76%)</title><rect x="889.2" y="309" width="138.8" height="15.0" fill="rgb(247,137,34)" rx="2" ry="2" />
<text  x="892.22" y="319.5" >std::vector&lt;Page,</text>
</g>
<g >
<title>__libc_fork (24 samples, 23.53%)</title><rect x="495.9" y="245" width="277.6" height="15.0" fill="rgb(220,12,13)" rx="2" ry="2" />
<text  x="498.88" y="255.5" >__libc_fork</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (7 samples, 6.86%)</title><rect x="947.1" y="85" width="80.9" height="15.0" fill="rgb(212,125,9)" rx="2" ry="2" />
<text  x="950.06" y="95.5" >std::__cx..</text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 0.98%)</title><rect x="889.2" y="293" width="11.6" height="15.0" fill="rgb(210,52,27)" rx="2" ry="2" />
<text  x="892.22" y="303.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (88 samples, 86.27%)</title><rect x="10.0" y="325" width="1018.0" height="15.0" fill="rgb(206,33,47)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (3 samples, 2.94%)</title><rect x="900.8" y="277" width="34.7" height="15.0" fill="rgb(236,20,6)" rx="2" ry="2" />
<text  x="903.78" y="287.5" >__..</text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex (11 samples, 10.78%)</title><rect x="1062.7" y="309" width="127.3" height="15.0" fill="rgb(213,103,3)" rx="2" ry="2" />
<text  x="1065.75" y="319.5" >__GI___pthread_..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (3 samples, 2.94%)</title><rect x="900.8" y="229" width="34.7" height="15.0" fill="rgb(224,135,37)" rx="2" ry="2" />
<text  x="903.78" y="239.5" >st..</text>
</g>
<g >
<title>futex_wait_cancelable (12 samples, 11.76%)</title><rect x="10.0" y="229" width="138.8" height="15.0" fill="rgb(250,2,47)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >futex_wait_cancel..</text>
</g>
<g >
<title>__lll_lock_wait_private (5 samples, 4.90%)</title><rect x="970.2" y="37" width="57.8" height="15.0" fill="rgb(251,117,12)" rx="2" ry="2" />
<text  x="973.20" y="47.5" >__lll_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.94%)</title><rect x="900.8" y="101" width="34.7" height="15.0" fill="rgb(222,2,5)" rx="2" ry="2" />
<text  x="903.78" y="111.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (7 samples, 6.86%)</title><rect x="947.1" y="133" width="80.9" height="15.0" fill="rgb(225,84,34)" rx="2" ry="2" />
<text  x="950.06" y="143.5" >std::__cx..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (7 samples, 6.86%)</title><rect x="947.1" y="117" width="80.9" height="15.0" fill="rgb(216,183,51)" rx="2" ry="2" />
<text  x="950.06" y="127.5" >std::__cx..</text>
</g>
<g >
<title>_IO_new_file_close_it (2 samples, 1.96%)</title><rect x="773.5" y="245" width="23.2" height="15.0" fill="rgb(245,130,19)" rx="2" ry="2" />
<text  x="776.53" y="255.5" >_..</text>
</g>
<g >
<title>_IO_new_popen (26 samples, 25.49%)</title><rect x="472.7" y="277" width="300.8" height="15.0" fill="rgb(229,200,27)" rx="2" ry="2" />
<text  x="475.75" y="287.5" >_IO_new_popen</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 0.98%)</title><rect x="889.2" y="261" width="11.6" height="15.0" fill="rgb(209,17,21)" rx="2" ry="2" />
<text  x="892.22" y="271.5" ></text>
</g>
<g >
<title>?? (88 samples, 86.27%)</title><rect x="10.0" y="341" width="1018.0" height="15.0" fill="rgb(214,164,10)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >??</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (12 samples, 11.76%)</title><rect x="10.0" y="309" width="138.8" height="15.0" fill="rgb(221,110,46)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >MultiThreadedPage..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (7 samples, 6.86%)</title><rect x="947.1" y="181" width="80.9" height="15.0" fill="rgb(240,210,2)" rx="2" ry="2" />
<text  x="950.06" y="191.5" >std::__un..</text>
</g>
<g >
<title>std::_Construct&lt;PageId, (3 samples, 2.94%)</title><rect x="900.8" y="181" width="34.7" height="15.0" fill="rgb(241,150,25)" rx="2" ry="2" />
<text  x="903.78" y="191.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="866.1" y="229" width="11.5" height="15.0" fill="rgb(250,174,54)" rx="2" ry="2" />
<text  x="869.08" y="239.5" ></text>
</g>
<g >
<title>_IO_new_proc_open (24 samples, 23.53%)</title><rect x="495.9" y="261" width="277.6" height="15.0" fill="rgb(228,184,27)" rx="2" ry="2" />
<text  x="498.88" y="271.5" >_IO_new_proc_open</text>
</g>
<g >
<title>Page::Page (3 samples, 2.94%)</title><rect x="900.8" y="261" width="34.7" height="15.0" fill="rgb(229,44,5)" rx="2" ry="2" />
<text  x="903.78" y="271.5" >Pa..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.98%)</title><rect x="889.2" y="149" width="11.6" height="15.0" fill="rgb(224,203,30)" rx="2" ry="2" />
<text  x="892.22" y="159.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (7 samples, 6.86%)</title><rect x="947.1" y="197" width="80.9" height="15.0" fill="rgb(244,166,7)" rx="2" ry="2" />
<text  x="950.06" y="207.5" >std::unin..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 2.94%)</title><rect x="900.8" y="149" width="34.7" height="15.0" fill="rgb(243,14,34)" rx="2" ry="2" />
<text  x="903.78" y="159.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 0.98%)</title><rect x="877.6" y="309" width="11.6" height="15.0" fill="rgb(211,59,38)" rx="2" ry="2" />
<text  x="880.65" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.98%)</title><rect x="877.6" y="229" width="11.6" height="15.0" fill="rgb(239,183,31)" rx="2" ry="2" />
<text  x="880.65" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (8 samples, 7.84%)</title><rect x="935.5" y="277" width="92.5" height="15.0" fill="rgb(227,189,30)" rx="2" ry="2" />
<text  x="938.49" y="287.5" >std::alloca..</text>
</g>
<g >
<title>_IO_getc (1 samples, 0.98%)</title><rect x="1051.2" y="293" width="11.5" height="15.0" fill="rgb(238,164,52)" rx="2" ry="2" />
<text  x="1054.18" y="303.5" ></text>
</g>
<g >
<title>operator (7 samples, 6.86%)</title><rect x="947.1" y="69" width="80.9" height="15.0" fill="rgb(231,99,18)" rx="2" ry="2" />
<text  x="950.06" y="79.5" >operator</text>
</g>
<g >
<title>PageId::PageId (3 samples, 2.94%)</title><rect x="900.8" y="165" width="34.7" height="15.0" fill="rgb(240,83,40)" rx="2" ry="2" />
<text  x="903.78" y="175.5" >Pa..</text>
</g>
<g >
<title>__lll_lock_wait_private (2 samples, 1.96%)</title><rect x="472.7" y="229" width="23.2" height="15.0" fill="rgb(213,51,32)" rx="2" ry="2" />
<text  x="475.75" y="239.5" >_..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.98%)</title><rect x="889.2" y="213" width="11.6" height="15.0" fill="rgb(227,100,39)" rx="2" ry="2" />
<text  x="892.22" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.98%)</title><rect x="877.6" y="277" width="11.6" height="15.0" fill="rgb(221,228,22)" rx="2" ry="2" />
<text  x="880.65" y="287.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (12 samples, 11.76%)</title><rect x="10.0" y="277" width="138.8" height="15.0" fill="rgb(231,202,34)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >std::condition_va..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.98%)</title><rect x="889.2" y="197" width="11.6" height="15.0" fill="rgb(234,107,36)" rx="2" ry="2" />
<text  x="892.22" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="866.1" y="197" width="11.5" height="15.0" fill="rgb(219,55,22)" rx="2" ry="2" />
<text  x="869.08" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.96%)</title><rect x="854.5" y="293" width="23.1" height="15.0" fill="rgb(214,148,5)" rx="2" ry="2" />
<text  x="857.51" y="303.5" >s..</text>
</g>
<g >
<title>main (14 samples, 13.73%)</title><rect x="1028.0" y="373" width="162.0" height="15.0" fill="rgb(220,164,44)" rx="2" ry="2" />
<text  x="1031.04" y="383.5" >main</text>
</g>
<g >
<title>_IO_new_file_init_internal (2 samples, 1.96%)</title><rect x="472.7" y="261" width="23.2" height="15.0" fill="rgb(250,176,9)" rx="2" ry="2" />
<text  x="475.75" y="271.5" >_..</text>
</g>
<g >
<title>operator (3 samples, 2.94%)</title><rect x="900.8" y="85" width="34.7" height="15.0" fill="rgb(224,123,48)" rx="2" ry="2" />
<text  x="903.78" y="95.5" >op..</text>
</g>
<g >
<title>clone (88 samples, 86.27%)</title><rect x="10.0" y="373" width="1018.0" height="15.0" fill="rgb(229,103,1)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >clone</text>
</g>
<g >
<title>__lll_lock_wait_private (3 samples, 2.94%)</title><rect x="900.8" y="53" width="34.7" height="15.0" fill="rgb(239,204,36)" rx="2" ry="2" />
<text  x="903.78" y="63.5" >__..</text>
</g>
<g >
<title>_int_free (1 samples, 0.98%)</title><rect x="889.2" y="37" width="11.6" height="15.0" fill="rgb(215,222,23)" rx="2" ry="2" />
<text  x="892.22" y="47.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (3 samples, 2.94%)</title><rect x="900.8" y="293" width="34.7" height="15.0" fill="rgb(229,161,19)" rx="2" ry="2" />
<text  x="903.78" y="303.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (7 samples, 6.86%)</title><rect x="947.1" y="213" width="80.9" height="15.0" fill="rgb(208,192,44)" rx="2" ry="2" />
<text  x="950.06" y="223.5" >std::__un..</text>
</g>
<g >
<title>std::_Construct&lt;PageId, (7 samples, 6.86%)</title><rect x="947.1" y="165" width="80.9" height="15.0" fill="rgb(211,101,44)" rx="2" ry="2" />
<text  x="950.06" y="175.5" >std::_Con..</text>
</g>
<g >
<title>__pthread_cond_wait (12 samples, 11.76%)</title><rect x="10.0" y="261" width="138.8" height="15.0" fill="rgb(232,171,15)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >__pthread_cond_wait</text>
</g>
<g >
<title>__GI__IO_default_uflow (28 samples, 27.45%)</title><rect x="148.8" y="229" width="323.9" height="15.0" fill="rgb(250,215,47)" rx="2" ry="2" />
<text  x="151.82" y="239.5" >__GI__IO_default_uflow</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.98%)</title><rect x="889.2" y="165" width="11.6" height="15.0" fill="rgb(210,2,37)" rx="2" ry="2" />
<text  x="892.22" y="175.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 0.98%)</title><rect x="935.5" y="133" width="11.6" height="15.0" fill="rgb(206,154,35)" rx="2" ry="2" />
<text  x="938.49" y="143.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (14 samples, 13.73%)</title><rect x="542.2" y="213" width="161.9" height="15.0" fill="rgb(235,128,8)" rx="2" ry="2" />
<text  x="545.16" y="223.5" >__lll_lock_wait_priv..</text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, (2 samples, 1.96%)</title><rect x="1039.6" y="309" width="23.1" height="15.0" fill="rgb(237,25,5)" rx="2" ry="2" />
<text  x="1042.61" y="319.5" >_..</text>
</g>
<g >
<title>__lll_lock_wait_private (2 samples, 1.96%)</title><rect x="773.5" y="197" width="23.2" height="15.0" fill="rgb(211,52,36)" rx="2" ry="2" />
<text  x="776.53" y="207.5" >_..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.98%)</title><rect x="866.1" y="165" width="11.5" height="15.0" fill="rgb(254,120,32)" rx="2" ry="2" />
<text  x="869.08" y="175.5" ></text>
</g>
<g >
<title>__malloc_fork_lock_parent (2 samples, 1.96%)</title><rect x="519.0" y="229" width="23.2" height="15.0" fill="rgb(226,71,47)" rx="2" ry="2" />
<text  x="522.02" y="239.5" >_..</text>
</g>
<g >
<title>std::getline&lt;char, (3 samples, 2.94%)</title><rect x="1028.0" y="341" width="34.7" height="15.0" fill="rgb(237,144,45)" rx="2" ry="2" />
<text  x="1031.04" y="351.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (3 samples, 2.94%)</title><rect x="900.8" y="197" width="34.7" height="15.0" fill="rgb(240,22,44)" rx="2" ry="2" />
<text  x="903.78" y="207.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="935.5" y="213" width="11.6" height="15.0" fill="rgb(219,14,6)" rx="2" ry="2" />
<text  x="938.49" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate (1 samples, 0.98%)</title><rect x="889.2" y="53" width="11.6" height="15.0" fill="rgb(206,8,46)" rx="2" ry="2" />
<text  x="892.22" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="866.1" y="277" width="11.5" height="15.0" fill="rgb(215,26,45)" rx="2" ry="2" />
<text  x="869.08" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (3 samples, 2.94%)</title><rect x="900.8" y="69" width="34.7" height="15.0" fill="rgb(240,3,8)" rx="2" ry="2" />
<text  x="903.78" y="79.5" >__..</text>
</g>
<g >
<title>std::vector&lt;PageId, (7 samples, 6.86%)</title><rect x="947.1" y="229" width="80.9" height="15.0" fill="rgb(239,85,38)" rx="2" ry="2" />
<text  x="950.06" y="239.5" >std::vect..</text>
</g>
<g >
<title>std::vector&lt;PageId, (3 samples, 2.94%)</title><rect x="900.8" y="245" width="34.7" height="15.0" fill="rgb(220,29,50)" rx="2" ry="2" />
<text  x="903.78" y="255.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (7 samples, 6.86%)</title><rect x="947.1" y="101" width="80.9" height="15.0" fill="rgb(239,1,10)" rx="2" ry="2" />
<text  x="950.06" y="111.5" >std::__cx..</text>
</g>
<g >
<title>pageRankComputationWithNetwork (11 samples, 10.78%)</title><rect x="1062.7" y="357" width="127.3" height="15.0" fill="rgb(249,159,11)" rx="2" ry="2" />
<text  x="1065.75" y="367.5" >pageRankComputa..</text>
</g>
<g >
<title>__GI___libc_read (28 samples, 27.45%)</title><rect x="148.8" y="181" width="323.9" height="15.0" fill="rgb(232,157,32)" rx="2" ry="2" />
<text  x="151.82" y="191.5" >__GI___libc_read</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.98%)</title><rect x="889.2" y="101" width="11.6" height="15.0" fill="rgb(238,57,11)" rx="2" ry="2" />
<text  x="892.22" y="111.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.98%)</title><rect x="935.5" y="149" width="11.6" height="15.0" fill="rgb(245,127,3)" rx="2" ry="2" />
<text  x="938.49" y="159.5" ></text>
</g>
</g>
</svg>
