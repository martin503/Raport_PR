<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>PageId::operator== (1 samples, 1.37%)</title><rect x="688.9" y="133" width="16.2" height="15.0" fill="rgb(221,39,40)" rx="2" ry="2" />
<text  x="691.90" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 1.37%)</title><rect x="737.4" y="53" width="16.2" height="15.0" fill="rgb(211,182,12)" rx="2" ry="2" />
<text  x="740.40" y="63.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 1.37%)</title><rect x="478.8" y="229" width="16.1" height="15.0" fill="rgb(207,207,35)" rx="2" ry="2" />
<text  x="481.77" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;PageId*&gt;, (1 samples, 1.37%)</title><rect x="10.0" y="165" width="16.2" height="15.0" fill="rgb(208,191,53)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.37%)</title><rect x="721.2" y="197" width="16.2" height="15.0" fill="rgb(231,50,32)" rx="2" ry="2" />
<text  x="724.23" y="207.5" ></text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex (23 samples, 31.51%)</title><rect x="818.2" y="341" width="371.8" height="15.0" fill="rgb(219,218,38)" rx="2" ry="2" />
<text  x="821.22" y="351.5" >__GI___pthread_timedjoin_ex</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.37%)</title><rect x="737.4" y="181" width="16.2" height="15.0" fill="rgb(215,141,21)" rx="2" ry="2" />
<text  x="740.40" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 2.74%)</title><rect x="430.3" y="213" width="32.3" height="15.0" fill="rgb(232,228,52)" rx="2" ry="2" />
<text  x="433.27" y="223.5" >__..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (6 samples, 8.22%)</title><rect x="608.1" y="165" width="97.0" height="15.0" fill="rgb(220,134,2)" rx="2" ry="2" />
<text  x="611.08" y="175.5" >std::__deta..</text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 1.37%)</title><rect x="737.4" y="117" width="16.2" height="15.0" fill="rgb(236,108,9)" rx="2" ry="2" />
<text  x="740.40" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 1.37%)</title><rect x="737.4" y="37" width="16.2" height="15.0" fill="rgb(254,218,1)" rx="2" ry="2" />
<text  x="740.40" y="47.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (4 samples, 5.48%)</title><rect x="753.6" y="389" width="64.6" height="15.0" fill="rgb(247,84,11)" rx="2" ry="2" />
<text  x="756.56" y="399.5" >StdinGe..</text>
</g>
<g >
<title>?? (46 samples, 63.01%)</title><rect x="10.0" y="373" width="743.6" height="15.0" fill="rgb(213,47,36)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >??</text>
</g>
<g >
<title>Page::Page (1 samples, 1.37%)</title><rect x="737.4" y="197" width="16.2" height="15.0" fill="rgb(239,14,52)" rx="2" ry="2" />
<text  x="740.40" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.37%)</title><rect x="737.4" y="85" width="16.2" height="15.0" fill="rgb(236,36,21)" rx="2" ry="2" />
<text  x="740.40" y="95.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.37%)</title><rect x="478.8" y="245" width="16.1" height="15.0" fill="rgb(213,110,18)" rx="2" ry="2" />
<text  x="481.77" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.37%)</title><rect x="397.9" y="213" width="16.2" height="15.0" fill="rgb(217,57,2)" rx="2" ry="2" />
<text  x="400.95" y="223.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.37%)</title><rect x="737.4" y="149" width="16.2" height="15.0" fill="rgb(252,99,25)" rx="2" ry="2" />
<text  x="740.40" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;PageId*, (1 samples, 1.37%)</title><rect x="511.1" y="245" width="16.2" height="15.0" fill="rgb(207,131,19)" rx="2" ry="2" />
<text  x="514.10" y="255.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 1.37%)</title><rect x="688.9" y="117" width="16.2" height="15.0" fill="rgb(206,127,9)" rx="2" ry="2" />
<text  x="691.90" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (13 samples, 17.81%)</title><rect x="527.3" y="245" width="210.1" height="15.0" fill="rgb(240,124,31)" rx="2" ry="2" />
<text  x="530.26" y="255.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>__GI___libc_read (15 samples, 20.55%)</title><rect x="42.3" y="117" width="242.5" height="15.0" fill="rgb(214,175,49)" rx="2" ry="2" />
<text  x="45.33" y="127.5" >__GI___libc_read</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;PageId*&gt;, (1 samples, 1.37%)</title><rect x="10.0" y="133" width="16.2" height="15.0" fill="rgb(238,138,24)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>__GI__IO_un_link (1 samples, 1.37%)</title><rect x="301.0" y="197" width="16.1" height="15.0" fill="rgb(220,79,38)" rx="2" ry="2" />
<text  x="303.96" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 1.37%)</title><rect x="721.2" y="181" width="16.2" height="15.0" fill="rgb(239,229,7)" rx="2" ry="2" />
<text  x="724.23" y="191.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 1.37%)</title><rect x="301.0" y="165" width="16.1" height="15.0" fill="rgb(224,92,1)" rx="2" ry="2" />
<text  x="303.96" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 5.48%)</title><rect x="414.1" y="229" width="64.7" height="15.0" fill="rgb(241,98,54)" rx="2" ry="2" />
<text  x="417.11" y="239.5" >std::__..</text>
</g>
<g >
<title>futex_wait_cancelable (1 samples, 1.37%)</title><rect x="26.2" y="165" width="16.1" height="15.0" fill="rgb(254,203,54)" rx="2" ry="2" />
<text  x="29.16" y="175.5" ></text>
</g>
<g >
<title>__GI__IO_sputbackc (1 samples, 1.37%)</title><rect x="785.9" y="357" width="16.2" height="15.0" fill="rgb(237,30,15)" rx="2" ry="2" />
<text  x="788.89" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;PageId (1 samples, 1.37%)</title><rect x="672.7" y="149" width="16.2" height="15.0" fill="rgb(246,160,22)" rx="2" ry="2" />
<text  x="675.74" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.37%)</title><rect x="10.0" y="197" width="16.2" height="15.0" fill="rgb(230,120,10)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>std::operator!=&lt;PageId*&gt; (1 samples, 1.37%)</title><rect x="10.0" y="117" width="16.2" height="15.0" fill="rgb(248,58,32)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>std::thread::join() (23 samples, 31.51%)</title><rect x="818.2" y="357" width="371.8" height="15.0" fill="rgb(214,33,30)" rx="2" ry="2" />
<text  x="821.22" y="367.5" >std::thread::join()</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (46 samples, 63.01%)</title><rect x="10.0" y="325" width="743.6" height="15.0" fill="rgb(229,151,32)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 1.37%)</title><rect x="737.4" y="245" width="16.2" height="15.0" fill="rgb(229,152,1)" rx="2" ry="2" />
<text  x="740.40" y="255.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (1 samples, 1.37%)</title><rect x="26.2" y="245" width="16.1" height="15.0" fill="rgb(216,122,26)" rx="2" ry="2" />
<text  x="29.16" y="255.5" ></text>
</g>
<g >
<title>__GI___waitpid_nocancel (1 samples, 1.37%)</title><rect x="284.8" y="165" width="16.2" height="15.0" fill="rgb(222,168,54)" rx="2" ry="2" />
<text  x="287.79" y="175.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;PageId*&gt;::base (1 samples, 1.37%)</title><rect x="10.0" y="85" width="16.2" height="15.0" fill="rgb(222,127,18)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (10 samples, 13.70%)</title><rect x="559.6" y="197" width="161.6" height="15.0" fill="rgb(238,80,53)" rx="2" ry="2" />
<text  x="562.59" y="207.5" >std::_Hashtable&lt;Page..</text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 1.37%)</title><rect x="26.2" y="213" width="16.1" height="15.0" fill="rgb(224,77,40)" rx="2" ry="2" />
<text  x="29.16" y="223.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (46 samples, 63.01%)</title><rect x="10.0" y="341" width="743.6" height="15.0" fill="rgb(238,189,51)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (23 samples, 31.51%)</title><rect x="818.2" y="373" width="371.8" height="15.0" fill="rgb(235,94,23)" rx="2" ry="2" />
<text  x="821.22" y="383.5" >MultiThreadedPageRankComputer::computeForNetwork</text>
</g>
<g >
<title>start_thread (46 samples, 63.01%)</title><rect x="10.0" y="389" width="743.6" height="15.0" fill="rgb(214,136,25)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >start_thread</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 1.37%)</title><rect x="688.9" y="149" width="16.2" height="15.0" fill="rgb(230,195,35)" rx="2" ry="2" />
<text  x="691.90" y="159.5" ></text>
</g>
<g >
<title>main (27 samples, 36.99%)</title><rect x="753.6" y="405" width="436.4" height="15.0" fill="rgb(239,15,50)" rx="2" ry="2" />
<text  x="756.56" y="415.5" >main</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.37%)</title><rect x="462.6" y="213" width="16.2" height="15.0" fill="rgb(213,184,53)" rx="2" ry="2" />
<text  x="465.60" y="223.5" ></text>
</g>
<g >
<title>arch_fork (5 samples, 6.85%)</title><rect x="317.1" y="165" width="80.8" height="15.0" fill="rgb(220,217,6)" rx="2" ry="2" />
<text  x="320.12" y="175.5" >arch_fork</text>
</g>
<g >
<title>__GI__IO_getline (15 samples, 20.55%)</title><rect x="42.3" y="197" width="242.5" height="15.0" fill="rgb(254,163,27)" rx="2" ry="2" />
<text  x="45.33" y="207.5" >__GI__IO_getline</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (13 samples, 17.81%)</title><rect x="527.3" y="213" width="210.1" height="15.0" fill="rgb(238,89,52)" rx="2" ry="2" />
<text  x="530.26" y="223.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>__GI___libc_read (15 samples, 20.55%)</title><rect x="42.3" y="133" width="242.5" height="15.0" fill="rgb(221,37,16)" rx="2" ry="2" />
<text  x="45.33" y="143.5" >__GI___libc_read</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;PageId*, (1 samples, 1.37%)</title><rect x="494.9" y="245" width="16.2" height="15.0" fill="rgb(205,140,22)" rx="2" ry="2" />
<text  x="497.93" y="255.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (1 samples, 1.37%)</title><rect x="26.2" y="197" width="16.1" height="15.0" fill="rgb(250,81,2)" rx="2" ry="2" />
<text  x="29.16" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.37%)</title><rect x="737.4" y="133" width="16.2" height="15.0" fill="rgb(208,165,18)" rx="2" ry="2" />
<text  x="740.40" y="143.5" ></text>
</g>
<g >
<title>_IO_new_fclose (2 samples, 2.74%)</title><rect x="284.8" y="213" width="32.3" height="15.0" fill="rgb(244,128,32)" rx="2" ry="2" />
<text  x="287.79" y="223.5" >_I..</text>
</g>
<g >
<title>std::operator==&lt;PageId*&gt; (1 samples, 1.37%)</title><rect x="10.0" y="101" width="16.2" height="15.0" fill="rgb(221,64,3)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>_IO_fgets (15 samples, 20.55%)</title><rect x="42.3" y="213" width="242.5" height="15.0" fill="rgb(247,74,19)" rx="2" ry="2" />
<text  x="45.33" y="223.5" >_IO_fgets</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 1.37%)</title><rect x="656.6" y="133" width="16.1" height="15.0" fill="rgb(220,165,21)" rx="2" ry="2" />
<text  x="659.58" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;PageId*, (1 samples, 1.37%)</title><rect x="10.0" y="181" width="16.2" height="15.0" fill="rgb(236,204,11)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>all (73 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(205,131,46)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 1.37%)</title><rect x="737.4" y="165" width="16.2" height="15.0" fill="rgb(248,179,48)" rx="2" ry="2" />
<text  x="740.40" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (2 samples, 2.74%)</title><rect x="640.4" y="149" width="32.3" height="15.0" fill="rgb(247,89,26)" rx="2" ry="2" />
<text  x="643.41" y="159.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.37%)</title><rect x="688.9" y="101" width="16.2" height="15.0" fill="rgb(206,23,9)" rx="2" ry="2" />
<text  x="691.90" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.37%)</title><rect x="10.0" y="229" width="16.2" height="15.0" fill="rgb(233,213,42)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (1 samples, 1.37%)</title><rect x="26.2" y="229" width="16.1" height="15.0" fill="rgb(248,49,24)" rx="2" ry="2" />
<text  x="29.16" y="239.5" ></text>
</g>
<g >
<title>clone (46 samples, 63.01%)</title><rect x="10.0" y="405" width="743.6" height="15.0" fill="rgb(222,169,20)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >clone</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (1 samples, 1.37%)</title><rect x="10.0" y="245" width="16.2" height="15.0" fill="rgb(227,167,1)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (46 samples, 63.01%)</title><rect x="10.0" y="261" width="743.6" height="15.0" fill="rgb(240,62,35)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>Sha256IdGenerator::generateId (23 samples, 31.51%)</title><rect x="42.3" y="229" width="371.8" height="15.0" fill="rgb(253,194,16)" rx="2" ry="2" />
<text  x="45.33" y="239.5" >Sha256IdGenerator::generateId</text>
</g>
<g >
<title>PageId::PageId (4 samples, 5.48%)</title><rect x="414.1" y="245" width="64.7" height="15.0" fill="rgb(217,77,25)" rx="2" ry="2" />
<text  x="417.11" y="255.5" >PageId:..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 1.37%)</title><rect x="705.1" y="165" width="16.1" height="15.0" fill="rgb(206,127,28)" rx="2" ry="2" />
<text  x="708.07" y="175.5" ></text>
</g>
<g >
<title>__libc_fork (5 samples, 6.85%)</title><rect x="317.1" y="181" width="80.8" height="15.0" fill="rgb(207,24,54)" rx="2" ry="2" />
<text  x="320.12" y="191.5" >__libc_fork</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 1.37%)</title><rect x="10.0" y="213" width="16.2" height="15.0" fill="rgb(223,135,11)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>__GI__IO_un_link (1 samples, 1.37%)</title><rect x="301.0" y="181" width="16.1" height="15.0" fill="rgb(242,144,48)" rx="2" ry="2" />
<text  x="303.96" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (46 samples, 63.01%)</title><rect x="10.0" y="293" width="743.6" height="15.0" fill="rgb(246,193,41)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::basic_istream&lt;char, (4 samples, 5.48%)</title><rect x="753.6" y="373" width="64.6" height="15.0" fill="rgb(245,112,53)" rx="2" ry="2" />
<text  x="756.56" y="383.5" >std::ba..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.37%)</title><rect x="737.4" y="101" width="16.2" height="15.0" fill="rgb(221,65,43)" rx="2" ry="2" />
<text  x="740.40" y="111.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (15 samples, 20.55%)</title><rect x="42.3" y="165" width="242.5" height="15.0" fill="rgb(229,215,46)" rx="2" ry="2" />
<text  x="45.33" y="175.5" >__GI__IO_default_uflow</text>
</g>
<g >
<title>Page::generateId (23 samples, 31.51%)</title><rect x="42.3" y="245" width="371.8" height="15.0" fill="rgb(211,217,17)" rx="2" ry="2" />
<text  x="45.33" y="255.5" >Page::generateId</text>
</g>
<g >
<title>_IO_new_popen (5 samples, 6.85%)</title><rect x="317.1" y="213" width="80.8" height="15.0" fill="rgb(238,184,11)" rx="2" ry="2" />
<text  x="320.12" y="223.5" >_IO_new_p..</text>
</g>
<g >
<title>pageRankComputationWithNetwork (23 samples, 31.51%)</title><rect x="818.2" y="389" width="371.8" height="15.0" fill="rgb(217,15,35)" rx="2" ry="2" />
<text  x="821.22" y="399.5" >pageRankComputationWithNetwork</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 1.37%)</title><rect x="737.4" y="229" width="16.2" height="15.0" fill="rgb(205,118,19)" rx="2" ry="2" />
<text  x="740.40" y="239.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (46 samples, 63.01%)</title><rect x="10.0" y="277" width="743.6" height="15.0" fill="rgb(253,49,40)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (46 samples, 63.01%)</title><rect x="10.0" y="309" width="743.6" height="15.0" fill="rgb(222,94,26)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (13 samples, 17.81%)</title><rect x="527.3" y="229" width="210.1" height="15.0" fill="rgb(237,195,39)" rx="2" ry="2" />
<text  x="530.26" y="239.5" >std::__detail::_Map_base&lt;Pa..</text>
</g>
<g >
<title>operator (1 samples, 1.37%)</title><rect x="737.4" y="69" width="16.2" height="15.0" fill="rgb(232,198,0)" rx="2" ry="2" />
<text  x="740.40" y="79.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (1 samples, 1.37%)</title><rect x="26.2" y="181" width="16.1" height="15.0" fill="rgb(215,5,28)" rx="2" ry="2" />
<text  x="29.16" y="191.5" ></text>
</g>
<g >
<title>strlen@plt (1 samples, 1.37%)</title><rect x="397.9" y="197" width="16.2" height="15.0" fill="rgb(247,150,26)" rx="2" ry="2" />
<text  x="400.95" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, (1 samples, 1.37%)</title><rect x="802.1" y="357" width="16.1" height="15.0" fill="rgb(233,128,15)" rx="2" ry="2" />
<text  x="805.05" y="367.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it (1 samples, 1.37%)</title><rect x="284.8" y="197" width="16.2" height="15.0" fill="rgb(253,152,30)" rx="2" ry="2" />
<text  x="287.79" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 1.37%)</title><rect x="737.4" y="213" width="16.2" height="15.0" fill="rgb(206,35,39)" rx="2" ry="2" />
<text  x="740.40" y="223.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (15 samples, 20.55%)</title><rect x="42.3" y="149" width="242.5" height="15.0" fill="rgb(253,227,36)" rx="2" ry="2" />
<text  x="45.33" y="159.5" >_IO_new_file_underflow</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (8 samples, 10.96%)</title><rect x="591.9" y="181" width="129.3" height="15.0" fill="rgb(242,69,3)" rx="2" ry="2" />
<text  x="594.92" y="191.5" >std::__detail::_..</text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;PageId*&gt;, (1 samples, 1.37%)</title><rect x="10.0" y="149" width="16.2" height="15.0" fill="rgb(242,222,49)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (15 samples, 20.55%)</title><rect x="42.3" y="181" width="242.5" height="15.0" fill="rgb(221,20,21)" rx="2" ry="2" />
<text  x="45.33" y="191.5" >__GI__IO_getline_info</text>
</g>
<g >
<title>_IO_new_proc_open (5 samples, 6.85%)</title><rect x="317.1" y="197" width="80.8" height="15.0" fill="rgb(227,0,10)" rx="2" ry="2" />
<text  x="320.12" y="207.5" >_IO_new_p..</text>
</g>
<g >
<title>_IO_new_proc_close (1 samples, 1.37%)</title><rect x="284.8" y="181" width="16.2" height="15.0" fill="rgb(249,156,16)" rx="2" ry="2" />
<text  x="287.79" y="191.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, (1 samples, 1.37%)</title><rect x="672.7" y="133" width="16.2" height="15.0" fill="rgb(250,24,25)" rx="2" ry="2" />
<text  x="675.74" y="143.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (46 samples, 63.01%)</title><rect x="10.0" y="357" width="743.6" height="15.0" fill="rgb(212,173,0)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetw..</text>
</g>
</g>
</svg>
