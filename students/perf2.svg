<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>__pthread_cond_wait_common (54 samples, 15.93%)</title><rect x="90.1" y="197" width="187.9" height="15.0" fill="rgb(243,122,36)" rx="2" ry="2" />
<text  x="93.06" y="207.5" >__pthread_cond_wait_common</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.29%)</title><rect x="65.7" y="213" width="3.5" height="15.0" fill="rgb(247,134,30)" rx="2" ry="2" />
<text  x="68.69" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.29%)</title><rect x="737.5" y="133" width="3.5" height="15.0" fill="rgb(253,37,42)" rx="2" ry="2" />
<text  x="740.49" y="143.5" ></text>
</g>
<g >
<title>clone (213 samples, 62.83%)</title><rect x="10.0" y="421" width="741.4" height="15.0" fill="rgb(220,147,52)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >clone</text>
</g>
<g >
<title>Page::generateId (4 samples, 1.18%)</title><rect x="1134.3" y="357" width="13.9" height="15.0" fill="rgb(218,227,32)" rx="2" ry="2" />
<text  x="1137.31" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (4 samples, 1.18%)</title><rect x="354.6" y="213" width="13.9" height="15.0" fill="rgb(251,173,2)" rx="2" ry="2" />
<text  x="357.60" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="72.7" y="165" width="3.4" height="15.0" fill="rgb(233,220,23)" rx="2" ry="2" />
<text  x="75.65" y="175.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.59%)</title><rect x="744.5" y="101" width="6.9" height="15.0" fill="rgb(208,1,38)" rx="2" ry="2" />
<text  x="747.45" y="111.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;PageId*, (2 samples, 0.59%)</title><rect x="83.1" y="197" width="7.0" height="15.0" fill="rgb(247,68,14)" rx="2" ry="2" />
<text  x="86.10" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.29%)</title><rect x="65.7" y="165" width="3.5" height="15.0" fill="rgb(238,103,13)" rx="2" ry="2" />
<text  x="68.69" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (13 samples, 3.83%)</title><rect x="681.8" y="229" width="45.3" height="15.0" fill="rgb(252,52,8)" rx="2" ry="2" />
<text  x="684.80" y="239.5" >std:..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="65.7" y="181" width="3.5" height="15.0" fill="rgb(219,173,42)" rx="2" ry="2" />
<text  x="68.69" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.29%)</title><rect x="747.9" y="37" width="3.5" height="15.0" fill="rgb(214,170,6)" rx="2" ry="2" />
<text  x="750.94" y="47.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="278.0" y="133" width="3.5" height="15.0" fill="rgb(219,213,46)" rx="2" ry="2" />
<text  x="281.02" y="143.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (213 samples, 62.83%)</title><rect x="10.0" y="293" width="741.4" height="15.0" fill="rgb(242,67,48)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.29%)</title><rect x="741.0" y="245" width="3.5" height="15.0" fill="rgb(225,122,12)" rx="2" ry="2" />
<text  x="743.97" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, (5 samples, 1.47%)</title><rect x="1116.9" y="325" width="17.4" height="15.0" fill="rgb(233,186,12)" rx="2" ry="2" />
<text  x="1119.90" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (4 samples, 1.18%)</title><rect x="751.4" y="165" width="13.9" height="15.0" fill="rgb(234,5,37)" rx="2" ry="2" />
<text  x="754.42" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (9 samples, 2.65%)</title><rect x="751.4" y="309" width="31.3" height="15.0" fill="rgb(219,79,20)" rx="2" ry="2" />
<text  x="754.42" y="319.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="542.6" y="197" width="3.4" height="15.0" fill="rgb(242,119,22)" rx="2" ry="2" />
<text  x="545.57" y="207.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.59%)</title><rect x="27.4" y="245" width="7.0" height="15.0" fill="rgb(252,219,49)" rx="2" ry="2" />
<text  x="30.40" y="255.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.29%)</title><rect x="1179.6" y="261" width="3.4" height="15.0" fill="rgb(241,192,40)" rx="2" ry="2" />
<text  x="1182.56" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (2 samples, 0.59%)</title><rect x="69.2" y="213" width="6.9" height="15.0" fill="rgb(219,100,37)" rx="2" ry="2" />
<text  x="72.17" y="223.5" ></text>
</g>
<g >
<title>PageId::PageId (4 samples, 1.18%)</title><rect x="1089.1" y="213" width="13.9" height="15.0" fill="rgb(243,104,50)" rx="2" ry="2" />
<text  x="1092.06" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (7 samples, 2.06%)</title><rect x="695.7" y="165" width="24.4" height="15.0" fill="rgb(210,197,52)" rx="2" ry="2" />
<text  x="698.72" y="175.5" >s..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.29%)</title><rect x="741.0" y="197" width="3.5" height="15.0" fill="rgb(233,47,20)" rx="2" ry="2" />
<text  x="743.97" y="207.5" ></text>
</g>
<g >
<title>SimpleNetworkGenerator::generateNetworkOfSize (31 samples, 9.14%)</title><rect x="1082.1" y="389" width="107.9" height="15.0" fill="rgb(231,14,14)" rx="2" ry="2" />
<text  x="1085.09" y="399.5" >SimpleNetwork..</text>
</g>
<g >
<title>std::vector&lt;PageId, (6 samples, 1.77%)</title><rect x="69.2" y="245" width="20.9" height="15.0" fill="rgb(224,66,27)" rx="2" ry="2" />
<text  x="72.17" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (4 samples, 1.18%)</title><rect x="48.3" y="181" width="13.9" height="15.0" fill="rgb(246,214,37)" rx="2" ry="2" />
<text  x="51.29" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="37.8" y="229" width="3.5" height="15.0" fill="rgb(250,45,32)" rx="2" ry="2" />
<text  x="40.85" y="239.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.29%)</title><rect x="741.0" y="213" width="3.5" height="15.0" fill="rgb(237,201,16)" rx="2" ry="2" />
<text  x="743.97" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (3 samples, 0.88%)</title><rect x="48.3" y="149" width="10.4" height="15.0" fill="rgb(206,16,28)" rx="2" ry="2" />
<text  x="51.29" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (9 samples, 2.65%)</title><rect x="751.4" y="325" width="31.3" height="15.0" fill="rgb(253,222,42)" rx="2" ry="2" />
<text  x="754.42" y="335.5" >st..</text>
</g>
<g >
<title>std::get&lt;0ul, (1 samples, 0.29%)</title><rect x="58.7" y="133" width="3.5" height="15.0" fill="rgb(229,218,12)" rx="2" ry="2" />
<text  x="61.73" y="143.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.59%)</title><rect x="382.4" y="245" width="7.0" height="15.0" fill="rgb(229,170,5)" rx="2" ry="2" />
<text  x="385.45" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1078.6" y="181" width="3.5" height="15.0" fill="rgb(229,168,13)" rx="2" ry="2" />
<text  x="1081.61" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (29 samples, 8.55%)</title><rect x="556.5" y="181" width="100.9" height="15.0" fill="rgb(252,135,27)" rx="2" ry="2" />
<text  x="559.49" y="191.5" >std::__detai..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (3 samples, 0.88%)</title><rect x="580.9" y="165" width="10.4" height="15.0" fill="rgb(216,93,52)" rx="2" ry="2" />
<text  x="583.86" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.29%)</title><rect x="278.0" y="197" width="3.5" height="15.0" fill="rgb(231,128,19)" rx="2" ry="2" />
<text  x="281.02" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.29%)</title><rect x="278.0" y="213" width="3.5" height="15.0" fill="rgb(217,156,36)" rx="2" ry="2" />
<text  x="281.02" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.29%)</title><rect x="737.5" y="149" width="3.5" height="15.0" fill="rgb(215,60,53)" rx="2" ry="2" />
<text  x="740.49" y="159.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;PageId*&gt;, (2 samples, 0.59%)</title><rect x="83.1" y="165" width="7.0" height="15.0" fill="rgb(205,94,45)" rx="2" ry="2" />
<text  x="86.10" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (8 samples, 2.36%)</title><rect x="514.7" y="181" width="27.9" height="15.0" fill="rgb(226,64,32)" rx="2" ry="2" />
<text  x="517.72" y="191.5" >s..</text>
</g>
<g >
<title>std::vector&lt;Page, (5 samples, 1.47%)</title><rect x="1089.1" y="357" width="17.4" height="15.0" fill="rgb(246,141,4)" rx="2" ry="2" />
<text  x="1092.06" y="367.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.59%)</title><rect x="69.2" y="181" width="6.9" height="15.0" fill="rgb(206,31,44)" rx="2" ry="2" />
<text  x="72.17" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (4 samples, 1.18%)</title><rect x="737.5" y="261" width="13.9" height="15.0" fill="rgb(211,20,53)" rx="2" ry="2" />
<text  x="740.49" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 0.29%)</title><rect x="737.5" y="229" width="3.5" height="15.0" fill="rgb(246,121,28)" rx="2" ry="2" />
<text  x="740.49" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.29%)</title><rect x="723.6" y="213" width="3.5" height="15.0" fill="rgb(229,92,20)" rx="2" ry="2" />
<text  x="726.57" y="223.5" ></text>
</g>
<g >
<title>PageId::~PageId (2 samples, 0.59%)</title><rect x="1075.1" y="197" width="7.0" height="15.0" fill="rgb(249,111,36)" rx="2" ry="2" />
<text  x="1078.13" y="207.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.29%)</title><rect x="741.0" y="165" width="3.5" height="15.0" fill="rgb(220,38,53)" rx="2" ry="2" />
<text  x="743.97" y="175.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.29%)</title><rect x="741.0" y="69" width="3.5" height="15.0" fill="rgb(229,25,47)" rx="2" ry="2" />
<text  x="743.97" y="79.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (213 samples, 62.83%)</title><rect x="10.0" y="309" width="741.4" height="15.0" fill="rgb(233,30,0)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (5 samples, 1.47%)</title><rect x="1089.1" y="245" width="17.4" height="15.0" fill="rgb(227,125,45)" rx="2" ry="2" />
<text  x="1092.06" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="741.0" y="101" width="3.5" height="15.0" fill="rgb(245,180,28)" rx="2" ry="2" />
<text  x="743.97" y="111.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="76.1" y="165" width="7.0" height="15.0" fill="rgb(218,150,31)" rx="2" ry="2" />
<text  x="79.14" y="175.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.29%)</title><rect x="1148.2" y="261" width="3.5" height="15.0" fill="rgb(209,82,31)" rx="2" ry="2" />
<text  x="1151.23" y="271.5" ></text>
</g>
<g >
<title>PageId::PageId (3 samples, 0.88%)</title><rect x="17.0" y="229" width="10.4" height="15.0" fill="rgb(209,185,10)" rx="2" ry="2" />
<text  x="19.96" y="239.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.29%)</title><rect x="741.0" y="133" width="3.5" height="15.0" fill="rgb(231,39,52)" rx="2" ry="2" />
<text  x="743.97" y="143.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (12 samples, 3.54%)</title><rect x="1106.5" y="373" width="41.7" height="15.0" fill="rgb(245,144,4)" rx="2" ry="2" />
<text  x="1109.46" y="383.5" >Net..</text>
</g>
<g >
<title>std::operator==&lt;PageId*&gt; (1 samples, 0.29%)</title><rect x="1155.2" y="245" width="3.5" height="15.0" fill="rgb(207,58,39)" rx="2" ry="2" />
<text  x="1158.19" y="255.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;PageId*&gt;, (3 samples, 0.88%)</title><rect x="1148.2" y="293" width="10.5" height="15.0" fill="rgb(241,84,46)" rx="2" ry="2" />
<text  x="1151.23" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.88%)</title><rect x="1092.5" y="197" width="10.5" height="15.0" fill="rgb(245,64,25)" rx="2" ry="2" />
<text  x="1095.54" y="207.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.29%)</title><rect x="1186.5" y="357" width="3.5" height="15.0" fill="rgb(211,47,38)" rx="2" ry="2" />
<text  x="1189.52" y="367.5" ></text>
</g>
<g >
<title>PageId::operator== (18 samples, 5.31%)</title><rect x="594.8" y="149" width="62.6" height="15.0" fill="rgb(208,47,43)" rx="2" ry="2" />
<text  x="597.78" y="159.5" >PageId..</text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.29%)</title><rect x="1179.6" y="277" width="3.4" height="15.0" fill="rgb(253,212,38)" rx="2" ry="2" />
<text  x="1182.56" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.29%)</title><rect x="1092.5" y="181" width="3.5" height="15.0" fill="rgb(239,64,42)" rx="2" ry="2" />
<text  x="1095.54" y="191.5" ></text>
</g>
<g >
<title>Page::getId (3 samples, 0.88%)</title><rect x="17.0" y="245" width="10.4" height="15.0" fill="rgb(237,168,11)" rx="2" ry="2" />
<text  x="19.96" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;PageId*&gt;, (3 samples, 0.88%)</title><rect x="1148.2" y="309" width="10.5" height="15.0" fill="rgb(227,182,3)" rx="2" ry="2" />
<text  x="1151.23" y="319.5" ></text>
</g>
<g >
<title>std::__addressof&lt;PageId&gt; (1 samples, 0.29%)</title><rect x="1103.0" y="229" width="3.5" height="15.0" fill="rgb(230,167,13)" rx="2" ry="2" />
<text  x="1105.98" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.29%)</title><rect x="747.9" y="53" width="3.5" height="15.0" fill="rgb(219,17,18)" rx="2" ry="2" />
<text  x="750.94" y="63.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.59%)</title><rect x="1096.0" y="149" width="7.0" height="15.0" fill="rgb(210,217,19)" rx="2" ry="2" />
<text  x="1099.02" y="159.5" ></text>
</g>
<g >
<title>PageId::~PageId (4 samples, 1.18%)</title><rect x="382.4" y="261" width="14.0" height="15.0" fill="rgb(242,130,41)" rx="2" ry="2" />
<text  x="385.45" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.29%)</title><rect x="44.8" y="181" width="3.5" height="15.0" fill="rgb(226,202,49)" rx="2" ry="2" />
<text  x="47.81" y="191.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (54 samples, 15.93%)</title><rect x="90.1" y="213" width="187.9" height="15.0" fill="rgb(211,210,54)" rx="2" ry="2" />
<text  x="93.06" y="223.5" >__pthread_cond_wait</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.29%)</title><rect x="62.2" y="181" width="3.5" height="15.0" fill="rgb(238,217,14)" rx="2" ry="2" />
<text  x="65.21" y="191.5" ></text>
</g>
<g >
<title>Network::~Network (2 samples, 0.59%)</title><rect x="1075.1" y="389" width="7.0" height="15.0" fill="rgb(252,181,27)" rx="2" ry="2" />
<text  x="1078.13" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="30.9" y="213" width="3.5" height="15.0" fill="rgb(244,106,35)" rx="2" ry="2" />
<text  x="33.88" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="587.8" y="133" width="3.5" height="15.0" fill="rgb(217,69,5)" rx="2" ry="2" />
<text  x="590.82" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.29%)</title><rect x="741.0" y="229" width="3.5" height="15.0" fill="rgb(232,70,13)" rx="2" ry="2" />
<text  x="743.97" y="239.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (213 samples, 62.83%)</title><rect x="10.0" y="277" width="741.4" height="15.0" fill="rgb(236,129,41)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>PageIdHash::operator() (11 samples, 3.24%)</title><rect x="685.3" y="213" width="38.3" height="15.0" fill="rgb(231,57,1)" rx="2" ry="2" />
<text  x="688.28" y="223.5" >Pag..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;PageId*, (2 samples, 0.59%)</title><rect x="396.4" y="261" width="6.9" height="15.0" fill="rgb(247,157,21)" rx="2" ry="2" />
<text  x="399.37" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 2.06%)</title><rect x="633.1" y="101" width="24.3" height="15.0" fill="rgb(240,202,22)" rx="2" ry="2" />
<text  x="636.07" y="111.5" >_..</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="1179.6" y="325" width="6.9" height="15.0" fill="rgb(234,177,30)" rx="2" ry="2" />
<text  x="1182.56" y="335.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (54 samples, 15.93%)</title><rect x="90.1" y="245" width="187.9" height="15.0" fill="rgb(235,192,17)" rx="2" ry="2" />
<text  x="93.06" y="255.5" >std::condition_variable:..</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.29%)</title><rect x="23.9" y="165" width="3.5" height="15.0" fill="rgb(211,67,42)" rx="2" ry="2" />
<text  x="26.92" y="175.5" ></text>
</g>
<g >
<title>_IO_old_init (1 samples, 0.29%)</title><rect x="1123.9" y="277" width="3.4" height="15.0" fill="rgb(236,81,47)" rx="2" ry="2" />
<text  x="1126.86" y="287.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (54 samples, 15.93%)</title><rect x="90.1" y="229" width="187.9" height="15.0" fill="rgb(246,1,39)" rx="2" ry="2" />
<text  x="93.06" y="239.5" >std::condition_variable:..</text>
</g>
<g >
<title>main (126 samples, 37.17%)</title><rect x="751.4" y="421" width="438.6" height="15.0" fill="rgb(222,213,4)" rx="2" ry="2" />
<text  x="754.42" y="431.5" >main</text>
</g>
<g >
<title>Network::addPage (5 samples, 1.47%)</title><rect x="1089.1" y="373" width="17.4" height="15.0" fill="rgb(240,158,42)" rx="2" ry="2" />
<text  x="1092.06" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (5 samples, 1.47%)</title><rect x="664.4" y="213" width="17.4" height="15.0" fill="rgb(233,158,51)" rx="2" ry="2" />
<text  x="667.40" y="223.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (2 samples, 0.59%)</title><rect x="83.1" y="133" width="7.0" height="15.0" fill="rgb(239,23,42)" rx="2" ry="2" />
<text  x="86.10" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (28 samples, 8.26%)</title><rect x="285.0" y="245" width="97.4" height="15.0" fill="rgb(249,3,27)" rx="2" ry="2" />
<text  x="287.99" y="255.5" >std::__cxx1..</text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (8 samples, 2.36%)</title><rect x="1106.5" y="357" width="27.8" height="15.0" fill="rgb(245,67,24)" rx="2" ry="2" />
<text  x="1109.46" y="367.5" >N..</text>
</g>
<g >
<title>PageId::PageId (4 samples, 1.18%)</title><rect x="1158.7" y="357" width="13.9" height="15.0" fill="rgb(249,204,0)" rx="2" ry="2" />
<text  x="1161.67" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 1.47%)</title><rect x="601.7" y="117" width="17.4" height="15.0" fill="rgb(217,30,17)" rx="2" ry="2" />
<text  x="604.74" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;PageId*, (1 samples, 0.29%)</title><rect x="403.3" y="245" width="3.5" height="15.0" fill="rgb(206,75,47)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 0.29%)</title><rect x="278.0" y="245" width="3.5" height="15.0" fill="rgb(236,180,28)" rx="2" ry="2" />
<text  x="281.02" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (4 samples, 1.18%)</title><rect x="667.9" y="197" width="13.9" height="15.0" fill="rgb(213,69,51)" rx="2" ry="2" />
<text  x="670.88" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (5 samples, 1.47%)</title><rect x="525.2" y="165" width="17.4" height="15.0" fill="rgb(218,50,25)" rx="2" ry="2" />
<text  x="528.16" y="175.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (213 samples, 62.83%)</title><rect x="10.0" y="357" width="741.4" height="15.0" fill="rgb(238,88,17)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>PageId::~PageId (2 samples, 0.59%)</title><rect x="34.4" y="245" width="6.9" height="15.0" fill="rgb(232,153,41)" rx="2" ry="2" />
<text  x="37.37" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.29%)</title><rect x="278.0" y="229" width="3.5" height="15.0" fill="rgb(208,31,37)" rx="2" ry="2" />
<text  x="281.02" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 1.77%)</title><rect x="41.3" y="197" width="20.9" height="15.0" fill="rgb(240,166,33)" rx="2" ry="2" />
<text  x="44.33" y="207.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (21 samples, 6.19%)</title><rect x="17.0" y="261" width="73.1" height="15.0" fill="rgb(236,154,26)" rx="2" ry="2" />
<text  x="19.96" y="271.5" >MultiThr..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.29%)</title><rect x="737.5" y="165" width="3.5" height="15.0" fill="rgb(208,33,26)" rx="2" ry="2" />
<text  x="740.49" y="175.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (55 samples, 16.22%)</title><rect x="90.1" y="261" width="191.4" height="15.0" fill="rgb(215,25,7)" rx="2" ry="2" />
<text  x="93.06" y="271.5" >MultiThreadedPageRankComp..</text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.59%)</title><rect x="83.1" y="117" width="7.0" height="15.0" fill="rgb(222,198,4)" rx="2" ry="2" />
<text  x="86.10" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 1.18%)</title><rect x="1158.7" y="341" width="13.9" height="15.0" fill="rgb(235,192,24)" rx="2" ry="2" />
<text  x="1161.67" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;PageId*&gt;, (2 samples, 0.59%)</title><rect x="83.1" y="149" width="7.0" height="15.0" fill="rgb(215,123,32)" rx="2" ry="2" />
<text  x="86.10" y="159.5" ></text>
</g>
<g >
<title>Page::~Page (4 samples, 1.18%)</title><rect x="1172.6" y="373" width="13.9" height="15.0" fill="rgb(217,29,25)" rx="2" ry="2" />
<text  x="1175.60" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (5 samples, 1.47%)</title><rect x="765.3" y="181" width="17.4" height="15.0" fill="rgb(214,135,39)" rx="2" ry="2" />
<text  x="768.34" y="191.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.29%)</title><rect x="1113.4" y="309" width="3.5" height="15.0" fill="rgb(217,67,52)" rx="2" ry="2" />
<text  x="1116.42" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.29%)</title><rect x="44.8" y="165" width="3.5" height="15.0" fill="rgb(220,10,52)" rx="2" ry="2" />
<text  x="47.81" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (34 samples, 10.03%)</title><rect x="546.0" y="197" width="118.4" height="15.0" fill="rgb(209,186,54)" rx="2" ry="2" />
<text  x="549.05" y="207.5" >std::__detail:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (5 samples, 1.47%)</title><rect x="1089.1" y="325" width="17.4" height="15.0" fill="rgb(216,178,50)" rx="2" ry="2" />
<text  x="1092.06" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.29%)</title><rect x="741.0" y="117" width="3.5" height="15.0" fill="rgb(245,156,43)" rx="2" ry="2" />
<text  x="743.97" y="127.5" ></text>
</g>
<g >
<title>tcache_put (1 samples, 0.29%)</title><rect x="385.9" y="229" width="3.5" height="15.0" fill="rgb(235,200,9)" rx="2" ry="2" />
<text  x="388.93" y="239.5" ></text>
</g>
<g >
<title>malloc_consolidate (5 samples, 1.47%)</title><rect x="765.3" y="133" width="17.4" height="15.0" fill="rgb(249,200,16)" rx="2" ry="2" />
<text  x="768.34" y="143.5" ></text>
</g>
<g >
<title>std::operator!=&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="1151.7" y="261" width="7.0" height="15.0" fill="rgb(238,209,46)" rx="2" ry="2" />
<text  x="1154.71" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;PageId*&gt;, (2 samples, 0.59%)</title><rect x="83.1" y="181" width="7.0" height="15.0" fill="rgb(218,14,49)" rx="2" ry="2" />
<text  x="86.10" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;PageId*, (3 samples, 0.88%)</title><rect x="1148.2" y="325" width="10.5" height="15.0" fill="rgb(212,55,36)" rx="2" ry="2" />
<text  x="1151.23" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.59%)</title><rect x="744.5" y="85" width="6.9" height="15.0" fill="rgb(246,213,18)" rx="2" ry="2" />
<text  x="747.45" y="95.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.29%)</title><rect x="379.0" y="213" width="3.4" height="15.0" fill="rgb(225,68,15)" rx="2" ry="2" />
<text  x="381.97" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="278.0" y="181" width="3.5" height="15.0" fill="rgb(223,33,31)" rx="2" ry="2" />
<text  x="281.02" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (9 samples, 2.65%)</title><rect x="751.4" y="245" width="31.3" height="15.0" fill="rgb(220,151,46)" rx="2" ry="2" />
<text  x="754.42" y="255.5" >st..</text>
</g>
<g >
<title>std::thread::join() (84 samples, 24.78%)</title><rect x="782.7" y="373" width="292.4" height="15.0" fill="rgb(220,4,16)" rx="2" ry="2" />
<text  x="785.74" y="383.5" >std::thread::join()</text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.59%)</title><rect x="1096.0" y="165" width="7.0" height="15.0" fill="rgb(252,205,10)" rx="2" ry="2" />
<text  x="1099.02" y="175.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (213 samples, 62.83%)</title><rect x="10.0" y="325" width="741.4" height="15.0" fill="rgb(224,158,54)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (3 samples, 0.88%)</title><rect x="48.3" y="117" width="10.4" height="15.0" fill="rgb(227,4,37)" rx="2" ry="2" />
<text  x="51.29" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (2 samples, 0.59%)</title><rect x="1179.6" y="341" width="6.9" height="15.0" fill="rgb(224,128,35)" rx="2" ry="2" />
<text  x="1182.56" y="351.5" ></text>
</g>
<g >
<title>PageId::PageId (29 samples, 8.55%)</title><rect x="281.5" y="261" width="100.9" height="15.0" fill="rgb(252,64,7)" rx="2" ry="2" />
<text  x="284.50" y="271.5" >PageId::PageId</text>
</g>
<g >
<title>operator (1 samples, 0.29%)</title><rect x="392.9" y="245" width="3.5" height="15.0" fill="rgb(210,122,46)" rx="2" ry="2" />
<text  x="395.89" y="255.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.29%)</title><rect x="1127.3" y="293" width="3.5" height="15.0" fill="rgb(248,59,16)" rx="2" ry="2" />
<text  x="1130.35" y="303.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (3 samples, 0.88%)</title><rect x="1137.8" y="325" width="10.4" height="15.0" fill="rgb(226,132,32)" rx="2" ry="2" />
<text  x="1140.79" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.59%)</title><rect x="744.5" y="181" width="6.9" height="15.0" fill="rgb(241,74,20)" rx="2" ry="2" />
<text  x="747.45" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (5 samples, 1.47%)</title><rect x="1089.1" y="293" width="17.4" height="15.0" fill="rgb(224,96,45)" rx="2" ry="2" />
<text  x="1092.06" y="303.5" ></text>
</g>
<g >
<title>PageId::~PageId (4 samples, 1.18%)</title><rect x="751.4" y="149" width="13.9" height="15.0" fill="rgb(249,134,0)" rx="2" ry="2" />
<text  x="754.42" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1130.8" y="261" width="3.5" height="15.0" fill="rgb(253,134,21)" rx="2" ry="2" />
<text  x="1133.83" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 0.29%)</title><rect x="737.5" y="213" width="3.5" height="15.0" fill="rgb(246,114,7)" rx="2" ry="2" />
<text  x="740.49" y="223.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 0.59%)</title><rect x="744.5" y="149" width="6.9" height="15.0" fill="rgb(215,178,18)" rx="2" ry="2" />
<text  x="747.45" y="159.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 0.29%)</title><rect x="737.5" y="197" width="3.5" height="15.0" fill="rgb(232,161,49)" rx="2" ry="2" />
<text  x="740.49" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.29%)</title><rect x="737.5" y="101" width="3.5" height="15.0" fill="rgb(247,208,9)" rx="2" ry="2" />
<text  x="740.49" y="111.5" ></text>
</g>
<g >
<title>std::__addressof&lt;PageId&gt; (1 samples, 0.29%)</title><rect x="1183.0" y="293" width="3.5" height="15.0" fill="rgb(230,38,5)" rx="2" ry="2" />
<text  x="1186.04" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="58.7" y="149" width="3.5" height="15.0" fill="rgb(236,130,44)" rx="2" ry="2" />
<text  x="61.73" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.29%)</title><rect x="664.4" y="197" width="3.5" height="15.0" fill="rgb(242,96,47)" rx="2" ry="2" />
<text  x="667.40" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (2 samples, 0.59%)</title><rect x="1075.1" y="309" width="7.0" height="15.0" fill="rgb(240,139,38)" rx="2" ry="2" />
<text  x="1078.13" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="734.0" y="197" width="3.5" height="15.0" fill="rgb(251,69,33)" rx="2" ry="2" />
<text  x="737.01" y="207.5" ></text>
</g>
<g >
<title>Page::Page (5 samples, 1.47%)</title><rect x="1089.1" y="309" width="17.4" height="15.0" fill="rgb(240,150,11)" rx="2" ry="2" />
<text  x="1092.06" y="319.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.29%)</title><rect x="1144.7" y="277" width="3.5" height="15.0" fill="rgb(218,88,47)" rx="2" ry="2" />
<text  x="1147.75" y="287.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.29%)</title><rect x="389.4" y="245" width="3.5" height="15.0" fill="rgb(209,222,29)" rx="2" ry="2" />
<text  x="392.41" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.29%)</title><rect x="660.9" y="181" width="3.5" height="15.0" fill="rgb(220,93,8)" rx="2" ry="2" />
<text  x="663.91" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.29%)</title><rect x="20.4" y="197" width="3.5" height="15.0" fill="rgb(251,140,25)" rx="2" ry="2" />
<text  x="23.44" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (5 samples, 1.47%)</title><rect x="765.3" y="165" width="17.4" height="15.0" fill="rgb(244,210,42)" rx="2" ry="2" />
<text  x="768.34" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.88%)</title><rect x="17.0" y="213" width="10.4" height="15.0" fill="rgb(212,94,18)" rx="2" ry="2" />
<text  x="19.96" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (8 samples, 2.36%)</title><rect x="41.3" y="229" width="27.9" height="15.0" fill="rgb(213,182,12)" rx="2" ry="2" />
<text  x="44.33" y="239.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.29%)</title><rect x="62.2" y="197" width="3.5" height="15.0" fill="rgb(242,23,14)" rx="2" ry="2" />
<text  x="65.21" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (75 samples, 22.12%)</title><rect x="420.7" y="229" width="261.1" height="15.0" fill="rgb(223,110,38)" rx="2" ry="2" />
<text  x="423.74" y="239.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 2.06%)</title><rect x="41.3" y="213" width="24.4" height="15.0" fill="rgb(246,76,52)" rx="2" ry="2" />
<text  x="44.33" y="223.5" >s..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (2 samples, 0.59%)</title><rect x="1075.1" y="325" width="7.0" height="15.0" fill="rgb(211,72,38)" rx="2" ry="2" />
<text  x="1078.13" y="335.5" ></text>
</g>
<g >
<title>Page::getId (4 samples, 1.18%)</title><rect x="1158.7" y="373" width="13.9" height="15.0" fill="rgb(213,227,28)" rx="2" ry="2" />
<text  x="1161.67" y="383.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.29%)</title><rect x="1144.7" y="293" width="3.5" height="15.0" fill="rgb(225,200,16)" rx="2" ry="2" />
<text  x="1147.75" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.29%)</title><rect x="737.5" y="85" width="3.5" height="15.0" fill="rgb(209,191,53)" rx="2" ry="2" />
<text  x="740.49" y="95.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (213 samples, 62.83%)</title><rect x="10.0" y="341" width="741.4" height="15.0" fill="rgb(244,5,36)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::vector&lt;PageId, (3 samples, 0.88%)</title><rect x="1148.2" y="341" width="10.5" height="15.0" fill="rgb(233,4,31)" rx="2" ry="2" />
<text  x="1151.23" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.88%)</title><rect x="368.5" y="229" width="10.5" height="15.0" fill="rgb(222,72,20)" rx="2" ry="2" />
<text  x="371.53" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="1075.1" y="245" width="7.0" height="15.0" fill="rgb(232,44,54)" rx="2" ry="2" />
<text  x="1078.13" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (2 samples, 0.59%)</title><rect x="1075.1" y="261" width="7.0" height="15.0" fill="rgb(208,57,9)" rx="2" ry="2" />
<text  x="1078.13" y="271.5" ></text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex (84 samples, 24.78%)</title><rect x="782.7" y="357" width="292.4" height="15.0" fill="rgb(208,71,27)" rx="2" ry="2" />
<text  x="785.74" y="367.5" >__GI___pthread_timedjoin_ex</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (2 samples, 0.59%)</title><rect x="584.3" y="149" width="7.0" height="15.0" fill="rgb(243,56,36)" rx="2" ry="2" />
<text  x="587.34" y="159.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (4 samples, 1.18%)</title><rect x="751.4" y="213" width="13.9" height="15.0" fill="rgb(235,70,24)" rx="2" ry="2" />
<text  x="754.42" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (94 samples, 27.73%)</title><rect x="410.3" y="245" width="327.2" height="15.0" fill="rgb(207,207,16)" rx="2" ry="2" />
<text  x="413.29" y="255.5" >std::__detail::_Map_base&lt;PageId,</text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;PageId*, (1 samples, 0.29%)</title><rect x="403.3" y="261" width="3.5" height="15.0" fill="rgb(233,107,3)" rx="2" ry="2" />
<text  x="406.33" y="271.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (2 samples, 0.59%)</title><rect x="1123.9" y="309" width="6.9" height="15.0" fill="rgb(216,192,47)" rx="2" ry="2" />
<text  x="1126.86" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (95 samples, 28.02%)</title><rect x="406.8" y="261" width="330.7" height="15.0" fill="rgb(249,49,30)" rx="2" ry="2" />
<text  x="409.81" y="271.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.29%)</title><rect x="737.5" y="117" width="3.5" height="15.0" fill="rgb(253,158,37)" rx="2" ry="2" />
<text  x="740.49" y="127.5" ></text>
</g>
<g >
<title>_IO_no_init (1 samples, 0.29%)</title><rect x="1123.9" y="293" width="3.4" height="15.0" fill="rgb(205,150,18)" rx="2" ry="2" />
<text  x="1126.86" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (9 samples, 2.65%)</title><rect x="751.4" y="293" width="31.3" height="15.0" fill="rgb(245,215,48)" rx="2" ry="2" />
<text  x="754.42" y="303.5" >st..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (11 samples, 3.24%)</title><rect x="619.1" y="117" width="38.3" height="15.0" fill="rgb(249,84,12)" rx="2" ry="2" />
<text  x="622.14" y="127.5" >std..</text>
</g>
<g >
<title>operator (1 samples, 0.29%)</title><rect x="23.9" y="197" width="3.5" height="15.0" fill="rgb(226,104,52)" rx="2" ry="2" />
<text  x="26.92" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (2 samples, 0.59%)</title><rect x="1075.1" y="341" width="7.0" height="15.0" fill="rgb(232,160,32)" rx="2" ry="2" />
<text  x="1078.13" y="351.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (4 samples, 1.18%)</title><rect x="751.4" y="197" width="13.9" height="15.0" fill="rgb(212,141,45)" rx="2" ry="2" />
<text  x="754.42" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1113.4" y="325" width="3.5" height="15.0" fill="rgb(253,108,15)" rx="2" ry="2" />
<text  x="1116.42" y="335.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (2 samples, 0.59%)</title><rect x="744.5" y="117" width="6.9" height="15.0" fill="rgb(235,189,27)" rx="2" ry="2" />
<text  x="747.45" y="127.5" ></text>
</g>
<g >
<title>Page::~Page (1 samples, 0.29%)</title><rect x="737.5" y="181" width="3.5" height="15.0" fill="rgb(242,154,17)" rx="2" ry="2" />
<text  x="740.49" y="191.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.29%)</title><rect x="1186.5" y="373" width="3.5" height="15.0" fill="rgb(219,125,28)" rx="2" ry="2" />
<text  x="1189.52" y="383.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.29%)</title><rect x="278.0" y="117" width="3.5" height="15.0" fill="rgb(212,182,50)" rx="2" ry="2" />
<text  x="281.02" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1176.1" y="357" width="3.5" height="15.0" fill="rgb(251,216,10)" rx="2" ry="2" />
<text  x="1179.08" y="367.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.29%)</title><rect x="737.5" y="69" width="3.5" height="15.0" fill="rgb(248,73,18)" rx="2" ry="2" />
<text  x="740.49" y="79.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.29%)</title><rect x="79.6" y="149" width="3.5" height="15.0" fill="rgb(227,183,46)" rx="2" ry="2" />
<text  x="82.62" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.59%)</title><rect x="1075.1" y="277" width="7.0" height="15.0" fill="rgb(214,106,11)" rx="2" ry="2" />
<text  x="1078.13" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="278.0" y="101" width="3.5" height="15.0" fill="rgb(247,78,17)" rx="2" ry="2" />
<text  x="281.02" y="111.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.29%)</title><rect x="1075.1" y="181" width="3.5" height="15.0" fill="rgb(216,111,36)" rx="2" ry="2" />
<text  x="1078.13" y="191.5" ></text>
</g>
<g >
<title>?? (213 samples, 62.83%)</title><rect x="10.0" y="389" width="741.4" height="15.0" fill="rgb(219,108,45)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >??</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (3 samples, 0.88%)</title><rect x="727.1" y="229" width="10.4" height="15.0" fill="rgb(209,228,21)" rx="2" ry="2" />
<text  x="730.05" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="76.1" y="181" width="7.0" height="15.0" fill="rgb(235,3,14)" rx="2" ry="2" />
<text  x="79.14" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="278.0" y="165" width="3.5" height="15.0" fill="rgb(223,196,17)" rx="2" ry="2" />
<text  x="281.02" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.59%)</title><rect x="518.2" y="165" width="7.0" height="15.0" fill="rgb(253,213,31)" rx="2" ry="2" />
<text  x="521.20" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;PageId*&gt;, (3 samples, 0.88%)</title><rect x="1148.2" y="277" width="10.5" height="15.0" fill="rgb(221,118,18)" rx="2" ry="2" />
<text  x="1151.23" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (18 samples, 5.31%)</title><rect x="594.8" y="133" width="62.6" height="15.0" fill="rgb(211,57,4)" rx="2" ry="2" />
<text  x="597.78" y="143.5" >std::o..</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (19 samples, 5.60%)</title><rect x="591.3" y="165" width="66.1" height="15.0" fill="rgb(251,215,31)" rx="2" ry="2" />
<text  x="594.30" y="175.5" >std::eq..</text>
</g>
<g >
<title>PageId::operator= (1 samples, 0.29%)</title><rect x="1134.3" y="341" width="3.5" height="15.0" fill="rgb(239,23,17)" rx="2" ry="2" />
<text  x="1137.31" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (9 samples, 2.65%)</title><rect x="751.4" y="261" width="31.3" height="15.0" fill="rgb(224,110,6)" rx="2" ry="2" />
<text  x="754.42" y="271.5" >__..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, (1 samples, 0.29%)</title><rect x="723.6" y="197" width="3.5" height="15.0" fill="rgb(241,116,49)" rx="2" ry="2" />
<text  x="726.57" y="207.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (1 samples, 0.29%)</title><rect x="1113.4" y="293" width="3.5" height="15.0" fill="rgb(224,81,18)" rx="2" ry="2" />
<text  x="1116.42" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1141.3" y="293" width="3.4" height="15.0" fill="rgb(218,168,2)" rx="2" ry="2" />
<text  x="1144.27" y="303.5" ></text>
</g>
<g >
<title>std:: (5 samples, 1.47%)</title><rect x="1116.9" y="341" width="17.4" height="15.0" fill="rgb(244,99,47)" rx="2" ry="2" />
<text  x="1119.90" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, (1 samples, 0.29%)</title><rect x="664.4" y="181" width="3.5" height="15.0" fill="rgb(230,174,38)" rx="2" ry="2" />
<text  x="667.40" y="191.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (93 samples, 27.43%)</title><rect x="751.4" y="389" width="323.7" height="15.0" fill="rgb(253,104,31)" rx="2" ry="2" />
<text  x="754.42" y="399.5" >MultiThreadedPageRankComputer::computeForNe..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1130.8" y="293" width="3.5" height="15.0" fill="rgb(224,128,6)" rx="2" ry="2" />
<text  x="1133.83" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (1 samples, 0.29%)</title><rect x="65.7" y="149" width="3.5" height="15.0" fill="rgb(239,66,2)" rx="2" ry="2" />
<text  x="68.69" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.29%)</title><rect x="657.4" y="181" width="3.5" height="15.0" fill="rgb(227,0,9)" rx="2" ry="2" />
<text  x="660.43" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="278.0" y="149" width="3.5" height="15.0" fill="rgb(206,221,33)" rx="2" ry="2" />
<text  x="281.02" y="159.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (11 samples, 3.24%)</title><rect x="685.3" y="197" width="38.3" height="15.0" fill="rgb(213,135,14)" rx="2" ry="2" />
<text  x="688.28" y="207.5" >std..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (5 samples, 1.47%)</title><rect x="1089.1" y="277" width="17.4" height="15.0" fill="rgb(207,160,8)" rx="2" ry="2" />
<text  x="1092.06" y="287.5" ></text>
</g>
<g >
<title>operator (4 samples, 1.18%)</title><rect x="354.6" y="229" width="13.9" height="15.0" fill="rgb(242,223,10)" rx="2" ry="2" />
<text  x="357.60" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (2 samples, 0.59%)</title><rect x="69.2" y="197" width="6.9" height="15.0" fill="rgb(238,184,54)" rx="2" ry="2" />
<text  x="72.17" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="720.1" y="181" width="3.5" height="15.0" fill="rgb(208,197,5)" rx="2" ry="2" />
<text  x="723.09" y="191.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.59%)</title><rect x="1096.0" y="181" width="7.0" height="15.0" fill="rgb(228,71,23)" rx="2" ry="2" />
<text  x="1099.02" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (5 samples, 1.47%)</title><rect x="1089.1" y="341" width="17.4" height="15.0" fill="rgb(213,79,36)" rx="2" ry="2" />
<text  x="1092.06" y="351.5" ></text>
</g>
<g >
<title>Page::Page (3 samples, 0.88%)</title><rect x="1106.5" y="341" width="10.4" height="15.0" fill="rgb(240,80,33)" rx="2" ry="2" />
<text  x="1109.46" y="351.5" ></text>
</g>
<g >
<title>start_thread (213 samples, 62.83%)</title><rect x="10.0" y="405" width="741.4" height="15.0" fill="rgb(227,222,25)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >start_thread</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.88%)</title><rect x="1137.8" y="309" width="10.4" height="15.0" fill="rgb(220,201,51)" rx="2" ry="2" />
<text  x="1140.79" y="319.5" ></text>
</g>
<g >
<title>Page::~Page (2 samples, 0.59%)</title><rect x="1075.1" y="293" width="7.0" height="15.0" fill="rgb(221,15,34)" rx="2" ry="2" />
<text  x="1078.13" y="303.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.29%)</title><rect x="1109.9" y="325" width="3.5" height="15.0" fill="rgb(209,11,44)" rx="2" ry="2" />
<text  x="1112.94" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (9 samples, 2.65%)</title><rect x="751.4" y="229" width="31.3" height="15.0" fill="rgb(243,97,2)" rx="2" ry="2" />
<text  x="754.42" y="239.5" >st..</text>
</g>
<g >
<title>std::vector&lt;PageId, (3 samples, 0.88%)</title><rect x="1148.2" y="357" width="10.5" height="15.0" fill="rgb(243,90,19)" rx="2" ry="2" />
<text  x="1151.23" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (8 samples, 2.36%)</title><rect x="692.2" y="181" width="27.9" height="15.0" fill="rgb(239,97,20)" rx="2" ry="2" />
<text  x="695.24" y="191.5" >s..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 0.59%)</title><rect x="744.5" y="133" width="6.9" height="15.0" fill="rgb(222,104,5)" rx="2" ry="2" />
<text  x="747.45" y="143.5" ></text>
</g>
<g >
<title>all (339 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(242,149,11)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.29%)</title><rect x="741.0" y="85" width="3.5" height="15.0" fill="rgb(252,63,3)" rx="2" ry="2" />
<text  x="743.97" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.59%)</title><rect x="1075.1" y="373" width="7.0" height="15.0" fill="rgb(235,24,47)" rx="2" ry="2" />
<text  x="1078.13" y="383.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (5 samples, 1.47%)</title><rect x="1089.1" y="261" width="17.4" height="15.0" fill="rgb(207,150,17)" rx="2" ry="2" />
<text  x="1092.06" y="271.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.29%)</title><rect x="379.0" y="229" width="3.4" height="15.0" fill="rgb(223,80,1)" rx="2" ry="2" />
<text  x="381.97" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (2 samples, 0.59%)</title><rect x="1075.1" y="357" width="7.0" height="15.0" fill="rgb(248,48,41)" rx="2" ry="2" />
<text  x="1078.13" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (9 samples, 2.65%)</title><rect x="751.4" y="357" width="31.3" height="15.0" fill="rgb(238,89,52)" rx="2" ry="2" />
<text  x="754.42" y="367.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.59%)</title><rect x="27.4" y="229" width="7.0" height="15.0" fill="rgb(229,116,11)" rx="2" ry="2" />
<text  x="30.40" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.29%)</title><rect x="741.0" y="181" width="3.5" height="15.0" fill="rgb(216,116,39)" rx="2" ry="2" />
<text  x="743.97" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (66 samples, 19.47%)</title><rect x="434.7" y="213" width="229.7" height="15.0" fill="rgb(218,70,30)" rx="2" ry="2" />
<text  x="437.66" y="223.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.59%)</title><rect x="744.5" y="245" width="6.9" height="15.0" fill="rgb(226,26,1)" rx="2" ry="2" />
<text  x="747.45" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (5 samples, 1.47%)</title><rect x="765.3" y="197" width="17.4" height="15.0" fill="rgb(237,7,53)" rx="2" ry="2" />
<text  x="768.34" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (6 samples, 1.77%)</title><rect x="69.2" y="229" width="20.9" height="15.0" fill="rgb(247,27,53)" rx="2" ry="2" />
<text  x="72.17" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (4 samples, 1.18%)</title><rect x="48.3" y="165" width="13.9" height="15.0" fill="rgb(232,161,43)" rx="2" ry="2" />
<text  x="51.29" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (3 samples, 0.88%)</title><rect x="48.3" y="101" width="10.4" height="15.0" fill="rgb(254,51,14)" rx="2" ry="2" />
<text  x="51.29" y="111.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (4 samples, 1.18%)</title><rect x="751.4" y="181" width="13.9" height="15.0" fill="rgb(207,67,53)" rx="2" ry="2" />
<text  x="754.42" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (2 samples, 0.59%)</title><rect x="744.5" y="229" width="6.9" height="15.0" fill="rgb(207,61,16)" rx="2" ry="2" />
<text  x="747.45" y="239.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.29%)</title><rect x="34.4" y="229" width="3.4" height="15.0" fill="rgb(247,37,5)" rx="2" ry="2" />
<text  x="37.37" y="239.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (213 samples, 62.83%)</title><rect x="10.0" y="373" width="741.4" height="15.0" fill="rgb(240,86,29)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNet..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (8 samples, 2.36%)</title><rect x="41.3" y="245" width="27.9" height="15.0" fill="rgb(214,199,22)" rx="2" ry="2" />
<text  x="44.33" y="255.5" >s..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 0.59%)</title><rect x="744.5" y="165" width="6.9" height="15.0" fill="rgb(225,34,38)" rx="2" ry="2" />
<text  x="747.45" y="175.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.29%)</title><rect x="65.7" y="197" width="3.5" height="15.0" fill="rgb(225,208,36)" rx="2" ry="2" />
<text  x="68.69" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (2 samples, 0.59%)</title><rect x="744.5" y="213" width="6.9" height="15.0" fill="rgb(253,40,43)" rx="2" ry="2" />
<text  x="747.45" y="223.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (54 samples, 15.93%)</title><rect x="90.1" y="181" width="187.9" height="15.0" fill="rgb(217,105,44)" rx="2" ry="2" />
<text  x="93.06" y="191.5" >futex_wait_cancelable</text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (2 samples, 0.59%)</title><rect x="76.1" y="197" width="7.0" height="15.0" fill="rgb(211,182,20)" rx="2" ry="2" />
<text  x="79.14" y="207.5" ></text>
</g>
<g >
<title>tcache_get (2 samples, 0.59%)</title><rect x="361.6" y="197" width="6.9" height="15.0" fill="rgb(223,206,14)" rx="2" ry="2" />
<text  x="364.56" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.29%)</title><rect x="734.0" y="213" width="3.5" height="15.0" fill="rgb(236,214,44)" rx="2" ry="2" />
<text  x="737.01" y="223.5" ></text>
</g>
<g >
<title>pageRankComputationWithNumNodes (126 samples, 37.17%)</title><rect x="751.4" y="405" width="438.6" height="15.0" fill="rgb(243,110,29)" rx="2" ry="2" />
<text  x="754.42" y="415.5" >pageRankComputationWithNumNodes</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (9 samples, 2.65%)</title><rect x="751.4" y="341" width="31.3" height="15.0" fill="rgb(243,223,45)" rx="2" ry="2" />
<text  x="754.42" y="351.5" >st..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.29%)</title><rect x="23.9" y="181" width="3.5" height="15.0" fill="rgb(226,198,20)" rx="2" ry="2" />
<text  x="26.92" y="191.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 1.47%)</title><rect x="765.3" y="149" width="17.4" height="15.0" fill="rgb(228,219,28)" rx="2" ry="2" />
<text  x="768.34" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (5 samples, 1.47%)</title><rect x="765.3" y="213" width="17.4" height="15.0" fill="rgb(222,60,51)" rx="2" ry="2" />
<text  x="768.34" y="223.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.29%)</title><rect x="747.9" y="69" width="3.5" height="15.0" fill="rgb(206,85,19)" rx="2" ry="2" />
<text  x="750.94" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (4 samples, 1.18%)</title><rect x="76.1" y="213" width="14.0" height="15.0" fill="rgb(234,14,14)" rx="2" ry="2" />
<text  x="79.14" y="223.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 0.29%)</title><rect x="737.5" y="245" width="3.5" height="15.0" fill="rgb(248,77,2)" rx="2" ry="2" />
<text  x="740.49" y="255.5" ></text>
</g>
<g >
<title>Page::Page (2 samples, 0.59%)</title><rect x="744.5" y="197" width="6.9" height="15.0" fill="rgb(221,192,47)" rx="2" ry="2" />
<text  x="747.45" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (2 samples, 0.59%)</title><rect x="1075.1" y="213" width="7.0" height="15.0" fill="rgb(250,192,6)" rx="2" ry="2" />
<text  x="1078.13" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1130.8" y="277" width="3.5" height="15.0" fill="rgb(223,17,30)" rx="2" ry="2" />
<text  x="1133.83" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="1179.6" y="309" width="6.9" height="15.0" fill="rgb(217,202,36)" rx="2" ry="2" />
<text  x="1182.56" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (9 samples, 2.65%)</title><rect x="751.4" y="277" width="31.3" height="15.0" fill="rgb(247,70,21)" rx="2" ry="2" />
<text  x="754.42" y="287.5" >st..</text>
</g>
<g >
<title>__GI___libc_free (3 samples, 0.88%)</title><rect x="754.9" y="133" width="10.4" height="15.0" fill="rgb(216,146,2)" rx="2" ry="2" />
<text  x="757.90" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.29%)</title><rect x="27.4" y="213" width="3.5" height="15.0" fill="rgb(248,83,34)" rx="2" ry="2" />
<text  x="30.40" y="223.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (4 samples, 1.18%)</title><rect x="1089.1" y="229" width="13.9" height="15.0" fill="rgb(231,105,42)" rx="2" ry="2" />
<text  x="1092.06" y="239.5" ></text>
</g>
<g >
<title>Page::addLink (3 samples, 0.88%)</title><rect x="1148.2" y="373" width="10.5" height="15.0" fill="rgb(247,55,42)" rx="2" ry="2" />
<text  x="1151.23" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (3 samples, 0.88%)</title><rect x="48.3" y="133" width="10.4" height="15.0" fill="rgb(212,219,34)" rx="2" ry="2" />
<text  x="51.29" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (8 samples, 2.36%)</title><rect x="514.7" y="197" width="27.9" height="15.0" fill="rgb(207,207,19)" rx="2" ry="2" />
<text  x="517.72" y="207.5" >s..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (9 samples, 2.65%)</title><rect x="751.4" y="373" width="31.3" height="15.0" fill="rgb(211,70,54)" rx="2" ry="2" />
<text  x="754.42" y="383.5" >Mu..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 3.83%)</title><rect x="309.4" y="229" width="45.2" height="15.0" fill="rgb(251,206,41)" rx="2" ry="2" />
<text  x="312.35" y="239.5" >__me..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.29%)</title><rect x="741.0" y="149" width="3.5" height="15.0" fill="rgb(207,1,49)" rx="2" ry="2" />
<text  x="743.97" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.59%)</title><rect x="1179.6" y="357" width="6.9" height="15.0" fill="rgb(208,229,37)" rx="2" ry="2" />
<text  x="1182.56" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.29%)</title><rect x="1130.8" y="309" width="3.5" height="15.0" fill="rgb(246,192,19)" rx="2" ry="2" />
<text  x="1133.83" y="319.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (3 samples, 0.88%)</title><rect x="1137.8" y="341" width="10.4" height="15.0" fill="rgb(237,116,10)" rx="2" ry="2" />
<text  x="1140.79" y="351.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (2 samples, 0.59%)</title><rect x="1075.1" y="229" width="7.0" height="15.0" fill="rgb(253,214,19)" rx="2" ry="2" />
<text  x="1078.13" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.29%)</title><rect x="1179.6" y="293" width="3.4" height="15.0" fill="rgb(242,24,54)" rx="2" ry="2" />
<text  x="1182.56" y="303.5" ></text>
</g>
</g>
</svg>
