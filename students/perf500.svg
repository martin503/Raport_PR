<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="51.1" y="165" width="1.5" height="15.0" fill="rgb(205,141,12)" rx="2" ry="2" />
<text  x="54.15" y="175.5" ></text>
</g>
<g >
<title>main (224 samples, 27.90%)</title><rect x="860.8" y="405" width="329.2" height="15.0" fill="rgb(251,143,50)" rx="2" ry="2" />
<text  x="863.83" y="415.5" >main</text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.12%)</title><rect x="1185.6" y="325" width="1.5" height="15.0" fill="rgb(241,100,48)" rx="2" ry="2" />
<text  x="1188.59" y="335.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (579 samples, 72.10%)</title><rect x="10.0" y="277" width="850.8" height="15.0" fill="rgb(234,29,2)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.25%)</title><rect x="36.5" y="133" width="2.9" height="15.0" fill="rgb(233,131,10)" rx="2" ry="2" />
<text  x="39.45" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="1187.1" y="309" width="1.4" height="15.0" fill="rgb(232,61,23)" rx="2" ry="2" />
<text  x="1190.06" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (8 samples, 1.00%)</title><rect x="825.6" y="149" width="11.7" height="15.0" fill="rgb(225,106,20)" rx="2" ry="2" />
<text  x="828.57" y="159.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.12%)</title><rect x="855.0" y="181" width="1.4" height="15.0" fill="rgb(245,140,48)" rx="2" ry="2" />
<text  x="857.96" y="191.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (4 samples, 0.50%)</title><rect x="593.4" y="197" width="5.9" height="15.0" fill="rgb(223,78,0)" rx="2" ry="2" />
<text  x="596.39" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.12%)</title><rect x="1184.1" y="261" width="1.5" height="15.0" fill="rgb(248,99,25)" rx="2" ry="2" />
<text  x="1187.12" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="48.2" y="133" width="1.5" height="15.0" fill="rgb(214,213,45)" rx="2" ry="2" />
<text  x="51.21" y="143.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.12%)</title><rect x="453.8" y="53" width="1.5" height="15.0" fill="rgb(221,210,29)" rx="2" ry="2" />
<text  x="456.79" y="63.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.12%)</title><rect x="490.5" y="53" width="1.5" height="15.0" fill="rgb(232,168,8)" rx="2" ry="2" />
<text  x="493.52" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.25%)</title><rect x="809.4" y="181" width="2.9" height="15.0" fill="rgb(242,167,2)" rx="2" ry="2" />
<text  x="812.40" y="191.5" ></text>
</g>
<g >
<title>Page::Page (3 samples, 0.37%)</title><rect x="1181.2" y="293" width="4.4" height="15.0" fill="rgb(211,175,47)" rx="2" ry="2" />
<text  x="1184.18" y="303.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (246 samples, 30.64%)</title><rect x="52.6" y="229" width="361.5" height="15.0" fill="rgb(240,44,1)" rx="2" ry="2" />
<text  x="55.62" y="239.5" >std::condition_variable::wait&lt;MultiThreadedPageRa..</text>
</g>
<g >
<title>grow_heap (1 samples, 0.12%)</title><rect x="37.9" y="85" width="1.5" height="15.0" fill="rgb(254,189,35)" rx="2" ry="2" />
<text  x="40.92" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (3 samples, 0.37%)</title><rect x="1181.2" y="325" width="4.4" height="15.0" fill="rgb(223,129,48)" rx="2" ry="2" />
<text  x="1184.18" y="335.5" ></text>
</g>
<g >
<title>PageId::operator== (12 samples, 1.49%)</title><rect x="784.4" y="133" width="17.7" height="15.0" fill="rgb(217,183,25)" rx="2" ry="2" />
<text  x="787.42" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (1 samples, 0.12%)</title><rect x="499.3" y="229" width="1.5" height="15.0" fill="rgb(237,85,17)" rx="2" ry="2" />
<text  x="502.34" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (1 samples, 0.12%)</title><rect x="860.8" y="325" width="1.5" height="15.0" fill="rgb(240,143,37)" rx="2" ry="2" />
<text  x="863.83" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (10 samples, 1.25%)</title><rect x="843.2" y="229" width="14.7" height="15.0" fill="rgb(213,196,18)" rx="2" ry="2" />
<text  x="846.20" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (5 samples, 0.62%)</title><rect x="450.8" y="149" width="7.4" height="15.0" fill="rgb(222,35,52)" rx="2" ry="2" />
<text  x="453.85" y="159.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (10 samples, 1.25%)</title><rect x="862.3" y="341" width="14.7" height="15.0" fill="rgb(236,63,40)" rx="2" ry="2" />
<text  x="865.30" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="855.0" y="149" width="1.4" height="15.0" fill="rgb(216,219,25)" rx="2" ry="2" />
<text  x="857.96" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (4 samples, 0.50%)</title><rect x="445.0" y="149" width="5.8" height="15.0" fill="rgb(253,172,44)" rx="2" ry="2" />
<text  x="447.97" y="159.5" ></text>
</g>
<g >
<title>std::allocator&lt;PageId&gt;::allocator (1 samples, 0.12%)</title><rect x="1185.6" y="165" width="1.5" height="15.0" fill="rgb(250,195,38)" rx="2" ry="2" />
<text  x="1188.59" y="175.5" ></text>
</g>
<g >
<title>malloc_consolidate (7 samples, 0.87%)</title><rect x="862.3" y="213" width="10.3" height="15.0" fill="rgb(212,71,14)" rx="2" ry="2" />
<text  x="865.30" y="223.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 0.12%)</title><rect x="843.2" y="197" width="1.5" height="15.0" fill="rgb(214,76,16)" rx="2" ry="2" />
<text  x="846.20" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.12%)</title><rect x="1179.7" y="245" width="1.5" height="15.0" fill="rgb(214,216,51)" rx="2" ry="2" />
<text  x="1182.71" y="255.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="456.7" y="53" width="1.5" height="15.0" fill="rgb(225,147,11)" rx="2" ry="2" />
<text  x="459.72" y="63.5" ></text>
</g>
<g >
<title>__lll_lock_wait (35 samples, 4.36%)</title><rect x="521.4" y="181" width="51.4" height="15.0" fill="rgb(207,122,41)" rx="2" ry="2" />
<text  x="524.38" y="191.5" >__lll..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (25 samples, 3.11%)</title><rect x="459.7" y="85" width="36.7" height="15.0" fill="rgb(230,34,33)" rx="2" ry="2" />
<text  x="462.66" y="95.5" >std..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.12%)</title><rect x="843.2" y="133" width="1.5" height="15.0" fill="rgb(240,39,29)" rx="2" ry="2" />
<text  x="846.20" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="29.1" y="165" width="1.5" height="15.0" fill="rgb(251,78,51)" rx="2" ry="2" />
<text  x="32.10" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (3 samples, 0.37%)</title><rect x="803.5" y="165" width="4.4" height="15.0" fill="rgb(234,13,7)" rx="2" ry="2" />
<text  x="806.52" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (1 samples, 0.12%)</title><rect x="499.3" y="213" width="1.5" height="15.0" fill="rgb(230,7,20)" rx="2" ry="2" />
<text  x="502.34" y="223.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.25%)</title><rect x="518.4" y="229" width="3.0" height="15.0" fill="rgb(231,139,17)" rx="2" ry="2" />
<text  x="521.44" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 0.12%)</title><rect x="1179.7" y="309" width="1.5" height="15.0" fill="rgb(233,100,46)" rx="2" ry="2" />
<text  x="1182.71" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 0.12%)</title><rect x="1179.7" y="341" width="1.5" height="15.0" fill="rgb(249,219,19)" rx="2" ry="2" />
<text  x="1182.71" y="351.5" ></text>
</g>
<g >
<title>all (803 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(208,76,4)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2 samples, 0.25%)</title><rect x="596.3" y="165" width="3.0" height="15.0" fill="rgb(238,211,47)" rx="2" ry="2" />
<text  x="599.33" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.12%)</title><rect x="496.4" y="85" width="1.5" height="15.0" fill="rgb(213,145,49)" rx="2" ry="2" />
<text  x="499.40" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (6 samples, 0.75%)</title><rect x="508.2" y="229" width="8.8" height="15.0" fill="rgb(251,59,29)" rx="2" ry="2" />
<text  x="511.16" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*, (1 samples, 0.12%)</title><rect x="843.2" y="213" width="1.5" height="15.0" fill="rgb(223,73,37)" rx="2" ry="2" />
<text  x="846.20" y="223.5" ></text>
</g>
<g >
<title>std::mutex::lock (35 samples, 4.36%)</title><rect x="521.4" y="229" width="51.4" height="15.0" fill="rgb(227,37,48)" rx="2" ry="2" />
<text  x="524.38" y="239.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, (1 samples, 0.12%)</title><rect x="838.8" y="181" width="1.5" height="15.0" fill="rgb(237,220,5)" rx="2" ry="2" />
<text  x="841.79" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, (1 samples, 0.12%)</title><rect x="591.9" y="165" width="1.5" height="15.0" fill="rgb(209,51,34)" rx="2" ry="2" />
<text  x="594.92" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="48.2" y="149" width="1.5" height="15.0" fill="rgb(240,27,29)" rx="2" ry="2" />
<text  x="51.21" y="159.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.12%)</title><rect x="843.2" y="85" width="1.5" height="15.0" fill="rgb(206,101,25)" rx="2" ry="2" />
<text  x="846.20" y="95.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="499.3" y="149" width="1.5" height="15.0" fill="rgb(213,14,19)" rx="2" ry="2" />
<text  x="502.34" y="159.5" ></text>
</g>
<g >
<title>_int_free (7 samples, 0.87%)</title><rect x="862.3" y="229" width="10.3" height="15.0" fill="rgb(235,52,38)" rx="2" ry="2" />
<text  x="865.30" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="860.8" y="229" width="1.5" height="15.0" fill="rgb(230,76,17)" rx="2" ry="2" />
<text  x="863.83" y="239.5" ></text>
</g>
<g >
<title>PageId::~PageId (2 samples, 0.25%)</title><rect x="496.4" y="101" width="2.9" height="15.0" fill="rgb(236,11,17)" rx="2" ry="2" />
<text  x="499.40" y="111.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="453.8" y="85" width="1.5" height="15.0" fill="rgb(216,0,25)" rx="2" ry="2" />
<text  x="456.79" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.12%)</title><rect x="841.7" y="213" width="1.5" height="15.0" fill="rgb(240,96,1)" rx="2" ry="2" />
<text  x="844.73" y="223.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.12%)</title><rect x="1187.1" y="341" width="1.4" height="15.0" fill="rgb(214,182,50)" rx="2" ry="2" />
<text  x="1190.06" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (28 samples, 3.49%)</title><rect x="458.2" y="149" width="41.1" height="15.0" fill="rgb(220,189,36)" rx="2" ry="2" />
<text  x="461.19" y="159.5" >std..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 1.00%)</title><rect x="477.3" y="69" width="11.8" height="15.0" fill="rgb(223,69,26)" rx="2" ry="2" />
<text  x="480.30" y="79.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.12%)</title><rect x="494.9" y="69" width="1.5" height="15.0" fill="rgb(231,81,3)" rx="2" ry="2" />
<text  x="497.93" y="79.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (306 samples, 38.11%)</title><rect x="51.1" y="245" width="449.7" height="15.0" fill="rgb(213,48,28)" rx="2" ry="2" />
<text  x="54.15" y="255.5" >MultiThreadedPageRankComputer::WorkerData::wait</text>
</g>
<g >
<title>std::operator!=&lt;Page*&gt; (1 samples, 0.12%)</title><rect x="853.5" y="149" width="1.5" height="15.0" fill="rgb(237,224,52)" rx="2" ry="2" />
<text  x="856.49" y="159.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (2 samples, 0.25%)</title><rect x="596.3" y="149" width="3.0" height="15.0" fill="rgb(214,161,10)" rx="2" ry="2" />
<text  x="599.33" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (6 samples, 0.75%)</title><rect x="844.7" y="197" width="8.8" height="15.0" fill="rgb(209,19,48)" rx="2" ry="2" />
<text  x="847.67" y="207.5" ></text>
</g>
<g >
<title>Network::addPage (4 samples, 0.50%)</title><rect x="1181.2" y="357" width="5.9" height="15.0" fill="rgb(250,128,44)" rx="2" ry="2" />
<text  x="1184.18" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="1181.2" y="261" width="1.5" height="15.0" fill="rgb(234,133,21)" rx="2" ry="2" />
<text  x="1184.18" y="271.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (1 samples, 0.12%)</title><rect x="572.8" y="213" width="1.5" height="15.0" fill="rgb(229,188,27)" rx="2" ry="2" />
<text  x="575.81" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.12%)</title><rect x="1179.7" y="197" width="1.5" height="15.0" fill="rgb(212,41,5)" rx="2" ry="2" />
<text  x="1182.71" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (8 samples, 1.00%)</title><rect x="825.6" y="165" width="11.7" height="15.0" fill="rgb(252,180,14)" rx="2" ry="2" />
<text  x="828.57" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (56 samples, 6.97%)</title><rect x="417.0" y="229" width="82.3" height="15.0" fill="rgb(224,35,34)" rx="2" ry="2" />
<text  x="420.05" y="239.5" >std::unor..</text>
</g>
<g >
<title>futex_wait_cancelable (246 samples, 30.64%)</title><rect x="52.6" y="165" width="361.5" height="15.0" fill="rgb(208,7,31)" rx="2" ry="2" />
<text  x="55.62" y="175.5" >futex_wait_cancelable</text>
</g>
<g >
<title>std::operator==&lt;Page*&gt; (1 samples, 0.12%)</title><rect x="853.5" y="133" width="1.5" height="15.0" fill="rgb(216,37,51)" rx="2" ry="2" />
<text  x="856.49" y="143.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (10 samples, 1.25%)</title><rect x="822.6" y="197" width="14.7" height="15.0" fill="rgb(240,115,27)" rx="2" ry="2" />
<text  x="825.63" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (10 samples, 1.25%)</title><rect x="862.3" y="325" width="14.7" height="15.0" fill="rgb(234,136,34)" rx="2" ry="2" />
<text  x="865.30" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (11 samples, 1.37%)</title><rect x="577.2" y="213" width="16.2" height="15.0" fill="rgb(250,196,39)" rx="2" ry="2" />
<text  x="580.22" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (7 samples, 0.87%)</title><rect x="862.3" y="245" width="10.3" height="15.0" fill="rgb(243,188,8)" rx="2" ry="2" />
<text  x="865.30" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="840.3" y="213" width="1.4" height="15.0" fill="rgb(251,74,46)" rx="2" ry="2" />
<text  x="843.26" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 0.75%)</title><rect x="39.4" y="165" width="8.8" height="15.0" fill="rgb(219,228,28)" rx="2" ry="2" />
<text  x="42.39" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="882.9" y="261" width="1.4" height="15.0" fill="rgb(208,92,9)" rx="2" ry="2" />
<text  x="885.88" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (6 samples, 0.75%)</title><rect x="812.3" y="181" width="8.9" height="15.0" fill="rgb(231,24,34)" rx="2" ry="2" />
<text  x="815.34" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (7 samples, 0.87%)</title><rect x="862.3" y="261" width="10.3" height="15.0" fill="rgb(247,216,41)" rx="2" ry="2" />
<text  x="865.30" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.62%)</title><rect x="40.9" y="149" width="7.3" height="15.0" fill="rgb(232,5,47)" rx="2" ry="2" />
<text  x="43.86" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (12 samples, 1.49%)</title><rect x="784.4" y="117" width="17.7" height="15.0" fill="rgb(233,194,11)" rx="2" ry="2" />
<text  x="787.42" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="450.8" y="101" width="1.5" height="15.0" fill="rgb(241,58,17)" rx="2" ry="2" />
<text  x="453.85" y="111.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (1 samples, 0.12%)</title><rect x="49.7" y="117" width="1.4" height="15.0" fill="rgb(221,216,52)" rx="2" ry="2" />
<text  x="52.68" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 0.37%)</title><rect x="437.6" y="165" width="4.4" height="15.0" fill="rgb(250,109,7)" rx="2" ry="2" />
<text  x="440.62" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (56 samples, 6.97%)</title><rect x="417.0" y="197" width="82.3" height="15.0" fill="rgb(245,4,29)" rx="2" ry="2" />
<text  x="420.05" y="207.5" >std::_Has..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="456.7" y="37" width="1.5" height="15.0" fill="rgb(251,130,54)" rx="2" ry="2" />
<text  x="459.72" y="47.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (1 samples, 0.12%)</title><rect x="572.8" y="245" width="1.5" height="15.0" fill="rgb(217,90,9)" rx="2" ry="2" />
<text  x="575.81" y="255.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (2 samples, 0.25%)</title><rect x="503.7" y="213" width="3.0" height="15.0" fill="rgb(247,203,17)" rx="2" ry="2" />
<text  x="506.75" y="223.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (1 samples, 0.12%)</title><rect x="860.8" y="261" width="1.5" height="15.0" fill="rgb(254,170,45)" rx="2" ry="2" />
<text  x="863.83" y="271.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;PageId (1 samples, 0.12%)</title><rect x="783.0" y="117" width="1.4" height="15.0" fill="rgb(210,164,48)" rx="2" ry="2" />
<text  x="785.95" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="882.9" y="293" width="1.4" height="15.0" fill="rgb(214,163,22)" rx="2" ry="2" />
<text  x="885.88" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (14 samples, 1.74%)</title><rect x="12.9" y="181" width="20.6" height="15.0" fill="rgb(208,141,13)" rx="2" ry="2" />
<text  x="15.94" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.12%)</title><rect x="506.7" y="165" width="1.5" height="15.0" fill="rgb(235,88,8)" rx="2" ry="2" />
<text  x="509.69" y="175.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (246 samples, 30.64%)</title><rect x="52.6" y="197" width="361.5" height="15.0" fill="rgb(247,155,45)" rx="2" ry="2" />
<text  x="55.62" y="207.5" >__pthread_cond_wait</text>
</g>
<g >
<title>start_thread (579 samples, 72.10%)</title><rect x="10.0" y="389" width="850.8" height="15.0" fill="rgb(253,202,13)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >start_thread</text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="860.8" y="245" width="1.5" height="15.0" fill="rgb(252,142,19)" rx="2" ry="2" />
<text  x="863.83" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.12%)</title><rect x="1179.7" y="213" width="1.5" height="15.0" fill="rgb(232,44,28)" rx="2" ry="2" />
<text  x="1182.71" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.12%)</title><rect x="1185.6" y="213" width="1.5" height="15.0" fill="rgb(228,214,17)" rx="2" ry="2" />
<text  x="1188.59" y="223.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (246 samples, 30.64%)</title><rect x="52.6" y="213" width="361.5" height="15.0" fill="rgb(230,148,36)" rx="2" ry="2" />
<text  x="55.62" y="223.5" >std::condition_variable::wait(std::unique_lock&lt;st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (4 samples, 0.50%)</title><rect x="877.0" y="293" width="5.9" height="15.0" fill="rgb(237,106,34)" rx="2" ry="2" />
<text  x="880.00" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, (2 samples, 0.25%)</title><rect x="805.0" y="149" width="2.9" height="15.0" fill="rgb(246,91,28)" rx="2" ry="2" />
<text  x="807.99" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.25%)</title><rect x="1182.7" y="277" width="2.9" height="15.0" fill="rgb(215,157,5)" rx="2" ry="2" />
<text  x="1185.65" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="503.7" y="165" width="1.5" height="15.0" fill="rgb(220,97,53)" rx="2" ry="2" />
<text  x="506.75" y="175.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (2 samples, 0.25%)</title><rect x="503.7" y="229" width="3.0" height="15.0" fill="rgb(212,206,0)" rx="2" ry="2" />
<text  x="506.75" y="239.5" ></text>
</g>
<g >
<title>Page::~Page (1 samples, 0.12%)</title><rect x="1179.7" y="277" width="1.5" height="15.0" fill="rgb(217,20,54)" rx="2" ry="2" />
<text  x="1182.71" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.25%)</title><rect x="590.4" y="181" width="3.0" height="15.0" fill="rgb(223,99,10)" rx="2" ry="2" />
<text  x="593.45" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 0.75%)</title><rect x="39.4" y="181" width="8.8" height="15.0" fill="rgb(243,146,54)" rx="2" ry="2" />
<text  x="42.39" y="191.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.12%)</title><rect x="572.8" y="197" width="1.5" height="15.0" fill="rgb(207,124,54)" rx="2" ry="2" />
<text  x="575.81" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.12%)</title><rect x="856.4" y="197" width="1.5" height="15.0" fill="rgb(248,38,44)" rx="2" ry="2" />
<text  x="859.43" y="207.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (1 samples, 0.12%)</title><rect x="494.9" y="53" width="1.5" height="15.0" fill="rgb(219,227,31)" rx="2" ry="2" />
<text  x="497.93" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (2 samples, 0.25%)</title><rect x="600.7" y="213" width="3.0" height="15.0" fill="rgb(234,110,15)" rx="2" ry="2" />
<text  x="603.73" y="223.5" ></text>
</g>
<g >
<title>tcache_put (1 samples, 0.12%)</title><rect x="519.9" y="213" width="1.5" height="15.0" fill="rgb(236,165,26)" rx="2" ry="2" />
<text  x="522.91" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;PageId, (8 samples, 1.00%)</title><rect x="39.4" y="213" width="11.7" height="15.0" fill="rgb(249,80,28)" rx="2" ry="2" />
<text  x="42.39" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (19 samples, 2.37%)</title><rect x="575.8" y="229" width="27.9" height="15.0" fill="rgb(252,51,13)" rx="2" ry="2" />
<text  x="578.75" y="239.5" >s..</text>
</g>
<g >
<title>pageRankComputationWithNumNodes (224 samples, 27.90%)</title><rect x="860.8" y="389" width="329.2" height="15.0" fill="rgb(225,4,39)" rx="2" ry="2" />
<text  x="863.83" y="399.5" >pageRankComputationWithNumNodes</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="872.6" y="277" width="2.9" height="15.0" fill="rgb(226,155,3)" rx="2" ry="2" />
<text  x="875.59" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="36.5" y="165" width="2.9" height="15.0" fill="rgb(238,124,0)" rx="2" ry="2" />
<text  x="39.45" y="175.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.12%)</title><rect x="1179.7" y="165" width="1.5" height="15.0" fill="rgb(232,228,43)" rx="2" ry="2" />
<text  x="1182.71" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 0.50%)</title><rect x="593.4" y="213" width="5.9" height="15.0" fill="rgb(235,119,4)" rx="2" ry="2" />
<text  x="596.39" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (18 samples, 2.24%)</title><rect x="12.9" y="213" width="26.5" height="15.0" fill="rgb(229,10,51)" rx="2" ry="2" />
<text  x="15.94" y="223.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.12%)</title><rect x="1179.7" y="229" width="1.5" height="15.0" fill="rgb(208,77,24)" rx="2" ry="2" />
<text  x="1182.71" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (13 samples, 1.62%)</title><rect x="821.2" y="213" width="19.1" height="15.0" fill="rgb(214,107,52)" rx="2" ry="2" />
<text  x="824.16" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (4 samples, 0.50%)</title><rect x="445.0" y="133" width="5.8" height="15.0" fill="rgb(235,171,41)" rx="2" ry="2" />
<text  x="447.97" y="143.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="506.7" y="229" width="1.5" height="15.0" fill="rgb(232,229,34)" rx="2" ry="2" />
<text  x="509.69" y="239.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.12%)</title><rect x="37.9" y="101" width="1.5" height="15.0" fill="rgb(254,51,51)" rx="2" ry="2" />
<text  x="40.92" y="111.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;Page*&gt;, (1 samples, 0.12%)</title><rect x="853.5" y="181" width="1.5" height="15.0" fill="rgb(206,72,42)" rx="2" ry="2" />
<text  x="856.49" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.12%)</title><rect x="856.4" y="213" width="1.5" height="15.0" fill="rgb(212,114,20)" rx="2" ry="2" />
<text  x="859.43" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.12%)</title><rect x="37.9" y="117" width="1.5" height="15.0" fill="rgb(253,36,52)" rx="2" ry="2" />
<text  x="40.92" y="127.5" ></text>
</g>
<g >
<title>Page::~Page (1 samples, 0.12%)</title><rect x="843.2" y="149" width="1.5" height="15.0" fill="rgb(237,113,11)" rx="2" ry="2" />
<text  x="846.20" y="159.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="453.8" y="101" width="1.5" height="15.0" fill="rgb(226,89,29)" rx="2" ry="2" />
<text  x="456.79" y="111.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.12%)</title><rect x="875.5" y="229" width="1.5" height="15.0" fill="rgb(239,39,42)" rx="2" ry="2" />
<text  x="878.53" y="239.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.12%)</title><rect x="49.7" y="165" width="1.4" height="15.0" fill="rgb(209,7,52)" rx="2" ry="2" />
<text  x="52.68" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (162 samples, 20.17%)</title><rect x="603.7" y="229" width="238.0" height="15.0" fill="rgb(243,198,19)" rx="2" ry="2" />
<text  x="606.67" y="239.5" >std::__detail::_Map_base&lt;PageId,</text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.25%)</title><rect x="414.1" y="213" width="2.9" height="15.0" fill="rgb(223,192,27)" rx="2" ry="2" />
<text  x="417.11" y="223.5" ></text>
</g>
<g >
<title>?? (579 samples, 72.10%)</title><rect x="10.0" y="373" width="850.8" height="15.0" fill="rgb(213,160,24)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >??</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::allocate (6 samples, 0.75%)</title><rect x="844.7" y="181" width="8.8" height="15.0" fill="rgb(237,73,48)" rx="2" ry="2" />
<text  x="847.67" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.12%)</title><rect x="503.7" y="149" width="1.5" height="15.0" fill="rgb(220,115,26)" rx="2" ry="2" />
<text  x="506.75" y="159.5" ></text>
</g>
<g >
<title>std:: (1 samples, 0.12%)</title><rect x="1188.5" y="341" width="1.5" height="15.0" fill="rgb(209,169,27)" rx="2" ry="2" />
<text  x="1191.53" y="351.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (579 samples, 72.10%)</title><rect x="10.0" y="309" width="850.8" height="15.0" fill="rgb(242,67,27)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (56 samples, 6.97%)</title><rect x="417.0" y="213" width="82.3" height="15.0" fill="rgb(224,184,8)" rx="2" ry="2" />
<text  x="420.05" y="223.5" >std::_Has..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (579 samples, 72.10%)</title><rect x="10.0" y="325" width="850.8" height="15.0" fill="rgb(242,109,10)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (5 samples, 0.62%)</title><rect x="794.7" y="101" width="7.4" height="15.0" fill="rgb(224,203,18)" rx="2" ry="2" />
<text  x="797.71" y="111.5" ></text>
</g>
<g >
<title>operator (6 samples, 0.75%)</title><rect x="844.7" y="165" width="8.8" height="15.0" fill="rgb(236,97,35)" rx="2" ry="2" />
<text  x="847.67" y="175.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (2 samples, 0.25%)</title><rect x="1187.1" y="357" width="2.9" height="15.0" fill="rgb(243,88,38)" rx="2" ry="2" />
<text  x="1190.06" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.37%)</title><rect x="453.8" y="117" width="4.4" height="15.0" fill="rgb(220,17,31)" rx="2" ry="2" />
<text  x="456.79" y="127.5" ></text>
</g>
<g >
<title>PageId::~PageId (3 samples, 0.37%)</title><rect x="517.0" y="245" width="4.4" height="15.0" fill="rgb(205,105,51)" rx="2" ry="2" />
<text  x="519.97" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (2 samples, 0.25%)</title><rect x="30.6" y="149" width="2.9" height="15.0" fill="rgb(205,138,0)" rx="2" ry="2" />
<text  x="33.57" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (11 samples, 1.37%)</title><rect x="841.7" y="245" width="16.2" height="15.0" fill="rgb(225,70,32)" rx="2" ry="2" />
<text  x="844.73" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.12%)</title><rect x="1179.7" y="357" width="1.5" height="15.0" fill="rgb(233,21,20)" rx="2" ry="2" />
<text  x="1182.71" y="367.5" ></text>
</g>
<g >
<title>Page::getId (1 samples, 0.12%)</title><rect x="506.7" y="245" width="1.5" height="15.0" fill="rgb(236,126,1)" rx="2" ry="2" />
<text  x="509.69" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;Page*, (1 samples, 0.12%)</title><rect x="1185.6" y="309" width="1.5" height="15.0" fill="rgb(250,59,40)" rx="2" ry="2" />
<text  x="1188.59" y="319.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.12%)</title><rect x="1179.7" y="181" width="1.5" height="15.0" fill="rgb(242,175,41)" rx="2" ry="2" />
<text  x="1182.71" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.12%)</title><rect x="1179.7" y="261" width="1.5" height="15.0" fill="rgb(210,83,14)" rx="2" ry="2" />
<text  x="1182.71" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 0.12%)</title><rect x="1179.7" y="293" width="1.5" height="15.0" fill="rgb(237,213,35)" rx="2" ry="2" />
<text  x="1182.71" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (43 samples, 5.35%)</title><rect x="436.2" y="181" width="63.1" height="15.0" fill="rgb(207,13,23)" rx="2" ry="2" />
<text  x="439.15" y="191.5" >std::_..</text>
</g>
<g >
<title>_int_free (4 samples, 0.50%)</title><rect x="877.0" y="229" width="5.9" height="15.0" fill="rgb(231,162,27)" rx="2" ry="2" />
<text  x="880.00" y="239.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.12%)</title><rect x="506.7" y="149" width="1.5" height="15.0" fill="rgb(230,36,21)" rx="2" ry="2" />
<text  x="509.69" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.12%)</title><rect x="747.7" y="149" width="1.5" height="15.0" fill="rgb(235,119,48)" rx="2" ry="2" />
<text  x="750.68" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="781.5" y="149" width="2.9" height="15.0" fill="rgb(237,1,5)" rx="2" ry="2" />
<text  x="784.48" y="159.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.25%)</title><rect x="489.1" y="69" width="2.9" height="15.0" fill="rgb(237,36,12)" rx="2" ry="2" />
<text  x="492.05" y="79.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (26 samples, 3.24%)</title><rect x="12.9" y="245" width="38.2" height="15.0" fill="rgb(228,164,41)" rx="2" ry="2" />
<text  x="15.94" y="255.5" >Mul..</text>
</g>
<g >
<title>Page::Page (1 samples, 0.12%)</title><rect x="841.7" y="197" width="1.5" height="15.0" fill="rgb(251,32,9)" rx="2" ry="2" />
<text  x="844.73" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.12%)</title><rect x="841.7" y="229" width="1.5" height="15.0" fill="rgb(237,127,12)" rx="2" ry="2" />
<text  x="844.73" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (39 samples, 4.86%)</title><rect x="442.0" y="165" width="57.3" height="15.0" fill="rgb(222,109,13)" rx="2" ry="2" />
<text  x="445.03" y="175.5" >std::_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.25%)</title><rect x="455.3" y="69" width="2.9" height="15.0" fill="rgb(248,227,9)" rx="2" ry="2" />
<text  x="458.26" y="79.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.12%)</title><rect x="843.2" y="101" width="1.5" height="15.0" fill="rgb(240,90,31)" rx="2" ry="2" />
<text  x="846.20" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (4 samples, 0.50%)</title><rect x="877.0" y="277" width="5.9" height="15.0" fill="rgb(210,13,10)" rx="2" ry="2" />
<text  x="880.00" y="287.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (1 samples, 0.12%)</title><rect x="572.8" y="181" width="1.5" height="15.0" fill="rgb(212,141,17)" rx="2" ry="2" />
<text  x="575.81" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (16 samples, 1.99%)</title><rect x="12.9" y="197" width="23.6" height="15.0" fill="rgb(233,29,46)" rx="2" ry="2" />
<text  x="15.94" y="207.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.62%)</title><rect x="21.8" y="165" width="7.3" height="15.0" fill="rgb(251,156,52)" rx="2" ry="2" />
<text  x="24.76" y="175.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (579 samples, 72.10%)</title><rect x="10.0" y="357" width="850.8" height="15.0" fill="rgb(244,176,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__gthread_mutex_lock (35 samples, 4.36%)</title><rect x="521.4" y="213" width="51.4" height="15.0" fill="rgb(205,153,2)" rx="2" ry="2" />
<text  x="524.38" y="223.5" >__gth..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (4 samples, 0.50%)</title><rect x="587.5" y="197" width="5.9" height="15.0" fill="rgb(249,226,17)" rx="2" ry="2" />
<text  x="590.51" y="207.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="1181.2" y="277" width="1.5" height="15.0" fill="rgb(233,62,21)" rx="2" ry="2" />
<text  x="1184.18" y="287.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="860.8" y="213" width="1.5" height="15.0" fill="rgb(216,196,20)" rx="2" ry="2" />
<text  x="863.83" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (11 samples, 1.37%)</title><rect x="735.9" y="181" width="16.2" height="15.0" fill="rgb(241,136,8)" rx="2" ry="2" />
<text  x="738.93" y="191.5" ></text>
</g>
<g >
<title>Network::~Network (1 samples, 0.12%)</title><rect x="1179.7" y="373" width="1.5" height="15.0" fill="rgb(249,150,2)" rx="2" ry="2" />
<text  x="1182.71" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="27.6" y="149" width="1.5" height="15.0" fill="rgb(234,228,22)" rx="2" ry="2" />
<text  x="30.63" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (127 samples, 15.82%)</title><rect x="621.3" y="197" width="186.6" height="15.0" fill="rgb(240,194,2)" rx="2" ry="2" />
<text  x="624.31" y="207.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (1 samples, 0.12%)</title><rect x="860.8" y="309" width="1.5" height="15.0" fill="rgb(249,154,47)" rx="2" ry="2" />
<text  x="863.83" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (6 samples, 0.75%)</title><rect x="844.7" y="149" width="8.8" height="15.0" fill="rgb(246,1,46)" rx="2" ry="2" />
<text  x="847.67" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.12%)</title><rect x="602.2" y="197" width="1.5" height="15.0" fill="rgb(210,191,40)" rx="2" ry="2" />
<text  x="605.20" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (142 samples, 17.68%)</title><rect x="612.5" y="213" width="208.7" height="15.0" fill="rgb(249,33,42)" rx="2" ry="2" />
<text  x="615.49" y="223.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="506.7" y="181" width="1.5" height="15.0" fill="rgb(233,229,2)" rx="2" ry="2" />
<text  x="509.69" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="875.5" y="261" width="1.5" height="15.0" fill="rgb(230,108,50)" rx="2" ry="2" />
<text  x="878.53" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageIdAndRank&gt; (1 samples, 0.12%)</title><rect x="499.3" y="197" width="1.5" height="15.0" fill="rgb(213,129,37)" rx="2" ry="2" />
<text  x="502.34" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (9 samples, 1.12%)</title><rect x="807.9" y="197" width="13.3" height="15.0" fill="rgb(211,54,31)" rx="2" ry="2" />
<text  x="810.93" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (1 samples, 0.12%)</title><rect x="860.8" y="293" width="1.5" height="15.0" fill="rgb(240,228,39)" rx="2" ry="2" />
<text  x="863.83" y="303.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (8 samples, 1.00%)</title><rect x="39.4" y="229" width="11.7" height="15.0" fill="rgb(224,178,1)" rx="2" ry="2" />
<text  x="42.39" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="414.1" y="229" width="2.9" height="15.0" fill="rgb(226,160,12)" rx="2" ry="2" />
<text  x="417.11" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (28 samples, 3.49%)</title><rect x="458.2" y="133" width="41.1" height="15.0" fill="rgb(207,9,48)" rx="2" ry="2" />
<text  x="461.19" y="143.5" >__g..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="450.8" y="117" width="1.5" height="15.0" fill="rgb(223,126,21)" rx="2" ry="2" />
<text  x="453.85" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (4 samples, 0.50%)</title><rect x="877.0" y="245" width="5.9" height="15.0" fill="rgb(232,33,0)" rx="2" ry="2" />
<text  x="880.00" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="875.5" y="245" width="1.5" height="15.0" fill="rgb(214,12,1)" rx="2" ry="2" />
<text  x="878.53" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (8 samples, 1.00%)</title><rect x="39.4" y="197" width="11.7" height="15.0" fill="rgb(253,204,18)" rx="2" ry="2" />
<text  x="42.39" y="207.5" ></text>
</g>
<g >
<title>std::mutex::unlock (1 samples, 0.12%)</title><rect x="572.8" y="229" width="1.5" height="15.0" fill="rgb(245,183,2)" rx="2" ry="2" />
<text  x="575.81" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.12%)</title><rect x="859.4" y="213" width="1.4" height="15.0" fill="rgb(228,159,21)" rx="2" ry="2" />
<text  x="862.36" y="223.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="51.1" y="213" width="1.5" height="15.0" fill="rgb(209,173,23)" rx="2" ry="2" />
<text  x="54.15" y="223.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.25%)</title><rect x="36.5" y="149" width="2.9" height="15.0" fill="rgb(232,93,39)" rx="2" ry="2" />
<text  x="39.45" y="159.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.62%)</title><rect x="794.7" y="85" width="7.4" height="15.0" fill="rgb(224,61,50)" rx="2" ry="2" />
<text  x="797.71" y="95.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (579 samples, 72.10%)</title><rect x="10.0" y="261" width="850.8" height="15.0" fill="rgb(249,6,53)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;Page*&gt;, (1 samples, 0.12%)</title><rect x="1185.6" y="261" width="1.5" height="15.0" fill="rgb(235,41,48)" rx="2" ry="2" />
<text  x="1188.59" y="271.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;Page*&gt;, (1 samples, 0.12%)</title><rect x="1185.6" y="277" width="1.5" height="15.0" fill="rgb(216,120,24)" rx="2" ry="2" />
<text  x="1188.59" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.12%)</title><rect x="843.2" y="117" width="1.5" height="15.0" fill="rgb(230,118,8)" rx="2" ry="2" />
<text  x="846.20" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;Page*&gt;, (1 samples, 0.12%)</title><rect x="853.5" y="197" width="1.5" height="15.0" fill="rgb(205,206,8)" rx="2" ry="2" />
<text  x="856.49" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (7 samples, 0.87%)</title><rect x="862.3" y="277" width="10.3" height="15.0" fill="rgb(253,133,25)" rx="2" ry="2" />
<text  x="865.30" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;Page*, (1 samples, 0.12%)</title><rect x="853.5" y="213" width="1.5" height="15.0" fill="rgb(232,210,9)" rx="2" ry="2" />
<text  x="856.49" y="223.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="503.7" y="181" width="1.5" height="15.0" fill="rgb(222,115,33)" rx="2" ry="2" />
<text  x="506.75" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="780.0" y="133" width="1.5" height="15.0" fill="rgb(219,134,6)" rx="2" ry="2" />
<text  x="783.01" y="143.5" ></text>
</g>
<g >
<title>malloc_consolidate (4 samples, 0.50%)</title><rect x="877.0" y="213" width="5.9" height="15.0" fill="rgb(213,61,17)" rx="2" ry="2" />
<text  x="880.00" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (3 samples, 0.37%)</title><rect x="1181.2" y="309" width="4.4" height="15.0" fill="rgb(221,199,27)" rx="2" ry="2" />
<text  x="1184.18" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (182 samples, 22.67%)</title><rect x="574.3" y="245" width="267.4" height="15.0" fill="rgb(231,21,50)" rx="2" ry="2" />
<text  x="577.28" y="255.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>Network::getSize (2 samples, 0.25%)</title><rect x="500.8" y="245" width="2.9" height="15.0" fill="rgb(215,199,21)" rx="2" ry="2" />
<text  x="503.81" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.50%)</title><rect x="788.8" y="101" width="5.9" height="15.0" fill="rgb(206,154,8)" rx="2" ry="2" />
<text  x="791.83" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="450.8" y="133" width="1.5" height="15.0" fill="rgb(234,210,26)" rx="2" ry="2" />
<text  x="453.85" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.12%)</title><rect x="49.7" y="133" width="1.4" height="15.0" fill="rgb(230,82,30)" rx="2" ry="2" />
<text  x="52.68" y="143.5" ></text>
</g>
<g >
<title>clone (579 samples, 72.10%)</title><rect x="10.0" y="405" width="850.8" height="15.0" fill="rgb(224,143,10)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >clone</text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.12%)</title><rect x="505.2" y="181" width="1.5" height="15.0" fill="rgb(238,190,23)" rx="2" ry="2" />
<text  x="508.22" y="191.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="855.0" y="165" width="1.4" height="15.0" fill="rgb(224,169,8)" rx="2" ry="2" />
<text  x="857.96" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.25%)</title><rect x="33.5" y="181" width="3.0" height="15.0" fill="rgb(247,43,16)" rx="2" ry="2" />
<text  x="36.51" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="48.2" y="101" width="1.5" height="15.0" fill="rgb(241,53,39)" rx="2" ry="2" />
<text  x="51.21" y="111.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (579 samples, 72.10%)</title><rect x="10.0" y="293" width="850.8" height="15.0" fill="rgb(217,34,40)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>mprotect (1 samples, 0.12%)</title><rect x="37.9" y="69" width="1.5" height="15.0" fill="rgb(225,134,5)" rx="2" ry="2" />
<text  x="40.92" y="79.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.25%)</title><rect x="455.3" y="85" width="2.9" height="15.0" fill="rgb(253,116,42)" rx="2" ry="2" />
<text  x="458.26" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (4 samples, 0.50%)</title><rect x="877.0" y="261" width="5.9" height="15.0" fill="rgb(239,69,29)" rx="2" ry="2" />
<text  x="880.00" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="778.5" y="149" width="3.0" height="15.0" fill="rgb(234,80,45)" rx="2" ry="2" />
<text  x="781.54" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="36.5" y="197" width="2.9" height="15.0" fill="rgb(225,97,28)" rx="2" ry="2" />
<text  x="39.45" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="51.1" y="197" width="1.5" height="15.0" fill="rgb(236,47,26)" rx="2" ry="2" />
<text  x="54.15" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.25%)</title><rect x="837.3" y="197" width="3.0" height="15.0" fill="rgb(247,193,7)" rx="2" ry="2" />
<text  x="840.32" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page&gt; (1 samples, 0.12%)</title><rect x="843.2" y="165" width="1.5" height="15.0" fill="rgb(227,18,33)" rx="2" ry="2" />
<text  x="846.20" y="175.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Page*&gt; (1 samples, 0.12%)</title><rect x="843.2" y="181" width="1.5" height="15.0" fill="rgb(233,36,25)" rx="2" ry="2" />
<text  x="846.20" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (10 samples, 1.25%)</title><rect x="737.4" y="165" width="14.7" height="15.0" fill="rgb(231,166,9)" rx="2" ry="2" />
<text  x="740.40" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (1 samples, 0.12%)</title><rect x="860.8" y="341" width="1.5" height="15.0" fill="rgb(217,210,53)" rx="2" ry="2" />
<text  x="863.83" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.25%)</title><rect x="24.7" y="149" width="2.9" height="15.0" fill="rgb(246,125,4)" rx="2" ry="2" />
<text  x="27.69" y="159.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="506.7" y="197" width="1.5" height="15.0" fill="rgb(221,93,48)" rx="2" ry="2" />
<text  x="509.69" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="36.5" y="181" width="2.9" height="15.0" fill="rgb(242,188,24)" rx="2" ry="2" />
<text  x="39.45" y="191.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (35 samples, 4.36%)</title><rect x="521.4" y="197" width="51.4" height="15.0" fill="rgb(251,120,24)" rx="2" ry="2" />
<text  x="524.38" y="207.5" >__GI_..</text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex (201 samples, 25.03%)</title><rect x="884.3" y="341" width="295.4" height="15.0" fill="rgb(243,31,36)" rx="2" ry="2" />
<text  x="887.35" y="351.5" >__GI___pthread_timedjoin_ex</text>
</g>
<g >
<title>Page::generateId (2 samples, 0.25%)</title><rect x="503.7" y="245" width="3.0" height="15.0" fill="rgb(212,151,46)" rx="2" ry="2" />
<text  x="506.75" y="255.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.12%)</title><rect x="1185.6" y="229" width="1.5" height="15.0" fill="rgb(233,201,48)" rx="2" ry="2" />
<text  x="1188.59" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.62%)</title><rect x="877.0" y="325" width="7.3" height="15.0" fill="rgb(217,52,50)" rx="2" ry="2" />
<text  x="880.00" y="335.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="51.1" y="181" width="1.5" height="15.0" fill="rgb(219,226,47)" rx="2" ry="2" />
<text  x="54.15" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.12%)</title><rect x="453.8" y="69" width="1.5" height="15.0" fill="rgb(235,50,40)" rx="2" ry="2" />
<text  x="456.79" y="79.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.12%)</title><rect x="48.2" y="117" width="1.5" height="15.0" fill="rgb(231,127,28)" rx="2" ry="2" />
<text  x="51.21" y="127.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::getResult (1 samples, 0.12%)</title><rect x="860.8" y="357" width="1.5" height="15.0" fill="rgb(217,43,1)" rx="2" ry="2" />
<text  x="863.83" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.25%)</title><rect x="43.8" y="133" width="2.9" height="15.0" fill="rgb(252,83,12)" rx="2" ry="2" />
<text  x="46.80" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.25%)</title><rect x="857.9" y="229" width="2.9" height="15.0" fill="rgb(218,82,17)" rx="2" ry="2" />
<text  x="860.90" y="239.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (35 samples, 4.36%)</title><rect x="521.4" y="245" width="51.4" height="15.0" fill="rgb(238,176,47)" rx="2" ry="2" />
<text  x="524.38" y="255.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, (2 samples, 0.25%)</title><rect x="809.4" y="165" width="2.9" height="15.0" fill="rgb(220,53,1)" rx="2" ry="2" />
<text  x="812.40" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;Page*&gt;, (1 samples, 0.12%)</title><rect x="1185.6" y="293" width="1.5" height="15.0" fill="rgb(224,118,38)" rx="2" ry="2" />
<text  x="1188.59" y="303.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (579 samples, 72.10%)</title><rect x="10.0" y="341" width="850.8" height="15.0" fill="rgb(208,108,43)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="1188.5" y="325" width="1.5" height="15.0" fill="rgb(227,188,31)" rx="2" ry="2" />
<text  x="1191.53" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.12%)</title><rect x="1185.6" y="197" width="1.5" height="15.0" fill="rgb(238,68,17)" rx="2" ry="2" />
<text  x="1188.59" y="207.5" ></text>
</g>
<g >
<title>malloc_consolidate (5 samples, 0.62%)</title><rect x="846.1" y="117" width="7.4" height="15.0" fill="rgb(224,61,37)" rx="2" ry="2" />
<text  x="849.14" y="127.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (3 samples, 0.37%)</title><rect x="594.9" y="181" width="4.4" height="15.0" fill="rgb(253,69,2)" rx="2" ry="2" />
<text  x="597.86" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageIdAndRank&gt;::construct&lt;PageIdAndRank, (1 samples, 0.12%)</title><rect x="499.3" y="181" width="1.5" height="15.0" fill="rgb(228,137,28)" rx="2" ry="2" />
<text  x="502.34" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.25%)</title><rect x="857.9" y="245" width="2.9" height="15.0" fill="rgb(222,213,36)" rx="2" ry="2" />
<text  x="860.90" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="515.5" y="213" width="1.5" height="15.0" fill="rgb(229,121,10)" rx="2" ry="2" />
<text  x="518.50" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.37%)</title><rect x="872.6" y="293" width="4.4" height="15.0" fill="rgb(235,47,46)" rx="2" ry="2" />
<text  x="875.59" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="840.3" y="197" width="1.4" height="15.0" fill="rgb(252,0,3)" rx="2" ry="2" />
<text  x="843.26" y="207.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (1 samples, 0.12%)</title><rect x="51.1" y="229" width="1.5" height="15.0" fill="rgb(212,207,50)" rx="2" ry="2" />
<text  x="54.15" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.12%)</title><rect x="855.0" y="197" width="1.4" height="15.0" fill="rgb(210,9,10)" rx="2" ry="2" />
<text  x="857.96" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="46.7" y="133" width="1.5" height="15.0" fill="rgb(240,112,26)" rx="2" ry="2" />
<text  x="49.74" y="143.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="49.7" y="149" width="1.4" height="15.0" fill="rgb(249,191,35)" rx="2" ry="2" />
<text  x="52.68" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.12%)</title><rect x="855.0" y="213" width="1.4" height="15.0" fill="rgb(208,163,31)" rx="2" ry="2" />
<text  x="857.96" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (8 samples, 1.00%)</title><rect x="825.6" y="181" width="11.7" height="15.0" fill="rgb(228,24,14)" rx="2" ry="2" />
<text  x="828.57" y="191.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (5 samples, 0.62%)</title><rect x="877.0" y="341" width="7.3" height="15.0" fill="rgb(217,73,28)" rx="2" ry="2" />
<text  x="880.00" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.25%)</title><rect x="503.7" y="197" width="3.0" height="15.0" fill="rgb(249,34,27)" rx="2" ry="2" />
<text  x="506.75" y="207.5" ></text>
</g>
<g >
<title>std::_Construct&lt;Page, (1 samples, 0.12%)</title><rect x="1185.6" y="245" width="1.5" height="15.0" fill="rgb(205,165,19)" rx="2" ry="2" />
<text  x="1188.59" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.25%)</title><rect x="512.6" y="213" width="2.9" height="15.0" fill="rgb(226,221,2)" rx="2" ry="2" />
<text  x="515.57" y="223.5" ></text>
</g>
<g >
<title>std::thread::join() (201 samples, 25.03%)</title><rect x="884.3" y="357" width="295.4" height="15.0" fill="rgb(252,158,39)" rx="2" ry="2" />
<text  x="887.35" y="367.5" >std::thread::join()</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (217 samples, 27.02%)</title><rect x="860.8" y="373" width="318.9" height="15.0" fill="rgb(243,170,15)" rx="2" ry="2" />
<text  x="863.83" y="383.5" >MultiThreadedPageRankComputer::computeForNe..</text>
</g>
<g >
<title>std::pair&lt;PageId (27 samples, 3.36%)</title><rect x="459.7" y="117" width="39.6" height="15.0" fill="rgb(223,155,29)" rx="2" ry="2" />
<text  x="462.66" y="127.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.12%)</title><rect x="802.1" y="165" width="1.4" height="15.0" fill="rgb(216,116,43)" rx="2" ry="2" />
<text  x="805.05" y="175.5" ></text>
</g>
<g >
<title>PageId::PageId (6 samples, 0.75%)</title><rect x="508.2" y="245" width="8.8" height="15.0" fill="rgb(228,132,18)" rx="2" ry="2" />
<text  x="511.16" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.12%)</title><rect x="1185.6" y="181" width="1.5" height="15.0" fill="rgb(225,46,0)" rx="2" ry="2" />
<text  x="1188.59" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.25%)</title><rect x="414.1" y="197" width="2.9" height="15.0" fill="rgb(226,201,6)" rx="2" ry="2" />
<text  x="417.11" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;Page*&gt; (1 samples, 0.12%)</title><rect x="1179.7" y="325" width="1.5" height="15.0" fill="rgb(233,51,10)" rx="2" ry="2" />
<text  x="1182.71" y="335.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.12%)</title><rect x="1188.5" y="309" width="1.5" height="15.0" fill="rgb(250,185,14)" rx="2" ry="2" />
<text  x="1191.53" y="319.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.12%)</title><rect x="1187.1" y="325" width="1.4" height="15.0" fill="rgb(218,25,3)" rx="2" ry="2" />
<text  x="1190.06" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (4 samples, 0.50%)</title><rect x="1181.2" y="341" width="5.9" height="15.0" fill="rgb(205,13,37)" rx="2" ry="2" />
<text  x="1184.18" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.25%)</title><rect x="500.8" y="229" width="2.9" height="15.0" fill="rgb(208,12,28)" rx="2" ry="2" />
<text  x="503.81" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="780.0" y="117" width="1.5" height="15.0" fill="rgb(221,106,47)" rx="2" ry="2" />
<text  x="783.01" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;Page*&gt;, (1 samples, 0.12%)</title><rect x="853.5" y="165" width="1.5" height="15.0" fill="rgb(215,207,9)" rx="2" ry="2" />
<text  x="856.49" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="875.5" y="277" width="1.5" height="15.0" fill="rgb(207,15,24)" rx="2" ry="2" />
<text  x="878.53" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="499.3" y="133" width="1.5" height="15.0" fill="rgb(253,86,0)" rx="2" ry="2" />
<text  x="502.34" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (4 samples, 0.50%)</title><rect x="452.3" y="133" width="5.9" height="15.0" fill="rgb(219,78,15)" rx="2" ry="2" />
<text  x="455.32" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.12%)</title><rect x="49.7" y="181" width="1.4" height="15.0" fill="rgb(213,65,40)" rx="2" ry="2" />
<text  x="52.68" y="191.5" ></text>
</g>
<g >
<title>tcache_put (1 samples, 0.12%)</title><rect x="497.9" y="69" width="1.4" height="15.0" fill="rgb(250,135,53)" rx="2" ry="2" />
<text  x="500.87" y="79.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (1 samples, 0.12%)</title><rect x="499.3" y="165" width="1.5" height="15.0" fill="rgb(231,153,29)" rx="2" ry="2" />
<text  x="502.34" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (2 samples, 0.25%)</title><rect x="455.3" y="101" width="2.9" height="15.0" fill="rgb(237,146,40)" rx="2" ry="2" />
<text  x="458.26" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (38 samples, 4.73%)</title><rect x="752.1" y="181" width="55.8" height="15.0" fill="rgb(232,10,20)" rx="2" ry="2" />
<text  x="755.09" y="191.5" >std::..</text>
</g>
<g >
<title>__pthread_cond_wait_common (246 samples, 30.64%)</title><rect x="52.6" y="181" width="361.5" height="15.0" fill="rgb(231,21,45)" rx="2" ry="2" />
<text  x="55.62" y="191.5" >__pthread_cond_wait_common</text>
</g>
<g >
<title>NetworkWithoutManyEdgesGenerator::generateNetworkOfSize (6 samples, 0.75%)</title><rect x="1181.2" y="373" width="8.8" height="15.0" fill="rgb(242,122,38)" rx="2" ry="2" />
<text  x="1184.18" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (18 samples, 2.24%)</title><rect x="12.9" y="229" width="26.5" height="15.0" fill="rgb(246,210,42)" rx="2" ry="2" />
<text  x="15.94" y="239.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.25%)</title><rect x="492.0" y="69" width="2.9" height="15.0" fill="rgb(230,22,11)" rx="2" ry="2" />
<text  x="494.99" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (10 samples, 1.25%)</title><rect x="862.3" y="309" width="14.7" height="15.0" fill="rgb(230,134,18)" rx="2" ry="2" />
<text  x="865.30" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="48.2" y="181" width="1.5" height="15.0" fill="rgb(209,128,5)" rx="2" ry="2" />
<text  x="51.21" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="489.1" y="53" width="1.4" height="15.0" fill="rgb(211,163,16)" rx="2" ry="2" />
<text  x="492.05" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 0.87%)</title><rect x="862.3" y="293" width="10.3" height="15.0" fill="rgb(205,29,10)" rx="2" ry="2" />
<text  x="865.30" y="303.5" ></text>
</g>
<g >
<title>PageId::PageId (25 samples, 3.11%)</title><rect x="459.7" y="101" width="36.7" height="15.0" fill="rgb(209,165,49)" rx="2" ry="2" />
<text  x="462.66" y="111.5" >Pag..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (2 samples, 0.25%)</title><rect x="749.2" y="149" width="2.9" height="15.0" fill="rgb(208,8,40)" rx="2" ry="2" />
<text  x="752.15" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.12%)</title><rect x="860.8" y="181" width="1.5" height="15.0" fill="rgb(217,2,14)" rx="2" ry="2" />
<text  x="863.83" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (6 samples, 0.75%)</title><rect x="844.7" y="133" width="8.8" height="15.0" fill="rgb(230,34,7)" rx="2" ry="2" />
<text  x="847.67" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.12%)</title><rect x="506.7" y="213" width="1.5" height="15.0" fill="rgb(252,220,16)" rx="2" ry="2" />
<text  x="509.69" y="223.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (1 samples, 0.12%)</title><rect x="505.2" y="165" width="1.5" height="15.0" fill="rgb(223,87,52)" rx="2" ry="2" />
<text  x="508.22" y="175.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.12%)</title><rect x="497.9" y="85" width="1.4" height="15.0" fill="rgb(216,20,9)" rx="2" ry="2" />
<text  x="500.87" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.12%)</title><rect x="599.3" y="213" width="1.4" height="15.0" fill="rgb(246,33,27)" rx="2" ry="2" />
<text  x="602.27" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="882.9" y="277" width="1.4" height="15.0" fill="rgb(231,219,48)" rx="2" ry="2" />
<text  x="885.88" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (3 samples, 0.37%)</title><rect x="437.6" y="149" width="4.4" height="15.0" fill="rgb(234,208,40)" rx="2" ry="2" />
<text  x="440.62" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.12%)</title><rect x="1182.7" y="261" width="1.4" height="15.0" fill="rgb(225,164,23)" rx="2" ry="2" />
<text  x="1185.65" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (15 samples, 1.87%)</title><rect x="862.3" y="357" width="22.0" height="15.0" fill="rgb(252,96,31)" rx="2" ry="2" />
<text  x="865.30" y="367.5" >M..</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (12 samples, 1.49%)</title><rect x="784.4" y="149" width="17.7" height="15.0" fill="rgb(211,59,19)" rx="2" ry="2" />
<text  x="787.42" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.62%)</title><rect x="877.0" y="309" width="7.3" height="15.0" fill="rgb(242,64,30)" rx="2" ry="2" />
<text  x="880.00" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (2 samples, 0.25%)</title><rect x="33.5" y="165" width="3.0" height="15.0" fill="rgb(212,6,47)" rx="2" ry="2" />
<text  x="36.51" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="48.2" y="165" width="1.5" height="15.0" fill="rgb(222,213,17)" rx="2" ry="2" />
<text  x="51.21" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (2 samples, 0.25%)</title><rect x="30.6" y="165" width="2.9" height="15.0" fill="rgb(222,183,1)" rx="2" ry="2" />
<text  x="33.57" y="175.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageIdAndRank, (1 samples, 0.12%)</title><rect x="860.8" y="277" width="1.5" height="15.0" fill="rgb(238,169,10)" rx="2" ry="2" />
<text  x="863.83" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;Page, (6 samples, 0.75%)</title><rect x="844.7" y="213" width="8.8" height="15.0" fill="rgb(253,20,30)" rx="2" ry="2" />
<text  x="847.67" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.12%)</title><rect x="882.9" y="245" width="1.4" height="15.0" fill="rgb(223,80,11)" rx="2" ry="2" />
<text  x="885.88" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="860.8" y="197" width="1.5" height="15.0" fill="rgb(237,78,38)" rx="2" ry="2" />
<text  x="863.83" y="207.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, (2 samples, 0.25%)</title><rect x="781.5" y="133" width="2.9" height="15.0" fill="rgb(254,126,17)" rx="2" ry="2" />
<text  x="784.48" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (31 samples, 3.86%)</title><rect x="756.5" y="165" width="45.6" height="15.0" fill="rgb(241,114,53)" rx="2" ry="2" />
<text  x="759.50" y="175.5" >std:..</text>
</g>
</g>
</svg>
