<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="383.2" y="213" width="1.6" height="15.0" fill="rgb(227,56,47)" rx="2" ry="2" />
<text  x="386.22" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.13%)</title><rect x="883.5" y="373" width="1.6" height="15.0" fill="rgb(244,100,9)" rx="2" ry="2" />
<text  x="886.49" y="383.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.13%)</title><rect x="41.8" y="149" width="1.6" height="15.0" fill="rgb(243,130,46)" rx="2" ry="2" />
<text  x="44.76" y="159.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.13%)</title><rect x="416.6" y="261" width="1.6" height="15.0" fill="rgb(242,148,21)" rx="2" ry="2" />
<text  x="419.57" y="271.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.13%)</title><rect x="875.5" y="261" width="1.6" height="15.0" fill="rgb(246,160,13)" rx="2" ry="2" />
<text  x="878.55" y="271.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.13%)</title><rect x="854.9" y="133" width="1.6" height="15.0" fill="rgb(249,38,17)" rx="2" ry="2" />
<text  x="857.90" y="143.5" ></text>
</g>
<g >
<title>NetworkWithoutManyEdgesGenerator::generateNetworkOfSize (8 samples, 1.08%)</title><rect x="1177.3" y="421" width="12.7" height="15.0" fill="rgb(240,84,12)" rx="2" ry="2" />
<text  x="1180.29" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (17 samples, 2.29%)</title><rect x="816.8" y="261" width="27.0" height="15.0" fill="rgb(246,143,13)" rx="2" ry="2" />
<text  x="819.78" y="271.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="319.7" y="245" width="1.6" height="15.0" fill="rgb(226,31,13)" rx="2" ry="2" />
<text  x="322.69" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="386.4" y="85" width="1.6" height="15.0" fill="rgb(234,197,47)" rx="2" ry="2" />
<text  x="389.39" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (2 samples, 0.27%)</title><rect x="54.5" y="229" width="3.1" height="15.0" fill="rgb(232,36,2)" rx="2" ry="2" />
<text  x="57.47" y="239.5" ></text>
</g>
<g >
<title>grow_heap (2 samples, 0.27%)</title><rect x="392.7" y="181" width="3.2" height="15.0" fill="rgb(248,200,1)" rx="2" ry="2" />
<text  x="395.75" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, (1 samples, 0.13%)</title><rect x="540.4" y="229" width="1.6" height="15.0" fill="rgb(219,210,54)" rx="2" ry="2" />
<text  x="543.44" y="239.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.13%)</title><rect x="25.9" y="165" width="1.6" height="15.0" fill="rgb(216,94,1)" rx="2" ry="2" />
<text  x="28.88" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.27%)</title><rect x="54.5" y="149" width="3.1" height="15.0" fill="rgb(230,157,48)" rx="2" ry="2" />
<text  x="57.47" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="875.5" y="277" width="1.6" height="15.0" fill="rgb(248,120,17)" rx="2" ry="2" />
<text  x="878.55" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="49.7" y="165" width="1.6" height="15.0" fill="rgb(227,112,14)" rx="2" ry="2" />
<text  x="52.70" y="175.5" ></text>
</g>
<g >
<title>tcache_put (2 samples, 0.27%)</title><rect x="419.7" y="261" width="3.2" height="15.0" fill="rgb(221,119,19)" rx="2" ry="2" />
<text  x="422.74" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (11 samples, 1.48%)</title><rect x="823.1" y="213" width="17.5" height="15.0" fill="rgb(207,187,15)" rx="2" ry="2" />
<text  x="826.14" y="223.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.13%)</title><rect x="854.9" y="149" width="1.6" height="15.0" fill="rgb(223,187,10)" rx="2" ry="2" />
<text  x="857.90" y="159.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.13%)</title><rect x="1185.2" y="277" width="1.6" height="15.0" fill="rgb(249,24,26)" rx="2" ry="2" />
<text  x="1188.24" y="287.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;PageIdAndRank*, (2 samples, 0.27%)</title><rect x="384.8" y="197" width="3.2" height="15.0" fill="rgb(213,80,20)" rx="2" ry="2" />
<text  x="387.80" y="207.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.13%)</title><rect x="1178.9" y="325" width="1.6" height="15.0" fill="rgb(216,28,54)" rx="2" ry="2" />
<text  x="1181.88" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="32.2" y="197" width="1.6" height="15.0" fill="rgb(216,58,7)" rx="2" ry="2" />
<text  x="35.23" y="207.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (13 samples, 1.75%)</title><rect x="786.6" y="165" width="20.7" height="15.0" fill="rgb(206,2,14)" rx="2" ry="2" />
<text  x="789.61" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (3 samples, 0.40%)</title><rect x="858.1" y="245" width="4.7" height="15.0" fill="rgb(205,184,4)" rx="2" ry="2" />
<text  x="861.08" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.27%)</title><rect x="403.9" y="261" width="3.1" height="15.0" fill="rgb(220,212,53)" rx="2" ry="2" />
<text  x="406.86" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.13%)</title><rect x="856.5" y="261" width="1.6" height="15.0" fill="rgb(234,156,20)" rx="2" ry="2" />
<text  x="859.49" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="842.2" y="245" width="1.6" height="15.0" fill="rgb(241,146,48)" rx="2" ry="2" />
<text  x="845.19" y="255.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;PageIdAndRank*, (2 samples, 0.27%)</title><rect x="384.8" y="181" width="3.2" height="15.0" fill="rgb(206,90,10)" rx="2" ry="2" />
<text  x="387.80" y="191.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="384.8" y="165" width="3.2" height="15.0" fill="rgb(247,27,30)" rx="2" ry="2" />
<text  x="387.80" y="175.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (8 samples, 1.08%)</title><rect x="44.9" y="277" width="12.7" height="15.0" fill="rgb(249,106,15)" rx="2" ry="2" />
<text  x="47.94" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.27%)</title><rect x="376.9" y="85" width="3.1" height="15.0" fill="rgb(221,105,3)" rx="2" ry="2" />
<text  x="379.86" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageIdAndRank&gt;::construct&lt;PageIdAndRank, (1 samples, 0.13%)</title><rect x="386.4" y="133" width="1.6" height="15.0" fill="rgb(215,184,18)" rx="2" ry="2" />
<text  x="389.39" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (2 samples, 0.27%)</title><rect x="1178.9" y="357" width="3.2" height="15.0" fill="rgb(227,173,1)" rx="2" ry="2" />
<text  x="1181.88" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="845.4" y="229" width="1.6" height="15.0" fill="rgb(220,72,39)" rx="2" ry="2" />
<text  x="848.37" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId&gt; (1 samples, 0.13%)</title><rect x="881.9" y="325" width="1.6" height="15.0" fill="rgb(206,216,47)" rx="2" ry="2" />
<text  x="884.90" y="335.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.27%)</title><rect x="858.1" y="229" width="3.2" height="15.0" fill="rgb(208,91,17)" rx="2" ry="2" />
<text  x="861.08" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (40 samples, 5.38%)</title><rect x="321.3" y="229" width="63.5" height="15.0" fill="rgb(212,108,37)" rx="2" ry="2" />
<text  x="324.28" y="239.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (2 samples, 0.27%)</title><rect x="54.5" y="213" width="3.1" height="15.0" fill="rgb(225,85,44)" rx="2" ry="2" />
<text  x="57.47" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.27%)</title><rect x="853.3" y="197" width="3.2" height="15.0" fill="rgb(242,9,26)" rx="2" ry="2" />
<text  x="856.31" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (167 samples, 22.48%)</title><rect x="551.6" y="261" width="265.2" height="15.0" fill="rgb(222,219,29)" rx="2" ry="2" />
<text  x="554.56" y="271.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="384.8" y="245" width="3.2" height="15.0" fill="rgb(232,13,50)" rx="2" ry="2" />
<text  x="387.80" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;PageId, (1 samples, 0.13%)</title><rect x="51.3" y="181" width="1.6" height="15.0" fill="rgb(208,160,2)" rx="2" ry="2" />
<text  x="54.29" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 0.81%)</title><rect x="27.5" y="229" width="9.5" height="15.0" fill="rgb(249,65,43)" rx="2" ry="2" />
<text  x="30.47" y="239.5" ></text>
</g>
<g >
<title>PageId::PageId (19 samples, 2.56%)</title><rect x="349.9" y="117" width="30.1" height="15.0" fill="rgb(234,47,6)" rx="2" ry="2" />
<text  x="352.87" y="127.5" >Pa..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::getResult (2 samples, 0.27%)</title><rect x="862.8" y="405" width="3.2" height="15.0" fill="rgb(232,61,3)" rx="2" ry="2" />
<text  x="865.84" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;PageId&gt; (1 samples, 0.13%)</title><rect x="861.3" y="229" width="1.5" height="15.0" fill="rgb(243,181,35)" rx="2" ry="2" />
<text  x="864.25" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;Page, (2 samples, 0.27%)</title><rect x="853.3" y="261" width="3.2" height="15.0" fill="rgb(238,8,3)" rx="2" ry="2" />
<text  x="856.31" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 0.67%)</title><rect x="389.6" y="261" width="7.9" height="15.0" fill="rgb(226,166,52)" rx="2" ry="2" />
<text  x="392.57" y="271.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.13%)</title><rect x="388.0" y="261" width="1.6" height="15.0" fill="rgb(224,199,29)" rx="2" ry="2" />
<text  x="390.98" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.40%)</title><rect x="38.6" y="229" width="4.8" height="15.0" fill="rgb(232,226,29)" rx="2" ry="2" />
<text  x="41.59" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="1180.5" y="309" width="1.6" height="15.0" fill="rgb(206,75,26)" rx="2" ry="2" />
<text  x="1183.47" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="337.2" y="101" width="1.5" height="15.0" fill="rgb(219,66,10)" rx="2" ry="2" />
<text  x="340.16" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="785.0" y="197" width="1.6" height="15.0" fill="rgb(208,229,18)" rx="2" ry="2" />
<text  x="788.02" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.13%)</title><rect x="341.9" y="37" width="1.6" height="15.0" fill="rgb(231,114,0)" rx="2" ry="2" />
<text  x="344.92" y="47.5" ></text>
</g>
<g >
<title>PageId::PageId (4 samples, 0.54%)</title><rect x="21.1" y="261" width="6.4" height="15.0" fill="rgb(243,52,6)" rx="2" ry="2" />
<text  x="24.12" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.27%)</title><rect x="380.0" y="197" width="3.2" height="15.0" fill="rgb(250,6,3)" rx="2" ry="2" />
<text  x="383.04" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="875.5" y="325" width="1.6" height="15.0" fill="rgb(227,182,50)" rx="2" ry="2" />
<text  x="878.55" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (4 samples, 0.54%)</title><rect x="337.2" y="133" width="6.3" height="15.0" fill="rgb(246,134,9)" rx="2" ry="2" />
<text  x="340.16" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="862.8" y="389" width="3.2" height="15.0" fill="rgb(217,7,29)" rx="2" ry="2" />
<text  x="865.84" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.54%)</title><rect x="21.1" y="245" width="6.4" height="15.0" fill="rgb(231,10,15)" rx="2" ry="2" />
<text  x="24.12" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="37.0" y="229" width="1.6" height="15.0" fill="rgb(254,107,52)" rx="2" ry="2" />
<text  x="40.00" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (2 samples, 0.27%)</title><rect x="54.5" y="197" width="3.1" height="15.0" fill="rgb(224,13,45)" rx="2" ry="2" />
<text  x="57.47" y="207.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.13%)</title><rect x="883.5" y="293" width="1.6" height="15.0" fill="rgb(236,131,1)" rx="2" ry="2" />
<text  x="886.49" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="746.9" y="229" width="1.6" height="15.0" fill="rgb(238,54,44)" rx="2" ry="2" />
<text  x="749.90" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, (1 samples, 0.13%)</title><rect x="842.2" y="229" width="1.6" height="15.0" fill="rgb(227,94,45)" rx="2" ry="2" />
<text  x="845.19" y="239.5" ></text>
</g>
<g >
<title>Page::~Page (1 samples, 0.13%)</title><rect x="1188.4" y="405" width="1.6" height="15.0" fill="rgb(233,217,33)" rx="2" ry="2" />
<text  x="1191.41" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (2 samples, 0.27%)</title><rect x="537.3" y="245" width="3.1" height="15.0" fill="rgb(217,177,38)" rx="2" ry="2" />
<text  x="540.27" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (4 samples, 0.54%)</title><rect x="410.2" y="261" width="6.4" height="15.0" fill="rgb(228,57,27)" rx="2" ry="2" />
<text  x="413.22" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.13%)</title><rect x="877.1" y="341" width="1.6" height="15.0" fill="rgb(248,46,27)" rx="2" ry="2" />
<text  x="880.13" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (3 samples, 0.40%)</title><rect x="338.7" y="85" width="4.8" height="15.0" fill="rgb(230,88,15)" rx="2" ry="2" />
<text  x="341.75" y="95.5" ></text>
</g>
<g >
<title>std::mutex::lock (48 samples, 6.46%)</title><rect x="424.5" y="277" width="76.2" height="15.0" fill="rgb(230,135,45)" rx="2" ry="2" />
<text  x="427.51" y="287.5" >std::mut..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (198 samples, 26.65%)</title><rect x="862.8" y="421" width="314.5" height="15.0" fill="rgb(244,68,31)" rx="2" ry="2" />
<text  x="865.84" y="431.5" >MultiThreadedPageRankComputer::computeForN..</text>
</g>
<g >
<title>std::unordered_set&lt;PageId, (3 samples, 0.40%)</title><rect x="877.1" y="389" width="4.8" height="15.0" fill="rgb(223,48,7)" rx="2" ry="2" />
<text  x="880.13" y="399.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (164 samples, 22.07%)</title><rect x="59.2" y="213" width="260.5" height="15.0" fill="rgb(233,148,44)" rx="2" ry="2" />
<text  x="62.23" y="223.5" >futex_wait_cancelable</text>
</g>
<g >
<title>sysmalloc (2 samples, 0.27%)</title><rect x="54.5" y="117" width="3.1" height="15.0" fill="rgb(231,119,11)" rx="2" ry="2" />
<text  x="57.47" y="127.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (208 samples, 27.99%)</title><rect x="57.6" y="293" width="330.4" height="15.0" fill="rgb(249,210,34)" rx="2" ry="2" />
<text  x="60.64" y="303.5" >MultiThreadedPageRankComputer::WorkerData::w..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (7 samples, 0.94%)</title><rect x="866.0" y="389" width="11.1" height="15.0" fill="rgb(247,3,9)" rx="2" ry="2" />
<text  x="869.02" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (15 samples, 2.02%)</title><rect x="508.7" y="261" width="23.8" height="15.0" fill="rgb(238,128,52)" rx="2" ry="2" />
<text  x="511.68" y="271.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="395.9" y="245" width="1.6" height="15.0" fill="rgb(215,45,40)" rx="2" ry="2" />
<text  x="398.92" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.13%)</title><rect x="381.6" y="181" width="1.6" height="15.0" fill="rgb(207,185,53)" rx="2" ry="2" />
<text  x="384.63" y="191.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.13%)</title><rect x="1186.8" y="325" width="1.6" height="15.0" fill="rgb(236,210,38)" rx="2" ry="2" />
<text  x="1189.82" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (195 samples, 26.24%)</title><rect x="542.0" y="277" width="309.7" height="15.0" fill="rgb(213,89,5)" rx="2" ry="2" />
<text  x="545.03" y="287.5" >std::__detail::_Map_base&lt;PageId,</text>
</g>
<g >
<title>PageId::PageId (2 samples, 0.27%)</title><rect x="862.8" y="293" width="3.2" height="15.0" fill="rgb(216,164,22)" rx="2" ry="2" />
<text  x="865.84" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (4 samples, 0.54%)</title><rect x="389.6" y="229" width="6.3" height="15.0" fill="rgb(231,199,29)" rx="2" ry="2" />
<text  x="392.57" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (3 samples, 0.40%)</title><rect x="866.0" y="293" width="4.8" height="15.0" fill="rgb(253,65,36)" rx="2" ry="2" />
<text  x="869.02" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (11 samples, 1.48%)</title><rect x="27.5" y="261" width="17.4" height="15.0" fill="rgb(225,48,44)" rx="2" ry="2" />
<text  x="30.47" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.40%)</title><rect x="847.0" y="261" width="4.7" height="15.0" fill="rgb(218,13,9)" rx="2" ry="2" />
<text  x="849.96" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.54%)</title><rect x="370.5" y="85" width="6.4" height="15.0" fill="rgb(220,188,37)" rx="2" ry="2" />
<text  x="373.51" y="95.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (3 samples, 0.40%)</title><rect x="338.7" y="117" width="4.8" height="15.0" fill="rgb(237,177,23)" rx="2" ry="2" />
<text  x="341.75" y="127.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.13%)</title><rect x="853.3" y="165" width="1.6" height="15.0" fill="rgb(205,13,13)" rx="2" ry="2" />
<text  x="856.31" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1180.5" y="325" width="1.6" height="15.0" fill="rgb(229,178,13)" rx="2" ry="2" />
<text  x="1183.47" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 0.27%)</title><rect x="881.9" y="389" width="3.2" height="15.0" fill="rgb(249,87,29)" rx="2" ry="2" />
<text  x="884.90" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (40 samples, 5.38%)</title><rect x="321.3" y="245" width="63.5" height="15.0" fill="rgb(244,92,18)" rx="2" ry="2" />
<text  x="324.28" y="255.5" >std::_..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="850.1" y="229" width="1.6" height="15.0" fill="rgb(219,111,0)" rx="2" ry="2" />
<text  x="853.13" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (2 samples, 0.27%)</title><rect x="1183.6" y="389" width="3.2" height="15.0" fill="rgb(227,83,28)" rx="2" ry="2" />
<text  x="1186.65" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="384.8" y="277" width="3.2" height="15.0" fill="rgb(209,132,7)" rx="2" ry="2" />
<text  x="387.80" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (28 samples, 3.77%)</title><rect x="335.6" y="181" width="44.4" height="15.0" fill="rgb(230,146,51)" rx="2" ry="2" />
<text  x="338.57" y="191.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (7 samples, 0.94%)</title><rect x="521.4" y="229" width="11.1" height="15.0" fill="rgb(210,155,34)" rx="2" ry="2" />
<text  x="524.39" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.13%)</title><rect x="880.3" y="341" width="1.6" height="15.0" fill="rgb(243,127,26)" rx="2" ry="2" />
<text  x="883.31" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 0.94%)</title><rect x="735.8" y="229" width="11.1" height="15.0" fill="rgb(241,90,33)" rx="2" ry="2" />
<text  x="738.79" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (4 samples, 0.54%)</title><rect x="46.5" y="197" width="6.4" height="15.0" fill="rgb(215,185,22)" rx="2" ry="2" />
<text  x="49.53" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="341.9" y="53" width="1.6" height="15.0" fill="rgb(254,83,35)" rx="2" ry="2" />
<text  x="344.92" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.40%)</title><rect x="877.1" y="357" width="4.8" height="15.0" fill="rgb(239,171,22)" rx="2" ry="2" />
<text  x="880.13" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; (1 samples, 0.13%)</title><rect x="850.1" y="213" width="1.6" height="15.0" fill="rgb(206,114,28)" rx="2" ry="2" />
<text  x="853.13" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (3 samples, 0.40%)</title><rect x="812.0" y="229" width="4.8" height="15.0" fill="rgb(213,116,17)" rx="2" ry="2" />
<text  x="815.02" y="239.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.13%)</title><rect x="56.1" y="101" width="1.5" height="15.0" fill="rgb(227,83,54)" rx="2" ry="2" />
<text  x="59.06" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="49.7" y="181" width="1.6" height="15.0" fill="rgb(208,160,31)" rx="2" ry="2" />
<text  x="52.70" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 0.94%)</title><rect x="866.0" y="357" width="11.1" height="15.0" fill="rgb(213,20,40)" rx="2" ry="2" />
<text  x="869.02" y="367.5" ></text>
</g>
<g >
<title>clone (537 samples, 72.27%)</title><rect x="10.0" y="453" width="852.8" height="15.0" fill="rgb(247,166,48)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >clone</text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="384.8" y="261" width="3.2" height="15.0" fill="rgb(228,86,52)" rx="2" ry="2" />
<text  x="387.80" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (23 samples, 3.10%)</title><rect x="343.5" y="165" width="36.5" height="15.0" fill="rgb(244,36,47)" rx="2" ry="2" />
<text  x="346.51" y="175.5" >std..</text>
</g>
<g >
<title>std::vector&lt;PageId, (3 samples, 0.40%)</title><rect x="858.1" y="293" width="4.7" height="15.0" fill="rgb(237,109,40)" rx="2" ry="2" />
<text  x="861.08" y="303.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.27%)</title><rect x="862.8" y="261" width="3.2" height="15.0" fill="rgb(210,42,9)" rx="2" ry="2" />
<text  x="865.84" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.13%)</title><rect x="52.9" y="197" width="1.6" height="15.0" fill="rgb(247,169,22)" rx="2" ry="2" />
<text  x="55.88" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="388.0" y="245" width="1.6" height="15.0" fill="rgb(235,145,26)" rx="2" ry="2" />
<text  x="390.98" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="21.1" y="229" width="1.6" height="15.0" fill="rgb(239,225,22)" rx="2" ry="2" />
<text  x="24.12" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1185.2" y="309" width="1.6" height="15.0" fill="rgb(212,152,47)" rx="2" ry="2" />
<text  x="1188.24" y="319.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (537 samples, 72.27%)</title><rect x="10.0" y="309" width="852.8" height="15.0" fill="rgb(247,40,23)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (6 samples, 0.81%)</title><rect x="44.9" y="229" width="9.6" height="15.0" fill="rgb(253,203,54)" rx="2" ry="2" />
<text  x="47.94" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1185.2" y="341" width="1.6" height="15.0" fill="rgb(254,162,36)" rx="2" ry="2" />
<text  x="1188.24" y="351.5" ></text>
</g>
<g >
<title>?? (537 samples, 72.27%)</title><rect x="10.0" y="421" width="852.8" height="15.0" fill="rgb(241,154,14)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >??</text>
</g>
<g >
<title>PageId::~PageId (3 samples, 0.40%)</title><rect x="418.2" y="293" width="4.7" height="15.0" fill="rgb(220,55,48)" rx="2" ry="2" />
<text  x="421.16" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*&gt; (1 samples, 0.13%)</title><rect x="881.9" y="357" width="1.6" height="15.0" fill="rgb(219,49,3)" rx="2" ry="2" />
<text  x="884.90" y="367.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="862.8" y="325" width="3.2" height="15.0" fill="rgb(236,2,7)" rx="2" ry="2" />
<text  x="865.84" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.13%)</title><rect x="319.7" y="261" width="1.6" height="15.0" fill="rgb(249,100,37)" rx="2" ry="2" />
<text  x="322.69" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (2 samples, 0.27%)</title><rect x="534.1" y="213" width="3.2" height="15.0" fill="rgb(213,88,24)" rx="2" ry="2" />
<text  x="537.09" y="223.5" ></text>
</g>
<g >
<title>__lll_lock_wait (48 samples, 6.46%)</title><rect x="424.5" y="229" width="76.2" height="15.0" fill="rgb(210,108,44)" rx="2" ry="2" />
<text  x="427.51" y="239.5" >__lll_lo..</text>
</g>
<g >
<title>std::vector&lt;PageId, (3 samples, 0.40%)</title><rect x="858.1" y="277" width="4.7" height="15.0" fill="rgb(237,49,0)" rx="2" ry="2" />
<text  x="861.08" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (40 samples, 5.38%)</title><rect x="321.3" y="277" width="63.5" height="15.0" fill="rgb(217,171,42)" rx="2" ry="2" />
<text  x="324.28" y="287.5" >std::u..</text>
</g>
<g >
<title>sysmalloc (3 samples, 0.40%)</title><rect x="391.2" y="197" width="4.7" height="15.0" fill="rgb(243,179,15)" rx="2" ry="2" />
<text  x="394.16" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;PageId, (1 samples, 0.13%)</title><rect x="878.7" y="325" width="1.6" height="15.0" fill="rgb(214,211,43)" rx="2" ry="2" />
<text  x="881.72" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (22 samples, 2.96%)</title><rect x="507.1" y="277" width="34.9" height="15.0" fill="rgb(212,211,16)" rx="2" ry="2" />
<text  x="510.09" y="287.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 0.67%)</title><rect x="44.9" y="213" width="8.0" height="15.0" fill="rgb(205,46,19)" rx="2" ry="2" />
<text  x="47.94" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (4 samples, 0.54%)</title><rect x="870.8" y="341" width="6.3" height="15.0" fill="rgb(223,88,33)" rx="2" ry="2" />
<text  x="873.78" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.13%)</title><rect x="881.9" y="293" width="1.6" height="15.0" fill="rgb(206,222,7)" rx="2" ry="2" />
<text  x="884.90" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, (2 samples, 0.27%)</title><rect x="847.0" y="229" width="3.1" height="15.0" fill="rgb(231,162,2)" rx="2" ry="2" />
<text  x="849.96" y="239.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, (1 samples, 0.13%)</title><rect x="1186.8" y="357" width="1.6" height="15.0" fill="rgb(243,3,29)" rx="2" ry="2" />
<text  x="1189.82" y="367.5" ></text>
</g>
<g >
<title>main (206 samples, 27.73%)</title><rect x="862.8" y="453" width="327.2" height="15.0" fill="rgb(211,189,39)" rx="2" ry="2" />
<text  x="865.84" y="463.5" >main</text>
</g>
<g >
<title>PageId::PageId (5 samples, 0.67%)</title><rect x="389.6" y="277" width="7.9" height="15.0" fill="rgb(210,122,42)" rx="2" ry="2" />
<text  x="392.57" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.40%)</title><rect x="877.1" y="373" width="4.8" height="15.0" fill="rgb(242,107,51)" rx="2" ry="2" />
<text  x="880.13" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (3 samples, 0.40%)</title><rect x="22.7" y="213" width="4.8" height="15.0" fill="rgb(249,192,42)" rx="2" ry="2" />
<text  x="25.71" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.40%)</title><rect x="30.6" y="213" width="4.8" height="15.0" fill="rgb(217,34,6)" rx="2" ry="2" />
<text  x="33.65" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (12 samples, 1.62%)</title><rect x="513.4" y="245" width="19.1" height="15.0" fill="rgb(217,21,0)" rx="2" ry="2" />
<text  x="516.45" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="1186.8" y="309" width="1.6" height="15.0" fill="rgb(252,88,2)" rx="2" ry="2" />
<text  x="1189.82" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (221 samples, 29.74%)</title><rect x="500.7" y="293" width="351.0" height="15.0" fill="rgb(222,159,42)" rx="2" ry="2" />
<text  x="503.74" y="303.5" >std::unordered_map&lt;PageId,</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (40 samples, 5.38%)</title><rect x="321.3" y="261" width="63.5" height="15.0" fill="rgb(228,186,49)" rx="2" ry="2" />
<text  x="324.28" y="271.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="845.4" y="245" width="1.6" height="15.0" fill="rgb(246,100,43)" rx="2" ry="2" />
<text  x="848.37" y="255.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (537 samples, 72.27%)</title><rect x="10.0" y="357" width="852.8" height="15.0" fill="rgb(244,32,31)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>PageId::PageId (3 samples, 0.40%)</title><rect x="338.7" y="101" width="4.8" height="15.0" fill="rgb(235,113,51)" rx="2" ry="2" />
<text  x="341.75" y="111.5" ></text>
</g>
<g >
<title>unlink_chunk (1 samples, 0.13%)</title><rect x="878.7" y="245" width="1.6" height="15.0" fill="rgb(212,58,45)" rx="2" ry="2" />
<text  x="881.72" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="875.5" y="293" width="1.6" height="15.0" fill="rgb(213,210,46)" rx="2" ry="2" />
<text  x="878.55" y="303.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (1 samples, 0.13%)</title><rect x="386.4" y="117" width="1.6" height="15.0" fill="rgb(247,16,16)" rx="2" ry="2" />
<text  x="389.39" y="127.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (164 samples, 22.07%)</title><rect x="59.2" y="245" width="260.5" height="15.0" fill="rgb(213,214,1)" rx="2" ry="2" />
<text  x="62.23" y="255.5" >__pthread_cond_wait</text>
</g>
<g >
<title>__vsnprintf_internal (1 samples, 0.13%)</title><rect x="1183.6" y="357" width="1.6" height="15.0" fill="rgb(246,8,4)" rx="2" ry="2" />
<text  x="1186.65" y="367.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (1 samples, 0.13%)</title><rect x="1186.8" y="373" width="1.6" height="15.0" fill="rgb(220,6,35)" rx="2" ry="2" />
<text  x="1189.82" y="383.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (537 samples, 72.27%)</title><rect x="10.0" y="373" width="852.8" height="15.0" fill="rgb(212,116,20)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.27%)</title><rect x="807.3" y="213" width="3.1" height="15.0" fill="rgb(218,220,31)" rx="2" ry="2" />
<text  x="810.25" y="223.5" ></text>
</g>
<g >
<title>Network::addPage (2 samples, 0.27%)</title><rect x="1178.9" y="405" width="3.2" height="15.0" fill="rgb(221,97,10)" rx="2" ry="2" />
<text  x="1181.88" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.40%)</title><rect x="38.6" y="245" width="4.8" height="15.0" fill="rgb(210,52,6)" rx="2" ry="2" />
<text  x="41.59" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 0.94%)</title><rect x="27.5" y="245" width="11.1" height="15.0" fill="rgb(247,38,9)" rx="2" ry="2" />
<text  x="30.47" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (19 samples, 2.56%)</title><rect x="349.9" y="101" width="30.1" height="15.0" fill="rgb(207,114,14)" rx="2" ry="2" />
<text  x="352.87" y="111.5" >st..</text>
</g>
<g >
<title>Page::generateId (1 samples, 0.13%)</title><rect x="1186.8" y="389" width="1.6" height="15.0" fill="rgb(248,125,10)" rx="2" ry="2" />
<text  x="1189.82" y="399.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.13%)</title><rect x="883.5" y="309" width="1.6" height="15.0" fill="rgb(224,139,6)" rx="2" ry="2" />
<text  x="886.49" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (2 samples, 0.27%)</title><rect x="781.8" y="197" width="3.2" height="15.0" fill="rgb(231,127,37)" rx="2" ry="2" />
<text  x="784.84" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 0.40%)</title><rect x="866.0" y="341" width="4.8" height="15.0" fill="rgb(242,9,14)" rx="2" ry="2" />
<text  x="869.02" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (3 samples, 0.40%)</title><rect x="853.3" y="277" width="4.8" height="15.0" fill="rgb(210,114,5)" rx="2" ry="2" />
<text  x="856.31" y="287.5" ></text>
</g>
<g >
<title>Page::getId (5 samples, 0.67%)</title><rect x="19.5" y="277" width="8.0" height="15.0" fill="rgb(222,84,39)" rx="2" ry="2" />
<text  x="22.53" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 0.94%)</title><rect x="866.0" y="373" width="11.1" height="15.0" fill="rgb(253,196,31)" rx="2" ry="2" />
<text  x="869.02" y="383.5" ></text>
</g>
<g >
<title>operator (4 samples, 0.54%)</title><rect x="389.6" y="245" width="6.3" height="15.0" fill="rgb(250,39,17)" rx="2" ry="2" />
<text  x="392.57" y="255.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.13%)</title><rect x="25.9" y="149" width="1.6" height="15.0" fill="rgb(208,181,41)" rx="2" ry="2" />
<text  x="28.88" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.40%)</title><rect x="866.0" y="325" width="4.8" height="15.0" fill="rgb(248,157,34)" rx="2" ry="2" />
<text  x="869.02" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="540.4" y="245" width="1.6" height="15.0" fill="rgb(232,36,19)" rx="2" ry="2" />
<text  x="543.44" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, (1 samples, 0.13%)</title><rect x="785.0" y="181" width="1.6" height="15.0" fill="rgb(213,165,43)" rx="2" ry="2" />
<text  x="788.02" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.27%)</title><rect x="24.3" y="197" width="3.2" height="15.0" fill="rgb(224,167,6)" rx="2" ry="2" />
<text  x="27.29" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 0.27%)</title><rect x="862.8" y="277" width="3.2" height="15.0" fill="rgb(224,21,18)" rx="2" ry="2" />
<text  x="865.84" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (8 samples, 1.08%)</title><rect x="44.9" y="245" width="12.7" height="15.0" fill="rgb(232,89,25)" rx="2" ry="2" />
<text  x="47.94" y="255.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (164 samples, 22.07%)</title><rect x="59.2" y="229" width="260.5" height="15.0" fill="rgb(219,27,8)" rx="2" ry="2" />
<text  x="62.23" y="239.5" >__pthread_cond_wait_common</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="850.1" y="245" width="1.6" height="15.0" fill="rgb(225,135,1)" rx="2" ry="2" />
<text  x="853.13" y="255.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.13%)</title><rect x="25.9" y="181" width="1.6" height="15.0" fill="rgb(226,20,37)" rx="2" ry="2" />
<text  x="28.88" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.81%)</title><rect x="797.7" y="133" width="9.6" height="15.0" fill="rgb(216,2,50)" rx="2" ry="2" />
<text  x="800.73" y="143.5" ></text>
</g>
<g >
<title>Page::Page (2 samples, 0.27%)</title><rect x="1178.9" y="341" width="3.2" height="15.0" fill="rgb(220,104,9)" rx="2" ry="2" />
<text  x="1181.88" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.27%)</title><rect x="872.4" y="325" width="3.1" height="15.0" fill="rgb(253,128,41)" rx="2" ry="2" />
<text  x="875.37" y="335.5" ></text>
</g>
<g >
<title>malloc_consolidate (3 samples, 0.40%)</title><rect x="866.0" y="261" width="4.8" height="15.0" fill="rgb(248,70,4)" rx="2" ry="2" />
<text  x="869.02" y="271.5" ></text>
</g>
<g >
<title>Page::getId (5 samples, 0.67%)</title><rect x="389.6" y="293" width="7.9" height="15.0" fill="rgb(242,65,22)" rx="2" ry="2" />
<text  x="392.57" y="303.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;PageId (1 samples, 0.13%)</title><rect x="785.0" y="165" width="1.6" height="15.0" fill="rgb(248,196,22)" rx="2" ry="2" />
<text  x="788.02" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (3 samples, 0.40%)</title><rect x="537.3" y="261" width="4.7" height="15.0" fill="rgb(207,223,34)" rx="2" ry="2" />
<text  x="540.27" y="271.5" ></text>
</g>
<g >
<title>operator (3 samples, 0.40%)</title><rect x="22.7" y="229" width="4.8" height="15.0" fill="rgb(240,54,20)" rx="2" ry="2" />
<text  x="25.71" y="239.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;PageId&gt; (1 samples, 0.13%)</title><rect x="43.4" y="245" width="1.5" height="15.0" fill="rgb(233,136,24)" rx="2" ry="2" />
<text  x="46.35" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (2 samples, 0.27%)</title><rect x="853.3" y="245" width="3.2" height="15.0" fill="rgb(226,122,35)" rx="2" ry="2" />
<text  x="856.31" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;PageId, (1 samples, 0.13%)</title><rect x="883.5" y="357" width="1.6" height="15.0" fill="rgb(230,145,37)" rx="2" ry="2" />
<text  x="886.49" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.27%)</title><rect x="853.3" y="181" width="3.2" height="15.0" fill="rgb(248,119,40)" rx="2" ry="2" />
<text  x="856.31" y="191.5" ></text>
</g>
<g >
<title>mprotect (2 samples, 0.27%)</title><rect x="392.7" y="165" width="3.2" height="15.0" fill="rgb(208,206,54)" rx="2" ry="2" />
<text  x="395.75" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, (1 samples, 0.13%)</title><rect x="519.8" y="213" width="1.6" height="15.0" fill="rgb(229,106,27)" rx="2" ry="2" />
<text  x="522.80" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.13%)</title><rect x="37.0" y="213" width="1.6" height="15.0" fill="rgb(232,10,47)" rx="2" ry="2" />
<text  x="40.00" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (2 samples, 0.27%)</title><rect x="1178.9" y="389" width="3.2" height="15.0" fill="rgb(208,178,10)" rx="2" ry="2" />
<text  x="1181.88" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;PageId, (1 samples, 0.13%)</title><rect x="880.3" y="325" width="1.6" height="15.0" fill="rgb(241,208,17)" rx="2" ry="2" />
<text  x="883.31" y="335.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.13%)</title><rect x="386.4" y="101" width="1.6" height="15.0" fill="rgb(237,190,44)" rx="2" ry="2" />
<text  x="389.39" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1185.2" y="357" width="1.6" height="15.0" fill="rgb(208,194,15)" rx="2" ry="2" />
<text  x="1188.24" y="367.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (537 samples, 72.27%)</title><rect x="10.0" y="405" width="852.8" height="15.0" fill="rgb(231,163,33)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 0.40%)</title><rect x="532.5" y="261" width="4.8" height="15.0" fill="rgb(216,21,26)" rx="2" ry="2" />
<text  x="535.50" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (537 samples, 72.27%)</title><rect x="10.0" y="325" width="852.8" height="15.0" fill="rgb(216,217,50)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>PageId::PageId (13 samples, 1.75%)</title><rect x="397.5" y="293" width="20.7" height="15.0" fill="rgb(212,118,42)" rx="2" ry="2" />
<text  x="400.51" y="303.5" ></text>
</g>
<g >
<title>PageId::operator== (13 samples, 1.75%)</title><rect x="786.6" y="181" width="20.7" height="15.0" fill="rgb(229,69,4)" rx="2" ry="2" />
<text  x="789.61" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (2 samples, 0.27%)</title><rect x="847.0" y="245" width="3.1" height="15.0" fill="rgb(248,63,5)" rx="2" ry="2" />
<text  x="849.96" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (537 samples, 72.27%)</title><rect x="10.0" y="341" width="852.8" height="15.0" fill="rgb(254,180,14)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>_int_malloc (4 samples, 0.54%)</title><rect x="389.6" y="213" width="6.3" height="15.0" fill="rgb(211,102,16)" rx="2" ry="2" />
<text  x="392.57" y="223.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.40%)</title><rect x="866.0" y="277" width="4.8" height="15.0" fill="rgb(229,181,31)" rx="2" ry="2" />
<text  x="869.02" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (2 samples, 0.27%)</title><rect x="862.8" y="373" width="3.2" height="15.0" fill="rgb(227,102,11)" rx="2" ry="2" />
<text  x="865.84" y="383.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.13%)</title><rect x="41.8" y="117" width="1.6" height="15.0" fill="rgb(254,108,53)" rx="2" ry="2" />
<text  x="44.76" y="127.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="319.7" y="229" width="1.6" height="15.0" fill="rgb(220,221,24)" rx="2" ry="2" />
<text  x="322.69" y="239.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.13%)</title><rect x="878.7" y="277" width="1.6" height="15.0" fill="rgb(232,2,23)" rx="2" ry="2" />
<text  x="881.72" y="287.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (48 samples, 6.46%)</title><rect x="424.5" y="245" width="76.2" height="15.0" fill="rgb(227,175,38)" rx="2" ry="2" />
<text  x="427.51" y="255.5" >__GI___p..</text>
</g>
<g >
<title>std::abs (1 samples, 0.13%)</title><rect x="422.9" y="293" width="1.6" height="15.0" fill="rgb(214,221,3)" rx="2" ry="2" />
<text  x="425.92" y="303.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.13%)</title><rect x="1185.2" y="293" width="1.6" height="15.0" fill="rgb(233,212,41)" rx="2" ry="2" />
<text  x="1188.24" y="303.5" ></text>
</g>
<g >
<title>start_thread (537 samples, 72.27%)</title><rect x="10.0" y="437" width="852.8" height="15.0" fill="rgb(245,209,10)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >start_thread</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="33.8" y="197" width="1.6" height="15.0" fill="rgb(233,201,44)" rx="2" ry="2" />
<text  x="36.82" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (9 samples, 1.21%)</title><rect x="826.3" y="197" width="14.3" height="15.0" fill="rgb(254,123,45)" rx="2" ry="2" />
<text  x="829.31" y="207.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (537 samples, 72.27%)</title><rect x="10.0" y="389" width="852.8" height="15.0" fill="rgb(215,19,26)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1178.9" y="309" width="1.6" height="15.0" fill="rgb(206,51,0)" rx="2" ry="2" />
<text  x="1181.88" y="319.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.27%)</title><rect x="54.5" y="133" width="3.1" height="15.0" fill="rgb(238,134,14)" rx="2" ry="2" />
<text  x="57.47" y="143.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (12 samples, 1.62%)</title><rect x="823.1" y="229" width="19.1" height="15.0" fill="rgb(222,178,24)" rx="2" ry="2" />
<text  x="826.14" y="239.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::~WorkerData (12 samples, 1.62%)</title><rect x="866.0" y="405" width="19.1" height="15.0" fill="rgb(244,104,43)" rx="2" ry="2" />
<text  x="869.02" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (30 samples, 4.04%)</title><rect x="335.6" y="213" width="47.6" height="15.0" fill="rgb(245,17,20)" rx="2" ry="2" />
<text  x="338.57" y="223.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="875.5" y="309" width="1.6" height="15.0" fill="rgb(241,146,27)" rx="2" ry="2" />
<text  x="878.55" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.13%)</title><rect x="810.4" y="213" width="1.6" height="15.0" fill="rgb(207,214,42)" rx="2" ry="2" />
<text  x="813.43" y="223.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.13%)</title><rect x="41.8" y="133" width="1.6" height="15.0" fill="rgb(233,43,12)" rx="2" ry="2" />
<text  x="44.76" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1182.1" y="373" width="1.5" height="15.0" fill="rgb(239,53,15)" rx="2" ry="2" />
<text  x="1185.06" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 0.27%)</title><rect x="534.1" y="229" width="3.2" height="15.0" fill="rgb(206,67,45)" rx="2" ry="2" />
<text  x="537.09" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;PageId*&gt; (1 samples, 0.13%)</title><rect x="881.9" y="341" width="1.6" height="15.0" fill="rgb(227,120,50)" rx="2" ry="2" />
<text  x="884.90" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.13%)</title><rect x="52.9" y="213" width="1.6" height="15.0" fill="rgb(238,199,13)" rx="2" ry="2" />
<text  x="55.88" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.27%)</title><rect x="40.2" y="165" width="3.2" height="15.0" fill="rgb(235,182,39)" rx="2" ry="2" />
<text  x="43.17" y="175.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.13%)</title><rect x="416.6" y="245" width="1.6" height="15.0" fill="rgb(210,7,32)" rx="2" ry="2" />
<text  x="419.57" y="255.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.27%)</title><rect x="40.2" y="197" width="3.2" height="15.0" fill="rgb(250,103,14)" rx="2" ry="2" />
<text  x="43.17" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.13%)</title><rect x="878.7" y="293" width="1.6" height="15.0" fill="rgb(230,27,20)" rx="2" ry="2" />
<text  x="881.72" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.13%)</title><rect x="35.4" y="213" width="1.6" height="15.0" fill="rgb(227,94,41)" rx="2" ry="2" />
<text  x="38.41" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (21 samples, 2.83%)</title><rect x="346.7" y="133" width="33.3" height="15.0" fill="rgb(242,120,16)" rx="2" ry="2" />
<text  x="349.69" y="143.5" >st..</text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="384.8" y="229" width="3.2" height="15.0" fill="rgb(214,15,50)" rx="2" ry="2" />
<text  x="387.80" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;PageId, (2 samples, 0.27%)</title><rect x="54.5" y="181" width="3.1" height="15.0" fill="rgb(216,229,51)" rx="2" ry="2" />
<text  x="57.47" y="191.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.13%)</title><rect x="56.1" y="85" width="1.5" height="15.0" fill="rgb(239,53,5)" rx="2" ry="2" />
<text  x="59.06" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="840.6" y="213" width="1.6" height="15.0" fill="rgb(227,140,1)" rx="2" ry="2" />
<text  x="843.61" y="223.5" ></text>
</g>
<g >
<title>PageIdAndRank::PageIdAndRank (2 samples, 0.27%)</title><rect x="862.8" y="309" width="3.2" height="15.0" fill="rgb(206,33,18)" rx="2" ry="2" />
<text  x="865.84" y="319.5" ></text>
</g>
<g >
<title>memcpy@plt (1 samples, 0.13%)</title><rect x="388.0" y="229" width="1.6" height="15.0" fill="rgb(222,133,45)" rx="2" ry="2" />
<text  x="390.98" y="239.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.13%)</title><rect x="337.2" y="117" width="1.5" height="15.0" fill="rgb(250,129,31)" rx="2" ry="2" />
<text  x="340.16" y="127.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (12 samples, 1.62%)</title><rect x="823.1" y="245" width="19.1" height="15.0" fill="rgb(205,170,25)" rx="2" ry="2" />
<text  x="826.14" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::allocate (2 samples, 0.27%)</title><rect x="853.3" y="229" width="3.2" height="15.0" fill="rgb(230,201,38)" rx="2" ry="2" />
<text  x="856.31" y="239.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.27%)</title><rect x="407.0" y="261" width="3.2" height="15.0" fill="rgb(218,38,29)" rx="2" ry="2" />
<text  x="410.04" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, (2 samples, 0.27%)</title><rect x="1183.6" y="373" width="3.2" height="15.0" fill="rgb(228,33,18)" rx="2" ry="2" />
<text  x="1186.65" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 0.27%)</title><rect x="518.2" y="229" width="3.2" height="15.0" fill="rgb(222,43,33)" rx="2" ry="2" />
<text  x="521.21" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.27%)</title><rect x="862.8" y="245" width="3.2" height="15.0" fill="rgb(230,15,18)" rx="2" ry="2" />
<text  x="865.84" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (3 samples, 0.40%)</title><rect x="858.1" y="261" width="4.7" height="15.0" fill="rgb(222,54,29)" rx="2" ry="2" />
<text  x="861.08" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (37 samples, 4.98%)</title><rect x="748.5" y="213" width="58.8" height="15.0" fill="rgb(208,78,21)" rx="2" ry="2" />
<text  x="751.49" y="223.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.13%)</title><rect x="35.4" y="197" width="1.6" height="15.0" fill="rgb(219,111,28)" rx="2" ry="2" />
<text  x="38.41" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (28 samples, 3.77%)</title><rect x="335.6" y="197" width="44.4" height="15.0" fill="rgb(227,97,0)" rx="2" ry="2" />
<text  x="338.57" y="207.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.13%)</title><rect x="878.7" y="341" width="1.6" height="15.0" fill="rgb(223,212,10)" rx="2" ry="2" />
<text  x="881.72" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (164 samples, 22.07%)</title><rect x="551.6" y="245" width="260.4" height="15.0" fill="rgb(206,186,8)" rx="2" ry="2" />
<text  x="554.56" y="255.5" >std::_Hashtable&lt;PageId,</text>
</g>
<g >
<title>__gthread_mutex_lock (48 samples, 6.46%)</title><rect x="424.5" y="261" width="76.2" height="15.0" fill="rgb(243,110,3)" rx="2" ry="2" />
<text  x="427.51" y="271.5" >__gthrea..</text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 0.27%)</title><rect x="534.1" y="245" width="3.2" height="15.0" fill="rgb(219,215,35)" rx="2" ry="2" />
<text  x="537.09" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;PageId*, (1 samples, 0.13%)</title><rect x="881.9" y="373" width="1.6" height="15.0" fill="rgb(217,156,35)" rx="2" ry="2" />
<text  x="884.90" y="383.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (164 samples, 22.07%)</title><rect x="59.2" y="261" width="260.5" height="15.0" fill="rgb(252,17,49)" rx="2" ry="2" />
<text  x="62.23" y="271.5" >std::condition_variable::wait(std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="791.4" y="149" width="1.6" height="15.0" fill="rgb(212,141,39)" rx="2" ry="2" />
<text  x="794.37" y="159.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.13%)</title><rect x="881.9" y="309" width="1.6" height="15.0" fill="rgb(213,41,23)" rx="2" ry="2" />
<text  x="884.90" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (13 samples, 1.75%)</title><rect x="786.6" y="197" width="20.7" height="15.0" fill="rgb(213,226,3)" rx="2" ry="2" />
<text  x="789.61" y="207.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.13%)</title><rect x="1182.1" y="389" width="1.5" height="15.0" fill="rgb(233,150,2)" rx="2" ry="2" />
<text  x="1185.06" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="745.3" y="213" width="1.6" height="15.0" fill="rgb(207,43,13)" rx="2" ry="2" />
<text  x="748.32" y="223.5" ></text>
</g>
<g >
<title>all (743 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(211,115,26)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (9 samples, 1.21%)</title><rect x="793.0" y="149" width="14.3" height="15.0" fill="rgb(211,61,34)" rx="2" ry="2" />
<text  x="795.96" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (4 samples, 0.54%)</title><rect x="851.7" y="293" width="6.4" height="15.0" fill="rgb(240,138,6)" rx="2" ry="2" />
<text  x="854.72" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (4 samples, 0.54%)</title><rect x="337.2" y="165" width="6.3" height="15.0" fill="rgb(208,46,7)" rx="2" ry="2" />
<text  x="340.16" y="175.5" ></text>
</g>
<g >
<title>std::thread::join() (184 samples, 24.76%)</title><rect x="885.1" y="405" width="292.2" height="15.0" fill="rgb(242,146,16)" rx="2" ry="2" />
<text  x="888.07" y="415.5" >std::thread::join()</text>
</g>
<g >
<title>Page::generateId (1 samples, 0.13%)</title><rect x="388.0" y="293" width="1.6" height="15.0" fill="rgb(220,70,40)" rx="2" ry="2" />
<text  x="390.98" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (2 samples, 0.27%)</title><rect x="843.8" y="261" width="3.2" height="15.0" fill="rgb(205,121,18)" rx="2" ry="2" />
<text  x="846.78" y="271.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (48 samples, 6.46%)</title><rect x="424.5" y="293" width="76.2" height="15.0" fill="rgb(211,162,35)" rx="2" ry="2" />
<text  x="427.51" y="303.5" >std::loc..</text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="57.6" y="277" width="1.6" height="15.0" fill="rgb(224,175,44)" rx="2" ry="2" />
<text  x="60.64" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (1 samples, 0.13%)</title><rect x="878.7" y="309" width="1.6" height="15.0" fill="rgb(205,58,46)" rx="2" ry="2" />
<text  x="881.72" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (22 samples, 2.96%)</title><rect x="345.1" y="149" width="34.9" height="15.0" fill="rgb(244,168,16)" rx="2" ry="2" />
<text  x="348.10" y="159.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1186.8" y="341" width="1.6" height="15.0" fill="rgb(214,218,41)" rx="2" ry="2" />
<text  x="1189.82" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::deallocate (1 samples, 0.13%)</title><rect x="883.5" y="325" width="1.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="886.49" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (2 samples, 0.27%)</title><rect x="1178.9" y="373" width="3.2" height="15.0" fill="rgb(253,139,35)" rx="2" ry="2" />
<text  x="1181.88" y="383.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.13%)</title><rect x="854.9" y="165" width="1.6" height="15.0" fill="rgb(232,105,37)" rx="2" ry="2" />
<text  x="857.90" y="175.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.13%)</title><rect x="1183.6" y="341" width="1.6" height="15.0" fill="rgb(238,5,0)" rx="2" ry="2" />
<text  x="1186.65" y="351.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.13%)</title><rect x="878.7" y="261" width="1.6" height="15.0" fill="rgb(215,80,43)" rx="2" ry="2" />
<text  x="881.72" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (4 samples, 0.54%)</title><rect x="337.2" y="149" width="6.3" height="15.0" fill="rgb(227,99,24)" rx="2" ry="2" />
<text  x="340.16" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, (1 samples, 0.13%)</title><rect x="49.7" y="149" width="1.6" height="15.0" fill="rgb(254,126,38)" rx="2" ry="2" />
<text  x="52.70" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (3 samples, 0.40%)</title><rect x="812.0" y="245" width="4.8" height="15.0" fill="rgb(213,68,39)" rx="2" ry="2" />
<text  x="815.02" y="255.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (184 samples, 24.76%)</title><rect x="885.1" y="389" width="292.2" height="15.0" fill="rgb(223,7,32)" rx="2" ry="2" />
<text  x="888.07" y="399.5" >__pthread_clockjoin_ex</text>
</g>
<g >
<title>unlink_chunk (1 samples, 0.13%)</title><rect x="869.2" y="245" width="1.6" height="15.0" fill="rgb(240,113,38)" rx="2" ry="2" />
<text  x="872.19" y="255.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.13%)</title><rect x="341.9" y="69" width="1.6" height="15.0" fill="rgb(224,139,51)" rx="2" ry="2" />
<text  x="344.92" y="79.5" ></text>
</g>
<g >
<title>pageRankComputationWithNumNodes (206 samples, 27.73%)</title><rect x="862.8" y="437" width="327.2" height="15.0" fill="rgb(208,218,22)" rx="2" ry="2" />
<text  x="865.84" y="447.5" >pageRankComputationWithNumNodes</text>
</g>
<g >
<title>std::_Hash_bytes(void (2 samples, 0.27%)</title><rect x="534.1" y="197" width="3.2" height="15.0" fill="rgb(215,187,22)" rx="2" ry="2" />
<text  x="537.09" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1185.2" y="325" width="1.6" height="15.0" fill="rgb(236,69,41)" rx="2" ry="2" />
<text  x="1188.24" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.13%)</title><rect x="883.5" y="341" width="1.6" height="15.0" fill="rgb(238,62,17)" rx="2" ry="2" />
<text  x="886.49" y="351.5" ></text>
</g>
<g >
<title>SimpleIdGenerator::generateId (1 samples, 0.13%)</title><rect x="388.0" y="277" width="1.6" height="15.0" fill="rgb(252,192,1)" rx="2" ry="2" />
<text  x="390.98" y="287.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.27%)</title><rect x="54.5" y="165" width="3.1" height="15.0" fill="rgb(228,26,10)" rx="2" ry="2" />
<text  x="57.47" y="175.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (164 samples, 22.07%)</title><rect x="59.2" y="277" width="260.5" height="15.0" fill="rgb(245,83,43)" rx="2" ry="2" />
<text  x="62.23" y="287.5" >std::condition_variable::wait&lt;Mult..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.13%)</title><rect x="1178.9" y="293" width="1.6" height="15.0" fill="rgb(219,43,1)" rx="2" ry="2" />
<text  x="1181.88" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;PageIdAndRank, (2 samples, 0.27%)</title><rect x="384.8" y="213" width="3.2" height="15.0" fill="rgb(242,56,35)" rx="2" ry="2" />
<text  x="387.80" y="223.5" ></text>
</g>
<g >
<title>operator (2 samples, 0.27%)</title><rect x="853.3" y="213" width="3.2" height="15.0" fill="rgb(219,158,54)" rx="2" ry="2" />
<text  x="856.31" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (12 samples, 1.62%)</title><rect x="399.1" y="277" width="19.1" height="15.0" fill="rgb(210,107,3)" rx="2" ry="2" />
<text  x="402.10" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; (3 samples, 0.40%)</title><rect x="866.0" y="309" width="4.8" height="15.0" fill="rgb(240,115,9)" rx="2" ry="2" />
<text  x="869.02" y="319.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNumWithGeneratedId (1 samples, 0.13%)</title><rect x="1186.8" y="405" width="1.6" height="15.0" fill="rgb(211,37,32)" rx="2" ry="2" />
<text  x="1189.82" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.13%)</title><rect x="408.6" y="245" width="1.6" height="15.0" fill="rgb(229,100,19)" rx="2" ry="2" />
<text  x="411.63" y="255.5" ></text>
</g>
<g >
<title>NetworkGenerator::generatePageFromNum (3 samples, 0.40%)</title><rect x="1182.1" y="405" width="4.7" height="15.0" fill="rgb(206,168,54)" rx="2" ry="2" />
<text  x="1185.06" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (11 samples, 1.48%)</title><rect x="27.5" y="277" width="17.4" height="15.0" fill="rgb(222,153,18)" rx="2" ry="2" />
<text  x="30.47" y="287.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (2 samples, 0.27%)</title><rect x="862.8" y="357" width="3.2" height="15.0" fill="rgb(247,17,18)" rx="2" ry="2" />
<text  x="865.84" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageIdAndRank (2 samples, 0.27%)</title><rect x="862.8" y="341" width="3.2" height="15.0" fill="rgb(216,86,38)" rx="2" ry="2" />
<text  x="865.84" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 0.13%)</title><rect x="319.7" y="277" width="1.6" height="15.0" fill="rgb(221,111,45)" rx="2" ry="2" />
<text  x="322.69" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.27%)</title><rect x="40.2" y="181" width="3.2" height="15.0" fill="rgb(224,110,34)" rx="2" ry="2" />
<text  x="43.17" y="191.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (24 samples, 3.23%)</title><rect x="19.5" y="293" width="38.1" height="15.0" fill="rgb(207,195,26)" rx="2" ry="2" />
<text  x="22.53" y="303.5" >Mul..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageIdAndRank&gt; (1 samples, 0.13%)</title><rect x="386.4" y="149" width="1.6" height="15.0" fill="rgb(249,118,3)" rx="2" ry="2" />
<text  x="389.39" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (3 samples, 0.40%)</title><rect x="38.6" y="213" width="4.8" height="15.0" fill="rgb(212,95,27)" rx="2" ry="2" />
<text  x="41.59" y="223.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.13%)</title><rect x="1188.4" y="389" width="1.6" height="15.0" fill="rgb(212,214,3)" rx="2" ry="2" />
<text  x="1191.41" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (6 samples, 0.81%)</title><rect x="735.8" y="213" width="9.5" height="15.0" fill="rgb(208,190,52)" rx="2" ry="2" />
<text  x="738.79" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;PageId, (8 samples, 1.08%)</title><rect x="44.9" y="261" width="12.7" height="15.0" fill="rgb(216,42,24)" rx="2" ry="2" />
<text  x="47.94" y="271.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.40%)</title><rect x="418.2" y="277" width="4.7" height="15.0" fill="rgb(225,135,50)" rx="2" ry="2" />
<text  x="421.16" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (40 samples, 5.38%)</title><rect x="748.5" y="229" width="63.5" height="15.0" fill="rgb(220,135,36)" rx="2" ry="2" />
<text  x="751.49" y="239.5" >std::_..</text>
</g>
</g>
</svg>
