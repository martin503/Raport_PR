<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.72%)</title><rect x="994.7" y="149" width="8.5" height="15.0" fill="rgb(247,23,41)" rx="2" ry="2" />
<text  x="997.75" y="159.5" ></text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (120 samples, 86.33%)</title><rect x="10.0" y="277" width="1018.7" height="15.0" fill="rgb(209,128,8)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>_IO_new_proc_close (10 samples, 7.19%)</title><rect x="731.6" y="149" width="84.9" height="15.0" fill="rgb(246,10,46)" rx="2" ry="2" />
<text  x="734.58" y="159.5" >_IO_new_p..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.72%)</title><rect x="1020.2" y="181" width="8.5" height="15.0" fill="rgb(227,37,43)" rx="2" ry="2" />
<text  x="1023.22" y="191.5" ></text>
</g>
<g >
<title>__GI___wait4 (2 samples, 1.44%)</title><rect x="731.6" y="117" width="17.0" height="15.0" fill="rgb(217,200,52)" rx="2" ry="2" />
<text  x="734.58" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (10 samples, 7.19%)</title><rect x="935.3" y="197" width="84.9" height="15.0" fill="rgb(227,208,53)" rx="2" ry="2" />
<text  x="938.32" y="207.5" >std::__de..</text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.72%)</title><rect x="222.2" y="37" width="8.5" height="15.0" fill="rgb(213,154,12)" rx="2" ry="2" />
<text  x="225.23" y="47.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (21 samples, 15.11%)</title><rect x="44.0" y="165" width="178.2" height="15.0" fill="rgb(234,61,36)" rx="2" ry="2" />
<text  x="46.96" y="175.5" >__pthread_cond_wait</text>
</g>
<g >
<title>__GI___libc_read (59 samples, 42.45%)</title><rect x="230.7" y="85" width="500.9" height="15.0" fill="rgb(237,46,47)" rx="2" ry="2" />
<text  x="233.72" y="95.5" >__GI___libc_read</text>
</g>
<g >
<title>__GI___libc_read (2 samples, 1.44%)</title><rect x="1045.7" y="277" width="17.0" height="15.0" fill="rgb(232,11,29)" rx="2" ry="2" />
<text  x="1048.68" y="287.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it (10 samples, 7.19%)</title><rect x="731.6" y="165" width="84.9" height="15.0" fill="rgb(225,71,18)" rx="2" ry="2" />
<text  x="734.58" y="175.5" >_IO_new_f..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (5 samples, 3.60%)</title><rect x="943.8" y="133" width="42.5" height="15.0" fill="rgb(248,102,40)" rx="2" ry="2" />
<text  x="946.81" y="143.5" >std..</text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;PageId (1 samples, 0.72%)</title><rect x="943.8" y="101" width="8.5" height="15.0" fill="rgb(244,14,18)" rx="2" ry="2" />
<text  x="946.81" y="111.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.72%)</title><rect x="1020.2" y="101" width="8.5" height="15.0" fill="rgb(238,177,48)" rx="2" ry="2" />
<text  x="1023.22" y="111.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (120 samples, 86.33%)</title><rect x="10.0" y="229" width="1018.7" height="15.0" fill="rgb(210,80,39)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (5 samples, 3.60%)</title><rect x="943.8" y="149" width="42.5" height="15.0" fill="rgb(218,30,40)" rx="2" ry="2" />
<text  x="946.81" y="159.5" >std..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (22 samples, 15.83%)</title><rect x="35.5" y="213" width="186.7" height="15.0" fill="rgb(230,71,40)" rx="2" ry="2" />
<text  x="38.47" y="223.5" >MultiThreadedPageRankCom..</text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (21 samples, 15.11%)</title><rect x="44.0" y="197" width="178.2" height="15.0" fill="rgb(216,207,1)" rx="2" ry="2" />
<text  x="46.96" y="207.5" >std::condition_variable..</text>
</g>
<g >
<title>__pthread_clockjoin_ex (15 samples, 10.79%)</title><rect x="1062.7" y="309" width="127.3" height="15.0" fill="rgb(242,203,7)" rx="2" ry="2" />
<text  x="1065.66" y="319.5" >__pthread_clock..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 3.60%)</title><rect x="892.9" y="197" width="42.4" height="15.0" fill="rgb(208,190,3)" rx="2" ry="2" />
<text  x="895.88" y="207.5" >std..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.72%)</title><rect x="1020.2" y="133" width="8.5" height="15.0" fill="rgb(240,195,28)" rx="2" ry="2" />
<text  x="1023.22" y="143.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (60 samples, 43.17%)</title><rect x="222.2" y="117" width="509.4" height="15.0" fill="rgb(244,45,30)" rx="2" ry="2" />
<text  x="225.23" y="127.5" >_IO_new_file_underflow</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 1.44%)</title><rect x="994.7" y="181" width="17.0" height="15.0" fill="rgb(235,168,47)" rx="2" ry="2" />
<text  x="997.75" y="191.5" ></text>
</g>
<g >
<title>PageIdAndRank::~PageIdAndRank (1 samples, 0.72%)</title><rect x="35.5" y="197" width="8.5" height="15.0" fill="rgb(249,183,31)" rx="2" ry="2" />
<text  x="38.47" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (10 samples, 7.19%)</title><rect x="935.3" y="213" width="84.9" height="15.0" fill="rgb(229,222,7)" rx="2" ry="2" />
<text  x="938.32" y="223.5" >std::unor..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (7 samples, 5.04%)</title><rect x="935.3" y="181" width="59.4" height="15.0" fill="rgb(211,202,19)" rx="2" ry="2" />
<text  x="938.32" y="191.5" >std::_..</text>
</g>
<g >
<title>__memmove_avx_unaligned (1 samples, 0.72%)</title><rect x="1020.2" y="37" width="8.5" height="15.0" fill="rgb(237,178,27)" rx="2" ry="2" />
<text  x="1023.22" y="47.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (120 samples, 86.33%)</title><rect x="10.0" y="245" width="1018.7" height="15.0" fill="rgb(245,67,6)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__spawni (8 samples, 5.76%)</title><rect x="825.0" y="117" width="67.9" height="15.0" fill="rgb(219,73,29)" rx="2" ry="2" />
<text  x="827.96" y="127.5" >__spawni</text>
</g>
<g >
<title>pageRankComputationWithNetwork (15 samples, 10.79%)</title><rect x="1062.7" y="357" width="127.3" height="15.0" fill="rgb(237,100,36)" rx="2" ry="2" />
<text  x="1065.66" y="367.5" >pageRankComputa..</text>
</g>
<g >
<title>_IO_new_file_underflow (2 samples, 1.44%)</title><rect x="1045.7" y="293" width="17.0" height="15.0" fill="rgb(212,33,31)" rx="2" ry="2" />
<text  x="1048.68" y="303.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (2 samples, 1.44%)</title><rect x="18.5" y="213" width="17.0" height="15.0" fill="rgb(248,28,33)" rx="2" ry="2" />
<text  x="21.49" y="223.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (15 samples, 10.79%)</title><rect x="1062.7" y="341" width="127.3" height="15.0" fill="rgb(251,95,53)" rx="2" ry="2" />
<text  x="1065.66" y="351.5" >MultiThreadedPa..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.72%)</title><rect x="994.7" y="165" width="8.5" height="15.0" fill="rgb(230,101,1)" rx="2" ry="2" />
<text  x="997.75" y="175.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (21 samples, 15.11%)</title><rect x="44.0" y="133" width="178.2" height="15.0" fill="rgb(232,56,38)" rx="2" ry="2" />
<text  x="46.96" y="143.5" >futex_wait_cancelable</text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.72%)</title><rect x="1020.2" y="69" width="8.5" height="15.0" fill="rgb(210,171,17)" rx="2" ry="2" />
<text  x="1023.22" y="79.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (21 samples, 15.11%)</title><rect x="44.0" y="149" width="178.2" height="15.0" fill="rgb(249,50,39)" rx="2" ry="2" />
<text  x="46.96" y="159.5" >__pthread_cond_wait_com..</text>
</g>
<g >
<title>std::basic_istream&lt;char, (4 samples, 2.88%)</title><rect x="1028.7" y="341" width="34.0" height="15.0" fill="rgb(222,54,44)" rx="2" ry="2" />
<text  x="1031.71" y="351.5" >st..</text>
</g>
<g >
<title>__lll_lock_wait_private (1 samples, 0.72%)</title><rect x="816.5" y="149" width="8.5" height="15.0" fill="rgb(245,226,2)" rx="2" ry="2" />
<text  x="819.47" y="159.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (120 samples, 86.33%)</title><rect x="10.0" y="261" width="1018.7" height="15.0" fill="rgb(227,21,36)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (4 samples, 2.88%)</title><rect x="952.3" y="117" width="34.0" height="15.0" fill="rgb(253,65,54)" rx="2" ry="2" />
<text  x="955.30" y="127.5" >st..</text>
</g>
<g >
<title>__memmove_avx_unaligned (3 samples, 2.16%)</title><rect x="909.9" y="181" width="25.4" height="15.0" fill="rgb(215,94,8)" rx="2" ry="2" />
<text  x="912.86" y="191.5" >_..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.72%)</title><rect x="1003.2" y="165" width="8.5" height="15.0" fill="rgb(214,113,16)" rx="2" ry="2" />
<text  x="1006.24" y="175.5" ></text>
</g>
<g >
<title>all (139 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,218,31)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__GI___waitpid (2 samples, 1.44%)</title><rect x="731.6" y="133" width="17.0" height="15.0" fill="rgb(216,180,35)" rx="2" ry="2" />
<text  x="734.58" y="143.5" ></text>
</g>
<g >
<title>__spawnix (8 samples, 5.76%)</title><rect x="825.0" y="101" width="67.9" height="15.0" fill="rgb(213,53,24)" rx="2" ry="2" />
<text  x="827.96" y="111.5" >__spawnix</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (2 samples, 1.44%)</title><rect x="969.3" y="69" width="17.0" height="15.0" fill="rgb(238,130,17)" rx="2" ry="2" />
<text  x="972.28" y="79.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.72%)</title><rect x="222.2" y="53" width="8.5" height="15.0" fill="rgb(241,12,29)" rx="2" ry="2" />
<text  x="225.23" y="63.5" ></text>
</g>
<g >
<title>__GI__IO_getline (60 samples, 43.17%)</title><rect x="222.2" y="165" width="509.4" height="15.0" fill="rgb(233,225,41)" rx="2" ry="2" />
<text  x="225.23" y="175.5" >__GI__IO_getline</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (4 samples, 2.88%)</title><rect x="952.3" y="85" width="34.0" height="15.0" fill="rgb(215,61,10)" rx="2" ry="2" />
<text  x="955.30" y="95.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 0.72%)</title><rect x="27.0" y="197" width="8.5" height="15.0" fill="rgb(239,29,51)" rx="2" ry="2" />
<text  x="29.98" y="207.5" ></text>
</g>
<g >
<title>clone (120 samples, 86.33%)</title><rect x="10.0" y="373" width="1018.7" height="15.0" fill="rgb(243,120,46)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >clone</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.72%)</title><rect x="1011.7" y="133" width="8.5" height="15.0" fill="rgb(223,176,2)" rx="2" ry="2" />
<text  x="1014.73" y="143.5" ></text>
</g>
<g >
<title>clone (8 samples, 5.76%)</title><rect x="825.0" y="85" width="67.9" height="15.0" fill="rgb(231,205,17)" rx="2" ry="2" />
<text  x="827.96" y="95.5" >clone</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.72%)</title><rect x="986.3" y="165" width="8.4" height="15.0" fill="rgb(237,139,13)" rx="2" ry="2" />
<text  x="989.26" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 0.72%)</title><rect x="27.0" y="181" width="8.5" height="15.0" fill="rgb(245,186,54)" rx="2" ry="2" />
<text  x="29.98" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 1.44%)</title><rect x="969.3" y="53" width="17.0" height="15.0" fill="rgb(249,80,45)" rx="2" ry="2" />
<text  x="972.28" y="63.5" ></text>
</g>
<g >
<title>Page::generateId (79 samples, 56.83%)</title><rect x="222.2" y="213" width="670.7" height="15.0" fill="rgb(235,144,40)" rx="2" ry="2" />
<text  x="225.23" y="223.5" >Page::generateId</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, (1 samples, 0.72%)</title><rect x="986.3" y="133" width="8.4" height="15.0" fill="rgb(213,140,17)" rx="2" ry="2" />
<text  x="989.26" y="143.5" ></text>
</g>
<g >
<title>PageId::PageId (5 samples, 3.60%)</title><rect x="892.9" y="213" width="42.4" height="15.0" fill="rgb(214,113,54)" rx="2" ry="2" />
<text  x="895.88" y="223.5" >Pag..</text>
</g>
<g >
<title>_IO_fgets (60 samples, 43.17%)</title><rect x="222.2" y="181" width="509.4" height="15.0" fill="rgb(243,89,51)" rx="2" ry="2" />
<text  x="225.23" y="191.5" >_IO_fgets</text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (21 samples, 15.11%)</title><rect x="44.0" y="181" width="178.2" height="15.0" fill="rgb(209,151,30)" rx="2" ry="2" />
<text  x="46.96" y="191.5" >std::condition_variable..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;PageId (1 samples, 0.72%)</title><rect x="1011.7" y="149" width="8.5" height="15.0" fill="rgb(243,4,18)" rx="2" ry="2" />
<text  x="1014.73" y="159.5" ></text>
</g>
<g >
<title>spawn_process (8 samples, 5.76%)</title><rect x="825.0" y="149" width="67.9" height="15.0" fill="rgb(228,137,24)" rx="2" ry="2" />
<text  x="827.96" y="159.5" >spawn_p..</text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.72%)</title><rect x="1020.2" y="85" width="8.5" height="15.0" fill="rgb(208,38,25)" rx="2" ry="2" />
<text  x="1023.22" y="95.5" ></text>
</g>
<g >
<title>std::thread::join() (15 samples, 10.79%)</title><rect x="1062.7" y="325" width="127.3" height="15.0" fill="rgb(223,192,48)" rx="2" ry="2" />
<text  x="1065.66" y="335.5" >std::thread::jo..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (120 samples, 86.33%)</title><rect x="10.0" y="325" width="1018.7" height="15.0" fill="rgb(241,60,34)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__detail::_Select1st::operator()&lt;std::pair&lt;PageId (1 samples, 0.72%)</title><rect x="943.8" y="117" width="8.5" height="15.0" fill="rgb(223,226,30)" rx="2" ry="2" />
<text  x="946.81" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.72%)</title><rect x="1020.2" y="197" width="8.5" height="15.0" fill="rgb(211,217,4)" rx="2" ry="2" />
<text  x="1023.22" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (5 samples, 3.60%)</title><rect x="943.8" y="165" width="42.5" height="15.0" fill="rgb(223,170,43)" rx="2" ry="2" />
<text  x="946.81" y="175.5" >std..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (120 samples, 86.33%)</title><rect x="10.0" y="293" width="1018.7" height="15.0" fill="rgb(216,172,43)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.72%)</title><rect x="1011.7" y="165" width="8.5" height="15.0" fill="rgb(231,91,51)" rx="2" ry="2" />
<text  x="1014.73" y="175.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (60 samples, 43.17%)</title><rect x="222.2" y="133" width="509.4" height="15.0" fill="rgb(209,174,2)" rx="2" ry="2" />
<text  x="225.23" y="143.5" >__GI__IO_default_uflow</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.72%)</title><rect x="222.2" y="69" width="8.5" height="15.0" fill="rgb(216,39,36)" rx="2" ry="2" />
<text  x="225.23" y="79.5" ></text>
</g>
<g >
<title>__GI__IO_file_doallocate (1 samples, 0.72%)</title><rect x="222.2" y="85" width="8.5" height="15.0" fill="rgb(207,82,13)" rx="2" ry="2" />
<text  x="225.23" y="95.5" ></text>
</g>
<g >
<title>__GI___posix_spawn (8 samples, 5.76%)</title><rect x="825.0" y="133" width="67.9" height="15.0" fill="rgb(213,190,43)" rx="2" ry="2" />
<text  x="827.96" y="143.5" >__GI___..</text>
</g>
<g >
<title>main (19 samples, 13.67%)</title><rect x="1028.7" y="373" width="161.3" height="15.0" fill="rgb(215,7,3)" rx="2" ry="2" />
<text  x="1031.71" y="383.5" >main</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.72%)</title><rect x="1020.2" y="53" width="8.5" height="15.0" fill="rgb(232,176,34)" rx="2" ry="2" />
<text  x="1023.22" y="63.5" ></text>
</g>
<g >
<title>PageId::operator== (4 samples, 2.88%)</title><rect x="952.3" y="101" width="34.0" height="15.0" fill="rgb(209,44,52)" rx="2" ry="2" />
<text  x="955.30" y="111.5" >Pa..</text>
</g>
<g >
<title>_IO_getc (1 samples, 0.72%)</title><rect x="1037.2" y="309" width="8.5" height="15.0" fill="rgb(213,217,37)" rx="2" ry="2" />
<text  x="1040.19" y="319.5" ></text>
</g>
<g >
<title>?? (120 samples, 86.33%)</title><rect x="10.0" y="341" width="1018.7" height="15.0" fill="rgb(252,137,11)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >??</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.72%)</title><rect x="986.3" y="149" width="8.4" height="15.0" fill="rgb(254,112,51)" rx="2" ry="2" />
<text  x="989.26" y="159.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (4 samples, 2.88%)</title><rect x="1028.7" y="357" width="34.0" height="15.0" fill="rgb(254,25,26)" rx="2" ry="2" />
<text  x="1031.71" y="367.5" >St..</text>
</g>
<g >
<title>__GI___libc_read (59 samples, 42.45%)</title><rect x="230.7" y="101" width="500.9" height="15.0" fill="rgb(239,102,28)" rx="2" ry="2" />
<text  x="233.72" y="111.5" >__GI___libc_read</text>
</g>
<g >
<title>start_thread (120 samples, 86.33%)</title><rect x="10.0" y="357" width="1018.7" height="15.0" fill="rgb(229,207,11)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >start_thread</text>
</g>
<g >
<title>_IO_new_proc_open (9 samples, 6.47%)</title><rect x="816.5" y="165" width="76.4" height="15.0" fill="rgb(220,167,48)" rx="2" ry="2" />
<text  x="819.47" y="175.5" >_IO_new_..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId (79 samples, 56.83%)</title><rect x="222.2" y="197" width="670.7" height="15.0" fill="rgb(243,201,47)" rx="2" ry="2" />
<text  x="225.23" y="207.5" >Sha256IdGenerator::generateId</text>
</g>
<g >
<title>Page::Page (1 samples, 0.72%)</title><rect x="1020.2" y="165" width="8.5" height="15.0" fill="rgb(206,182,23)" rx="2" ry="2" />
<text  x="1023.22" y="175.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.72%)</title><rect x="18.5" y="197" width="8.5" height="15.0" fill="rgb(241,214,41)" rx="2" ry="2" />
<text  x="21.49" y="207.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (2 samples, 1.44%)</title><rect x="1045.7" y="309" width="17.0" height="15.0" fill="rgb(205,23,31)" rx="2" ry="2" />
<text  x="1048.68" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.72%)</title><rect x="1020.2" y="213" width="8.5" height="15.0" fill="rgb(248,12,51)" rx="2" ry="2" />
<text  x="1023.22" y="223.5" ></text>
</g>
<g >
<title>__GI__IO_getline_info (60 samples, 43.17%)</title><rect x="222.2" y="149" width="509.4" height="15.0" fill="rgb(243,94,38)" rx="2" ry="2" />
<text  x="225.23" y="159.5" >__GI__IO_getline_info</text>
</g>
<g >
<title>__GI__IO_doallocbuf (1 samples, 0.72%)</title><rect x="222.2" y="101" width="8.5" height="15.0" fill="rgb(225,6,32)" rx="2" ry="2" />
<text  x="225.23" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.72%)</title><rect x="1020.2" y="149" width="8.5" height="15.0" fill="rgb(225,95,9)" rx="2" ry="2" />
<text  x="1023.22" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.72%)</title><rect x="1011.7" y="181" width="8.5" height="15.0" fill="rgb(205,185,19)" rx="2" ry="2" />
<text  x="1014.73" y="191.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.72%)</title><rect x="1020.2" y="117" width="8.5" height="15.0" fill="rgb(240,116,35)" rx="2" ry="2" />
<text  x="1023.22" y="127.5" ></text>
</g>
<g >
<title>__lll_lock_wait_private (8 samples, 5.76%)</title><rect x="748.6" y="133" width="67.9" height="15.0" fill="rgb(227,76,46)" rx="2" ry="2" />
<text  x="751.56" y="143.5" >__lll_l..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (120 samples, 86.33%)</title><rect x="10.0" y="309" width="1018.7" height="15.0" fill="rgb(232,24,18)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, (3 samples, 2.16%)</title><rect x="1037.2" y="325" width="25.5" height="15.0" fill="rgb(221,189,1)" rx="2" ry="2" />
<text  x="1040.19" y="335.5" >_..</text>
</g>
<g >
<title>_IO_new_fclose (10 samples, 7.19%)</title><rect x="731.6" y="181" width="84.9" height="15.0" fill="rgb(207,74,26)" rx="2" ry="2" />
<text  x="734.58" y="191.5" >_IO_new_f..</text>
</g>
<g >
<title>_IO_new_popen (9 samples, 6.47%)</title><rect x="816.5" y="181" width="76.4" height="15.0" fill="rgb(240,7,34)" rx="2" ry="2" />
<text  x="819.47" y="191.5" >_IO_new_..</text>
</g>
</g>
</svg>
