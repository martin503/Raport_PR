<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>sysmalloc (1 samples, 0.83%)</title><rect x="19.8" y="117" width="9.7" height="15.0" fill="rgb(206,179,1)" rx="2" ry="2" />
<text  x="22.75" y="127.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork(Network (78 samples, 64.46%)</title><rect x="10.0" y="261" width="760.7" height="15.0" fill="rgb(233,185,18)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__pthread_cond_wait (2 samples, 1.65%)</title><rect x="39.3" y="181" width="19.5" height="15.0" fill="rgb(228,67,16)" rx="2" ry="2" />
<text  x="42.26" y="191.5" ></text>
</g>
<g >
<title>clone (78 samples, 64.46%)</title><rect x="10.0" y="389" width="760.7" height="15.0" fill="rgb(216,47,6)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >clone</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (78 samples, 64.46%)</title><rect x="10.0" y="309" width="760.7" height="15.0" fill="rgb(222,126,18)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__GI__IO_getline_info (49 samples, 40.50%)</title><rect x="58.8" y="165" width="477.8" height="15.0" fill="rgb(218,74,54)" rx="2" ry="2" />
<text  x="61.76" y="175.5" >__GI__IO_getline_info</text>
</g>
<g >
<title>spawn_process (9 samples, 7.44%)</title><rect x="546.4" y="165" width="87.7" height="15.0" fill="rgb(242,163,1)" rx="2" ry="2" />
<text  x="549.36" y="175.5" >spawn_proc..</text>
</g>
<g >
<title>mprotect (1 samples, 0.83%)</title><rect x="19.8" y="85" width="9.7" height="15.0" fill="rgb(244,183,21)" rx="2" ry="2" />
<text  x="22.75" y="95.5" ></text>
</g>
<g >
<title>Page::Page (1 samples, 0.83%)</title><rect x="760.9" y="181" width="9.8" height="15.0" fill="rgb(212,213,2)" rx="2" ry="2" />
<text  x="763.91" y="191.5" ></text>
</g>
<g >
<title>Page::generateId (59 samples, 48.76%)</title><rect x="58.8" y="229" width="575.3" height="15.0" fill="rgb(215,62,10)" rx="2" ry="2" />
<text  x="61.76" y="239.5" >Page::generateId</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.83%)</title><rect x="760.9" y="213" width="9.8" height="15.0" fill="rgb(225,70,38)" rx="2" ry="2" />
<text  x="763.91" y="223.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (78 samples, 64.46%)</title><rect x="10.0" y="341" width="760.7" height="15.0" fill="rgb(225,94,24)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwor..</text>
</g>
<g >
<title>__spawnix (9 samples, 7.44%)</title><rect x="546.4" y="117" width="87.7" height="15.0" fill="rgb(216,122,49)" rx="2" ry="2" />
<text  x="549.36" y="127.5" >__spawnix</text>
</g>
<g >
<title>std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (78 samples, 64.46%)</title><rect x="10.0" y="293" width="760.7" height="15.0" fill="rgb(249,222,15)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::__invoke&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.83%)</title><rect x="29.5" y="117" width="9.8" height="15.0" fill="rgb(230,173,25)" rx="2" ry="2" />
<text  x="32.50" y="127.5" ></text>
</g>
<g >
<title>clone (9 samples, 7.44%)</title><rect x="546.4" y="101" width="87.7" height="15.0" fill="rgb(216,169,19)" rx="2" ry="2" />
<text  x="549.36" y="111.5" >clone</text>
</g>
<g >
<title>_IO_new_file_underflow (49 samples, 40.50%)</title><rect x="58.8" y="133" width="477.8" height="15.0" fill="rgb(247,218,36)" rx="2" ry="2" />
<text  x="61.76" y="143.5" >_IO_new_file_underflow</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 2.48%)</title><rect x="712.1" y="197" width="29.3" height="15.0" fill="rgb(247,206,14)" rx="2" ry="2" />
<text  x="715.15" y="207.5" >st..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::initRestSequential (2 samples, 1.65%)</title><rect x="19.8" y="229" width="19.5" height="15.0" fill="rgb(247,140,2)" rx="2" ry="2" />
<text  x="22.75" y="239.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::wait (2 samples, 1.65%)</title><rect x="39.3" y="229" width="19.5" height="15.0" fill="rgb(209,59,40)" rx="2" ry="2" />
<text  x="42.26" y="239.5" ></text>
</g>
<g >
<title>main (43 samples, 35.54%)</title><rect x="770.7" y="389" width="419.3" height="15.0" fill="rgb(217,121,24)" rx="2" ry="2" />
<text  x="773.66" y="399.5" >main</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::WorkerData::work (78 samples, 64.46%)</title><rect x="10.0" y="245" width="760.7" height="15.0" fill="rgb(229,79,40)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >MultiThreadedPageRankComputer::WorkerData::work</text>
</g>
<g >
<title>all (121 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(208,145,5)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>_IO_new_fclose (1 samples, 0.83%)</title><rect x="536.6" y="197" width="9.8" height="15.0" fill="rgb(250,120,46)" rx="2" ry="2" />
<text  x="539.61" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (2 samples, 1.65%)</title><rect x="721.9" y="165" width="19.5" height="15.0" fill="rgb(209,69,23)" rx="2" ry="2" />
<text  x="724.90" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="29.5" y="181" width="9.8" height="15.0" fill="rgb(244,124,37)" rx="2" ry="2" />
<text  x="32.50" y="191.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, (2 samples, 1.65%)</title><rect x="790.2" y="357" width="19.5" height="15.0" fill="rgb(230,41,2)" rx="2" ry="2" />
<text  x="793.17" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (1 samples, 0.83%)</title><rect x="780.4" y="309" width="9.8" height="15.0" fill="rgb(224,53,3)" rx="2" ry="2" />
<text  x="783.41" y="319.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (39 samples, 32.23%)</title><rect x="809.7" y="357" width="380.3" height="15.0" fill="rgb(207,227,12)" rx="2" ry="2" />
<text  x="812.67" y="367.5" >MultiThreadedPageRankComputer::computeForNetwork</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="770.7" y="229" width="9.7" height="15.0" fill="rgb(247,152,8)" rx="2" ry="2" />
<text  x="773.66" y="239.5" ></text>
</g>
<g >
<title>start_thread (78 samples, 64.46%)</title><rect x="10.0" y="373" width="760.7" height="15.0" fill="rgb(211,22,28)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >start_thread</text>
</g>
<g >
<title>Page::Page (1 samples, 0.83%)</title><rect x="770.7" y="293" width="9.7" height="15.0" fill="rgb(251,36,25)" rx="2" ry="2" />
<text  x="773.66" y="303.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="780.4" y="293" width="9.8" height="15.0" fill="rgb(222,22,27)" rx="2" ry="2" />
<text  x="783.41" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.83%)</title><rect x="29.5" y="149" width="9.8" height="15.0" fill="rgb(220,206,4)" rx="2" ry="2" />
<text  x="32.50" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.83%)</title><rect x="741.4" y="197" width="9.8" height="15.0" fill="rgb(213,202,31)" rx="2" ry="2" />
<text  x="744.40" y="207.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (4 samples, 3.31%)</title><rect x="770.7" y="373" width="39.0" height="15.0" fill="rgb(238,9,1)" rx="2" ry="2" />
<text  x="773.66" y="383.5" >Std..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (2 samples, 1.65%)</title><rect x="721.9" y="149" width="19.5" height="15.0" fill="rgb(206,17,48)" rx="2" ry="2" />
<text  x="724.90" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="770.7" y="261" width="9.7" height="15.0" fill="rgb(246,227,50)" rx="2" ry="2" />
<text  x="773.66" y="271.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.83%)</title><rect x="780.4" y="229" width="9.8" height="15.0" fill="rgb(208,60,4)" rx="2" ry="2" />
<text  x="783.41" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.83%)</title><rect x="741.4" y="149" width="9.8" height="15.0" fill="rgb(221,168,28)" rx="2" ry="2" />
<text  x="744.40" y="159.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="19.8" y="197" width="9.7" height="15.0" fill="rgb(244,84,6)" rx="2" ry="2" />
<text  x="22.75" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.83%)</title><rect x="29.5" y="53" width="9.8" height="15.0" fill="rgb(254,182,32)" rx="2" ry="2" />
<text  x="32.50" y="63.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 0.83%)</title><rect x="692.6" y="229" width="9.8" height="15.0" fill="rgb(209,87,44)" rx="2" ry="2" />
<text  x="695.64" y="239.5" ></text>
</g>
<g >
<title>grow_heap (1 samples, 0.83%)</title><rect x="19.8" y="101" width="9.7" height="15.0" fill="rgb(214,129,52)" rx="2" ry="2" />
<text  x="22.75" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="760.9" y="165" width="9.8" height="15.0" fill="rgb(252,197,24)" rx="2" ry="2" />
<text  x="763.91" y="175.5" ></text>
</g>
<g >
<title>_IO_new_proc_close (1 samples, 0.83%)</title><rect x="536.6" y="165" width="9.8" height="15.0" fill="rgb(238,133,46)" rx="2" ry="2" />
<text  x="539.61" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.83%)</title><rect x="770.7" y="133" width="9.7" height="15.0" fill="rgb(253,122,28)" rx="2" ry="2" />
<text  x="773.66" y="143.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, (78 samples, 64.46%)</title><rect x="10.0" y="277" width="760.7" height="15.0" fill="rgb(234,8,24)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >std::__invoke_impl&lt;void,</text>
</g>
<g >
<title>PageId::operator== (2 samples, 1.65%)</title><rect x="721.9" y="117" width="19.5" height="15.0" fill="rgb(241,166,4)" rx="2" ry="2" />
<text  x="724.90" y="127.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (2 samples, 1.65%)</title><rect x="39.3" y="149" width="19.5" height="15.0" fill="rgb(247,176,25)" rx="2" ry="2" />
<text  x="42.26" y="159.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="770.7" y="245" width="9.7" height="15.0" fill="rgb(236,139,15)" rx="2" ry="2" />
<text  x="773.66" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (1 samples, 0.83%)</title><rect x="29.5" y="197" width="9.8" height="15.0" fill="rgb(215,140,4)" rx="2" ry="2" />
<text  x="32.50" y="207.5" ></text>
</g>
<g >
<title>_IO_ungetc (1 samples, 0.83%)</title><rect x="799.9" y="341" width="9.8" height="15.0" fill="rgb(220,125,5)" rx="2" ry="2" />
<text  x="802.92" y="351.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.83%)</title><rect x="731.7" y="85" width="9.7" height="15.0" fill="rgb(249,121,25)" rx="2" ry="2" />
<text  x="734.65" y="95.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.83%)</title><rect x="19.8" y="165" width="9.7" height="15.0" fill="rgb(250,221,39)" rx="2" ry="2" />
<text  x="22.75" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.83%)</title><rect x="760.9" y="197" width="9.8" height="15.0" fill="rgb(230,184,11)" rx="2" ry="2" />
<text  x="763.91" y="207.5" ></text>
</g>
<g >
<title>__pthread_clockjoin_ex (39 samples, 32.23%)</title><rect x="809.7" y="325" width="380.3" height="15.0" fill="rgb(250,16,8)" rx="2" ry="2" />
<text  x="812.67" y="335.5" >__pthread_clockjoin_ex</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (6 samples, 4.96%)</title><rect x="702.4" y="229" width="58.5" height="15.0" fill="rgb(241,141,32)" rx="2" ry="2" />
<text  x="705.40" y="239.5" >std::u..</text>
</g>
<g >
<title>PageId::PageId (6 samples, 4.96%)</title><rect x="634.1" y="229" width="58.5" height="15.0" fill="rgb(216,206,7)" rx="2" ry="2" />
<text  x="637.13" y="239.5" >PageId..</text>
</g>
<g >
<title>pageRankComputationWithNetwork (39 samples, 32.23%)</title><rect x="809.7" y="373" width="380.3" height="15.0" fill="rgb(206,223,47)" rx="2" ry="2" />
<text  x="812.67" y="383.5" >pageRankComputationWithNetwork</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (6 samples, 4.96%)</title><rect x="702.4" y="213" width="58.5" height="15.0" fill="rgb(218,76,50)" rx="2" ry="2" />
<text  x="705.40" y="223.5" >std::_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="19.8" y="181" width="9.7" height="15.0" fill="rgb(213,84,37)" rx="2" ry="2" />
<text  x="22.75" y="191.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId (59 samples, 48.76%)</title><rect x="58.8" y="213" width="575.3" height="15.0" fill="rgb(230,147,11)" rx="2" ry="2" />
<text  x="61.76" y="223.5" >Sha256IdGenerator::generateId</text>
</g>
<g >
<title>__spawni (9 samples, 7.44%)</title><rect x="546.4" y="133" width="87.7" height="15.0" fill="rgb(239,130,10)" rx="2" ry="2" />
<text  x="549.36" y="143.5" >__spawni</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.83%)</title><rect x="29.5" y="85" width="9.8" height="15.0" fill="rgb(225,201,43)" rx="2" ry="2" />
<text  x="32.50" y="95.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.83%)</title><rect x="770.7" y="213" width="9.7" height="15.0" fill="rgb(211,190,12)" rx="2" ry="2" />
<text  x="773.66" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.83%)</title><rect x="29.5" y="165" width="9.8" height="15.0" fill="rgb(221,113,29)" rx="2" ry="2" />
<text  x="32.50" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (2 samples, 1.65%)</title><rect x="721.9" y="101" width="19.5" height="15.0" fill="rgb(226,89,32)" rx="2" ry="2" />
<text  x="724.90" y="111.5" ></text>
</g>
<g >
<title>__GI__IO_getline (49 samples, 40.50%)</title><rect x="58.8" y="181" width="477.8" height="15.0" fill="rgb(222,157,47)" rx="2" ry="2" />
<text  x="61.76" y="191.5" >__GI__IO_getline</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (1 samples, 0.83%)</title><rect x="29.5" y="213" width="9.8" height="15.0" fill="rgb(227,2,4)" rx="2" ry="2" />
<text  x="32.50" y="223.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.83%)</title><rect x="780.4" y="261" width="9.8" height="15.0" fill="rgb(238,198,22)" rx="2" ry="2" />
<text  x="783.41" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="760.9" y="149" width="9.8" height="15.0" fill="rgb(221,138,12)" rx="2" ry="2" />
<text  x="763.91" y="159.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1 samples, 0.83%)</title><rect x="29.5" y="69" width="9.8" height="15.0" fill="rgb(247,75,20)" rx="2" ry="2" />
<text  x="32.50" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Page&gt;::construct&lt;Page, (1 samples, 0.83%)</title><rect x="770.7" y="309" width="9.7" height="15.0" fill="rgb(208,77,35)" rx="2" ry="2" />
<text  x="773.66" y="319.5" ></text>
</g>
<g >
<title>_IO_fgets (49 samples, 40.50%)</title><rect x="58.8" y="197" width="477.8" height="15.0" fill="rgb(246,202,54)" rx="2" ry="2" />
<text  x="61.76" y="207.5" >_IO_fgets</text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::WorkerData::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;, (2 samples, 1.65%)</title><rect x="39.3" y="213" width="19.5" height="15.0" fill="rgb(235,29,32)" rx="2" ry="2" />
<text  x="42.26" y="223.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (1 samples, 0.83%)</title><rect x="682.9" y="197" width="9.7" height="15.0" fill="rgb(232,222,43)" rx="2" ry="2" />
<text  x="685.89" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.83%)</title><rect x="760.9" y="229" width="9.8" height="15.0" fill="rgb(209,93,34)" rx="2" ry="2" />
<text  x="763.91" y="239.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network (78 samples, 64.46%)</title><rect x="10.0" y="325" width="760.7" height="15.0" fill="rgb(213,158,10)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >std::thread::_Invoker&lt;std::tuple&lt;MultiThreadedPageRankComputer::computeForNetwork(Network</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.83%)</title><rect x="770.7" y="149" width="9.7" height="15.0" fill="rgb(240,70,44)" rx="2" ry="2" />
<text  x="773.66" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (3 samples, 2.48%)</title><rect x="712.1" y="181" width="29.3" height="15.0" fill="rgb(206,54,41)" rx="2" ry="2" />
<text  x="715.15" y="191.5" >st..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.83%)</title><rect x="29.5" y="133" width="9.8" height="15.0" fill="rgb(252,116,45)" rx="2" ry="2" />
<text  x="32.50" y="143.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.83%)</title><rect x="663.4" y="197" width="9.7" height="15.0" fill="rgb(215,160,33)" rx="2" ry="2" />
<text  x="666.39" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_read (49 samples, 40.50%)</title><rect x="58.8" y="117" width="477.8" height="15.0" fill="rgb(212,154,23)" rx="2" ry="2" />
<text  x="61.76" y="127.5" >__GI___libc_read</text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="760.9" y="133" width="9.8" height="15.0" fill="rgb(224,221,20)" rx="2" ry="2" />
<text  x="763.91" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Page&gt; (1 samples, 0.83%)</title><rect x="770.7" y="325" width="9.7" height="15.0" fill="rgb(231,29,23)" rx="2" ry="2" />
<text  x="773.66" y="335.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.83%)</title><rect x="19.8" y="149" width="9.7" height="15.0" fill="rgb(224,99,14)" rx="2" ry="2" />
<text  x="22.75" y="159.5" ></text>
</g>
<g >
<title>?? (78 samples, 64.46%)</title><rect x="10.0" y="357" width="760.7" height="15.0" fill="rgb(217,98,51)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >??</text>
</g>
<g >
<title>__GI___posix_spawn (9 samples, 7.44%)</title><rect x="546.4" y="149" width="87.7" height="15.0" fill="rgb(212,155,26)" rx="2" ry="2" />
<text  x="549.36" y="159.5" >__GI___pos..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="760.9" y="69" width="9.8" height="15.0" fill="rgb(228,15,27)" rx="2" ry="2" />
<text  x="763.91" y="79.5" ></text>
</g>
<g >
<title>Network::addPage (1 samples, 0.83%)</title><rect x="770.7" y="357" width="9.7" height="15.0" fill="rgb(207,210,32)" rx="2" ry="2" />
<text  x="773.66" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="741.4" y="165" width="9.8" height="15.0" fill="rgb(243,172,2)" rx="2" ry="2" />
<text  x="744.40" y="175.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (49 samples, 40.50%)</title><rect x="58.8" y="149" width="477.8" height="15.0" fill="rgb(207,80,41)" rx="2" ry="2" />
<text  x="61.76" y="159.5" >__GI__IO_default_uflow</text>
</g>
<g >
<title>std::thread::join() (39 samples, 32.23%)</title><rect x="809.7" y="341" width="380.3" height="15.0" fill="rgb(244,65,5)" rx="2" ry="2" />
<text  x="812.67" y="351.5" >std::thread::join()</text>
</g>
<g >
<title>__pthread_cond_wait_common (2 samples, 1.65%)</title><rect x="39.3" y="165" width="19.5" height="15.0" fill="rgb(232,146,50)" rx="2" ry="2" />
<text  x="42.26" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="770.7" y="181" width="9.7" height="15.0" fill="rgb(241,24,31)" rx="2" ry="2" />
<text  x="773.66" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.83%)</title><rect x="731.7" y="69" width="9.7" height="15.0" fill="rgb(225,82,3)" rx="2" ry="2" />
<text  x="734.65" y="79.5" ></text>
</g>
<g >
<title>Page::getId (1 samples, 0.83%)</title><rect x="19.8" y="213" width="9.7" height="15.0" fill="rgb(207,60,13)" rx="2" ry="2" />
<text  x="22.75" y="223.5" ></text>
</g>
<g >
<title>Page::addLink (1 samples, 0.83%)</title><rect x="780.4" y="357" width="9.8" height="15.0" fill="rgb(206,5,41)" rx="2" ry="2" />
<text  x="783.41" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="780.4" y="341" width="9.8" height="15.0" fill="rgb(230,115,38)" rx="2" ry="2" />
<text  x="783.41" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(void (1 samples, 0.83%)</title><rect x="741.4" y="133" width="9.8" height="15.0" fill="rgb(226,71,25)" rx="2" ry="2" />
<text  x="744.40" y="143.5" ></text>
</g>
<g >
<title>_IO_new_popen (9 samples, 7.44%)</title><rect x="546.4" y="197" width="87.7" height="15.0" fill="rgb(208,62,50)" rx="2" ry="2" />
<text  x="549.36" y="207.5" >_IO_new_po..</text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="760.9" y="85" width="9.8" height="15.0" fill="rgb(235,191,8)" rx="2" ry="2" />
<text  x="763.91" y="95.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.83%)</title><rect x="760.9" y="37" width="9.8" height="15.0" fill="rgb(236,124,41)" rx="2" ry="2" />
<text  x="763.91" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;PageId (1 samples, 0.83%)</title><rect x="751.2" y="197" width="9.7" height="15.0" fill="rgb(235,69,46)" rx="2" ry="2" />
<text  x="754.16" y="207.5" ></text>
</g>
<g >
<title>_IO_new_file_close_it (1 samples, 0.83%)</title><rect x="536.6" y="181" width="9.8" height="15.0" fill="rgb(227,110,9)" rx="2" ry="2" />
<text  x="539.61" y="191.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (1 samples, 0.83%)</title><rect x="760.9" y="101" width="9.8" height="15.0" fill="rgb(240,216,9)" rx="2" ry="2" />
<text  x="763.91" y="111.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (2 samples, 1.65%)</title><rect x="721.9" y="133" width="19.5" height="15.0" fill="rgb(242,202,0)" rx="2" ry="2" />
<text  x="724.90" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="780.4" y="277" width="9.8" height="15.0" fill="rgb(234,74,2)" rx="2" ry="2" />
<text  x="783.41" y="287.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.83%)</title><rect x="770.7" y="165" width="9.7" height="15.0" fill="rgb(254,24,29)" rx="2" ry="2" />
<text  x="773.66" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.83%)</title><rect x="19.8" y="133" width="9.7" height="15.0" fill="rgb(237,64,39)" rx="2" ry="2" />
<text  x="22.75" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;Page, (1 samples, 0.83%)</title><rect x="770.7" y="341" width="9.7" height="15.0" fill="rgb(248,65,44)" rx="2" ry="2" />
<text  x="773.66" y="351.5" ></text>
</g>
<g >
<title>__GI___waitpid (1 samples, 0.83%)</title><rect x="536.6" y="149" width="9.8" height="15.0" fill="rgb(231,181,12)" rx="2" ry="2" />
<text  x="539.61" y="159.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.83%)</title><rect x="741.4" y="181" width="9.8" height="15.0" fill="rgb(241,102,45)" rx="2" ry="2" />
<text  x="744.40" y="191.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (1 samples, 0.83%)</title><rect x="682.9" y="181" width="9.7" height="15.0" fill="rgb(251,68,36)" rx="2" ry="2" />
<text  x="685.89" y="191.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.83%)</title><rect x="663.4" y="181" width="9.7" height="15.0" fill="rgb(238,182,28)" rx="2" ry="2" />
<text  x="666.39" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (5 samples, 4.13%)</title><rect x="643.9" y="213" width="48.7" height="15.0" fill="rgb(243,199,1)" rx="2" ry="2" />
<text  x="646.88" y="223.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.83%)</title><rect x="770.7" y="277" width="9.7" height="15.0" fill="rgb(254,123,54)" rx="2" ry="2" />
<text  x="773.66" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_read (49 samples, 40.50%)</title><rect x="58.8" y="101" width="477.8" height="15.0" fill="rgb(231,159,45)" rx="2" ry="2" />
<text  x="61.76" y="111.5" >__GI___libc_read</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.83%)</title><rect x="673.1" y="197" width="9.8" height="15.0" fill="rgb(229,149,31)" rx="2" ry="2" />
<text  x="676.14" y="207.5" ></text>
</g>
<g >
<title>_IO_new_proc_open (9 samples, 7.44%)</title><rect x="546.4" y="181" width="87.7" height="15.0" fill="rgb(225,161,25)" rx="2" ry="2" />
<text  x="549.36" y="191.5" >_IO_new_pr..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.83%)</title><rect x="780.4" y="325" width="9.8" height="15.0" fill="rgb(238,45,34)" rx="2" ry="2" />
<text  x="783.41" y="335.5" ></text>
</g>
<g >
<title>__GI___wait4 (1 samples, 0.83%)</title><rect x="536.6" y="133" width="9.8" height="15.0" fill="rgb(221,157,45)" rx="2" ry="2" />
<text  x="539.61" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned (1 samples, 0.83%)</title><rect x="653.6" y="197" width="9.8" height="15.0" fill="rgb(231,86,50)" rx="2" ry="2" />
<text  x="656.64" y="207.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.83%)</title><rect x="770.7" y="197" width="9.7" height="15.0" fill="rgb(222,213,31)" rx="2" ry="2" />
<text  x="773.66" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.83%)</title><rect x="780.4" y="245" width="9.8" height="15.0" fill="rgb(233,99,1)" rx="2" ry="2" />
<text  x="783.41" y="255.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (2 samples, 1.65%)</title><rect x="39.3" y="197" width="19.5" height="15.0" fill="rgb(207,176,54)" rx="2" ry="2" />
<text  x="42.26" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (1 samples, 0.83%)</title><rect x="760.9" y="117" width="9.8" height="15.0" fill="rgb(220,150,19)" rx="2" ry="2" />
<text  x="763.91" y="127.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.83%)</title><rect x="760.9" y="53" width="9.8" height="15.0" fill="rgb(232,218,6)" rx="2" ry="2" />
<text  x="763.91" y="63.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.83%)</title><rect x="29.5" y="101" width="9.8" height="15.0" fill="rgb(224,3,6)" rx="2" ry="2" />
<text  x="32.50" y="111.5" ></text>
</g>
</g>
</svg>
